{
  "scope": "source.js",
  "completions": [
    {
      "trigger": "game.add.text",
      "contents": "game.add.text(${1:x},${2:y},${3:text},${4:style});"
    },
    {
      "trigger": "game.add.sprite",
      "contents": "game.add.sprite(${1:x},${2:y},${3:key});"
    },
    {
      "trigger": "game.add.group",
      "contents": "game.add.group"
    },
    {
      "trigger": "game.add.audio",
      "contents": "game.add.audio(${1:audio});"
    },
    {
      "trigger": "game.add.graphics",
      "contents": "game.add.graphics(${1:x},${2:y});"
    },
    {
      "trigger": "game.add.tween",
      "contents": "game.add.tween(${1:object});"
    },
    {
      "trigger": "game.load.image",
      "contents": "game.load.image(${1:key},${2:url});"
    },
    {
      "trigger": "game.load.audio",
      "contents": "game.load.audio(${1:key},${2:url});"
    },
    {
      "trigger": "game.load.atlas",
      "contents": "game.load.atlas(${1:key},${2:url});"
    },
    {
      "trigger": "game.load.json",
      "contents": "game.load.json(${1:key},${2:url});"
    },
    {
      "trigger": "game.load.text",
      "contents": "game.load.text(${1:key},${2:url});"
    },
    {
      "trigger": "game.stage.backgroudColor",
      "contents": "game.stage.backgroudColor"
    },
    {
      "trigger": "game.state.start",
      "contents": "game.state.start(${1:name});"
    },
    {
      "trigger": "add.button",
      "contents": "add.button(${1:x},${2:y},${3:text},${4:callback});"
    },
    {
      "trigger": "add.text",
      "contents": "add.text(${1:x},${2:y},${3:text},${4:style});"
    },
    {
      "trigger": "add.sprite",
      "contents": "add.sprite(${1:x},${2:y},${3:key});"
    },
    {
      "trigger": "add.graphics",
      "contents": "add.graphics"
    },
    {
      "trigger": "addchild",
      "contents": "addChild(${1:child});"
    },
    {
      "trigger": "addchildat",
      "contents": "addChildAt(${1:child},${2:index});"
    },
    {
      "trigger": "addkey",
      "contents": "addKey(${1:key});"
    },
    {
      "trigger": "addonce",
      "contents": "addOnce(${1:listener},${2:listenerContext});"
    },
    {
      "trigger": "scale.setto",
      "contents": "scale.setTo(${1:x},${2:y});"
    },
    {
      "trigger": "beginfill",
      "contents": "beginFill(${1:color},${2:alpha});"
    },
    {
      "trigger": "drawrect",
      "contents": "drawRect(${1:x},${2:y},${3:width},${4:height});"
    },
    {
      "trigger": "drawcircle",
      "contents": "drawCircle(${1:x},${2:y},${3:radius});"
    },
    {
      "trigger": "parseint",
      "contents": "parseInt(${1:number});"
    },
    {
      "trigger": "settext",
      "contents": "setText(${1:string});"
    },
    {
      "trigger": "removechildren",
      "contents": "removeChildren();"
    },
    {
      "trigger": "getchildindex",
      "contents": "getChildIndex(${1:index});"
    },
    {
      "trigger": "game",
      "contents": "game"
    },
    {
      "trigger": "add",
      "contents": "add"
    },
    {
      "trigger": "button",
      "contents": "button"
    },
    {
      "trigger": "text",
      "contents": "text"
    },
    {
      "trigger": "sprite",
      "contents": "sprite"
    },
    {
      "trigger": "group",
      "contents": "group"
    },
    {
      "trigger": "image",
      "contents": "image"
    },
    {
      "trigger": "audio",
      "contents": "audio"
    },
    {
      "trigger": "world",
      "contents": "world"
    },
    {
      "trigger": "camera",
      "contents": "camera"
    },
    {
      "trigger": "stage",
      "contents": "stage"
    },
    {
      "trigger": "state",
      "contents": "state"
    },
    {
      "trigger": "load",
      "contents": "load"
    },
    {
      "trigger": "scale",
      "contents": "scale"
    },
    {
      "trigger": "make",
      "contents": "make"
    },
    {
      "trigger": "physics",
      "contents": "physics"
    },
    {
      "trigger": "arcade",
      "contents": "arcade"
    },
    {
      "trigger": "input",
      "contents": "input"
    },
    {
      "trigger": "pointer",
      "contents": "pointer"
    },
    {
      "trigger": "keyboard",
      "contents": "keyboard"
    },
    {
      "trigger": "mouse",
      "contents": "mouse"
    },
    {
      "trigger": "tween",
      "contents": "tween"
    },
    {
      "trigger": "width",
      "contents": "width"
    },
    {
      "trigger": "height",
      "contents": "height"
    },
    {
      "trigger": "parent",
      "contents": "parent"
    },
    {
      "trigger": "transparent",
      "contents": "transparent"
    },
    {
      "trigger": "visible",
      "contents": "visible"
    },
    {
      "trigger": "time",
      "contents": "time"
    },
    {
      "trigger": "name",
      "contents": "name"
    },
    {
      "trigger": "font",
      "contents": "font"
    },
    {
      "trigger": "fill",
      "contents": "fill"
    },
    {
      "trigger": "align",
      "contents": "align"
    },
    {
      "trigger": "events",
      "contents": "events"
    },
    {
      "trigger": "cache",
      "contents": "cache"
    },
    {
      "trigger": "anchor",
      "contents": "anchor"
    },
    {
      "trigger": "alpha",
      "contents": "alpha"
    },
    {
      "trigger": "velocity",
      "contents": "velocity"
    },
    {
      "trigger": "oninputdown\tonInputDown",
      "contents": "onInputDown"
    },
    {
      "trigger": "oninputout\tonInputOut",
      "contents": "onInputOut"
    },
    {
      "trigger": "oninputover\tonInputOver",
      "contents": "onInputOver"
    },
    {
      "trigger": "oninputup\tonInputUp",
      "contents": "onInputUp"
    },
    {
      "trigger": "inputEnable",
      "contents": "inputEnable"
    },
    {
      "trigger": "device",
      "contents": "device"
    },
    {
      "trigger": "tweens",
      "contents": "tweens"
    },
    {
      "trigger": "math",
      "contents": "math"
    },
    {
      "trigger": "net",
      "contents": "net"
    },
    {
      "trigger": "onBlur",
      "contents": "onBlur"
    },
    {
      "trigger": "onFocus",
      "contents": "onFocus"
    },
    {
      "trigger": "onPause",
      "contents": "onPause"
    },
    {
      "trigger": "onResume",
      "contents": "onResume"
    },
    {
      "trigger": "particles",
      "contents": "particles"
    },
    {
      "trigger": "raf",
      "contents": "raf"
    },
    {
      "trigger": "rnd",
      "contents": "rnd"
    },
    {
      "trigger": "sound",
      "contents": "sound"
    },
    {
      "trigger": "debug",
      "contents": "debug"
    },
    {
      "trigger": "canvas",
      "contents": "canvas"
    },
    {
      "trigger": "config",
      "contents": "config"
    },
    {
      "trigger": "context",
      "contents": "context"
    },
    {
      "trigger": "isBooted",
      "contents": "isBooted"
    },
    {
      "trigger": "antialias",
      "contents": "antialias"
    },
    {
      "trigger": "enableStep",
      "contents": "enableStep"
    },
    {
      "trigger": "step",
      "contents": "step"
    },
    {
      "trigger": "boot",
      "contents": "boot"
    },
    {
      "trigger": "focusGain",
      "contents": "focusGain(${1:event});"
    },
    {
      "trigger": "focusLoss",
      "contents": "focusLoss(${1:event});"
    },
    {
      "trigger": "gamePaused",
      "contents": "gamePaused"
    },
    {
      "trigger": "paused",
      "contents": "paused${6:adfsd},"
    },
    {
      "trigger": "pendingStep",
      "contents": "pendingStep"
    },
    {
      "trigger": "gameResumed",
      "contents": "gameResumed();(${1:event});"
    },
    {
      "trigger": "parseConfig",
      "contents": "parseConfig();"
    },
    {
      "trigger": "setUpRenderer",
      "contents": "setUpRenderer();"
    },
    {
      "trigger": "showDebugHeader",
      "contents": "showDebugHeader();"
    },
    {
      "trigger": "update",
      "contents": "update(${1:time});"
    },
    {
      "trigger": "destroy",
      "contents": "destroy();"
    },
    {
      "trigger": "physicsConfig",
      "contents": "physicsConfig"
    },
    {
      "trigger": "preserveDrawingBuffer",
      "contents": "preserveDrawingBuffer"
    },
    {
      "trigger": "renderType",
      "contents": "renderType"
    },
    {
      "trigger": "disableStep",
      "contents": "disableStep();"
    },
    {
      "trigger": "stepCount",
      "contents": "stepCount"
    },
    {
      "trigger": "stepping",
      "contents": "stepping"
    },
    {
      "trigger": "renderer",
      "contents": "renderer"
    },
    {
      "trigger": "animation",
      "contents": "animation"
    },
    {
      "trigger": "manager\tanimation",
      "contents": "animationManager"
    },
    {
      "trigger": "parser\tanimation",
      "contents": "animationParser"
    },
    {
      "trigger": "request\tanimation",
      "contents": "requestAnimationFrame"
    },
    {
      "trigger": "animation.oncomplete\toncomplete",
      "contents": "animation.onComplete"
    },
    {
      "trigger": "animation.onloop\tonloop",
      "contents": "animation.onLoop"
    },
    {
      "trigger": "animation.onstart\tonstart",
      "contents": "animation.onStart"
    },
    {
      "trigger": "animation.onupdate\tonupdate",
      "contents": "animation.onUpdate"
    },
    {
      "trigger": "animation.play",
      "contents": "animation.play(${1:frameRate},${2:loop},${3:killOnComplete});"
    },
    {
      "trigger": "animationmanager.currentanim\tcurrentanim",
      "contents": "animationManager.currentAnim"
    },
    {
      "trigger": "animationmanager.currentframe\tcurrentframe",
      "contents": "animationManager.currentFrame"
    },
    {
      "trigger": "animationmanager.framedata\tframedata",
      "contents": "animationManager.frameData"
    },
    {
      "trigger": "animationmanager.game\t",
      "contents": "animationManager.game"
    },
    {
      "trigger": "animationmanager.sprite",
      "contents": "animationManager.sprite"
    },
    {
      "trigger": "animationmanager.add",
      "contents": "animationManager.add(${1:name},${2:frames},${3:frameRate},${4:loop},${5:useNumericIndex});"
    },
    {
      "trigger": "animationmanager.getanimation\tgetanimation",
      "contents": "animationManager.getAnimation(${1:name});"
    },
    {
      "trigger": "animationmanager.play",
      "contents": "animationManager.play(${1:name},${2:frameRate},${3:loop},${4:killOnComplete});"
    },
    {
      "trigger": "animationparser.jsondata\tjsondata",
      "contents": "animationParser.JSONData(${1:game},${2:json},${3:cacheKey});"
    },
    {
      "trigger": "animationparser.jsondatahash\tjsondatahash",
      "contents": "animationParser.JSONDataHash(${1:game},${2:json},${3:cacheKey});"
    },
    {
      "trigger": "animationparser.xmldata\txmldata",
      "contents": "animationParser.XMLData(${1:game},${2:xml},${3:cacheKey});"
    },
    {
      "trigger": "animationparser.spritesheet\tspritesheet",
      "contents": "animationParser.spriteSheet(${1:game},${2:key},${3:frameWidth},${4:frameHeight},${5:frameMax},${6:margin});"
    },
    {
      "trigger": "tilesprite.play",
      "contents": "tileSprite.play(${1:name},${2:frameRate},${3:loop},${4:killOnComplete});"
    },
    {
      "trigger": "tilesprite.animations\tanimations",
      "contents": "tileSprite.animations"
    },
    {
      "trigger": "sprite.play",
      "contents": "sprite.play(${1:name},${2:frameRate},${3:loop},${4:killOnComplete});"
    },
    {
      "trigger": "sprite.animations\tanimations",
      "contents": "sprite.animations"
    },
    {
      "trigger": "rope.play",
      "contents": "rope.play(${1:name},${2:frameRate},${3:loop},${4:killOnComplete});"
    },
    {
      "trigger": "rope.animations\tanimations",
      "contents": "rope.animations"
    },
    {
      "trigger": "requestanimationframe.game",
      "contents": "requestAnimationFrame.game"
    },
    {
      "trigger": "animation.currentframe\tcurrentframe",
      "contents": "animation.currentFrame"
    },
    {
      "trigger": "events.onanimationcomplete\tonanimationcomplete",
      "contents": "events.onAnimationComplete"
    },
    {
      "trigger": "events.onanimationloop\tonanimationloop",
      "contents": "events.onAnimationLoop"
    },
    {
      "trigger": "events.onanimationstart\tonanimationstart",
      "contents": "events.onAnimationStart"
    },
    {
      "trigger": "game.raf\traf",
      "contents": "game.raf"
    },
    {
      "trigger": "particle.play",
      "contents": "particle.play(${1:name},${2:frameRate},${3:loop},${4:killOnComplete});"
    },
    {
      "trigger": "particle.animations\tanimations",
      "contents": "particle.animations"
    },
    {
      "trigger": "image.animations\tanimations",
      "contents": "image.animations"
    },
    {
      "trigger": "sprite.loadtexture\tloadtexture",
      "contents": "sprite.loadTexture(${1:key},${2:frame},${3:stopAnimation});"
    },
    {
      "trigger": "animation.isplaying\tisplaying",
      "contents": "animation.isPlaying"
    },
    {
      "trigger": "animation.killoncomplete\tkilloncomplete",
      "contents": "animation.killOnComplete"
    },
    {
      "trigger": "animation.loop\tloop",
      "contents": "animation.loop"
    },
    {
      "trigger": "rope.updateanimation\tupdateanimation",
      "contents": "rope.updateAnimation"
    },
    {
      "trigger": "requestanimationframe.updatesettimeout();\tupdatesettimeout",
      "contents": "requestAnimationFrame.updateSetTimeout();"
    },
    {
      "trigger": "requestanimationframe.updateraf();\tupdateraf",
      "contents": "requestAnimationFrame.updateRAF();"
    },
    {
      "trigger": "requestanimationframe.stop();\tstop",
      "contents": "requestAnimationFrame.stop();"
    },
    {
      "trigger": "requestanimationframe.start();\tstart",
      "contents": "requestAnimationFrame.start();"
    },
    {
      "trigger": "requestanimationframe.issettimeout();\tissettimeout",
      "contents": "requestAnimationFrame.isSetTimeOut();"
    },
    {
      "trigger": "requestanimationframe.israf();\tisraf",
      "contents": "requestAnimationFrame.isRAF();"
    },
    {
      "trigger": "requestanimationframe.isrunning\tisrunning",
      "contents": "requestAnimationFrame.isRunning"
    },
    {
      "trigger": "requestanimationframe.forcesettimeout\tforcesettimeout",
      "contents": "requestAnimationFrame.forceSetTimeOut"
    },
    {
      "trigger": "animation.loopcount\tloopcount",
      "contents": "animation.loopCount"
    },
    {
      "trigger": "animation.name",
      "contents": "animation.name"
    },
    {
      "trigger": "animation.paused\tpaused",
      "contents": "animation.paused"
    },
    {
      "trigger": "animation.speed\tspeed",
      "contents": "animation.speed"
    },
    {
      "trigger": "animation.complete();\tcomplete",
      "contents": "animation.complete();"
    },
    {
      "trigger": "animation.destroy();\tdestroy",
      "contents": "animation.destroy();"
    },
    {
      "trigger": "animation.generateframenames\tgenerateframenames",
      "contents": "animation.generateFrameNames(${1:prefix},${2:start},${3:stop},${4:suffix},${5:zeroPad});"
    },
    {
      "trigger": "animation.next\tnext",
      "contents": "animation.next(${1:quantity});"
    },
    {
      "trigger": "animation.onpause();\tonpause",
      "contents": "animation.onPause();"
    },
    {
      "trigger": "animation.onresume();\tonresume",
      "contents": "animation.onResume();"
    },
    {
      "trigger": "animation.previous\tprevious",
      "contents": "animation.previous(${1:quantity});"
    },
    {
      "trigger": "animation.restart();\trestart",
      "contents": "animation.restart();"
    },
    {
      "trigger": "animation.setframe\tsetframe",
      "contents": "animation.setFrame(${1:frameId},${2:useLocalFrameIndex});"
    },
    {
      "trigger": "animation.stop\tstop",
      "contents": "animation.stop(${1:resetFrame},${2:dispatchComplete});"
    },
    {
      "trigger": "animation.update();\tupdate",
      "contents": "animation.update();"
    },
    {
      "trigger": "animation.updateframedata\tupdateframedata",
      "contents": "animation.updateFrameData(${1:frameData});"
    },
    {
      "trigger": "animationmanager.frame\tframe",
      "contents": "animationManager.frame"
    },
    {
      "trigger": "animationmanager.framename\tframename",
      "contents": "animationManager.frameName"
    },
    {
      "trigger": "animationmanager.frametotal\tframetotal",
      "contents": "animationManager.frameTotal"
    },
    {
      "trigger": "animationmanager.isloaded\tisloaded",
      "contents": "animationManager.isLoaded"
    },
    {
      "trigger": "animationmanager.name",
      "contents": "animationManager.name"
    },
    {
      "trigger": "animationmanager.paused\tpaused",
      "contents": "animationManager.paused"
    },
    {
      "trigger": "animationmanager.updateifvisible\tupdateifvisible",
      "contents": "animationManager.updateIfVisible"
    },
    {
      "trigger": "animationmanager.destroy();\tdestroy",
      "contents": "animationManager.destroy();"
    },
    {
      "trigger": "animation.delay\tdelay",
      "contents": "animation.delay"
    },
    {
      "trigger": "animationmanager.next\tnext",
      "contents": "animationManager.next(${1:quantity});"
    },
    {
      "trigger": "animation.enableupdate\tenableupdate",
      "contents": "animation.enableUpdate"
    },
    {
      "trigger": "animation.frame\tframe",
      "contents": "animation.frame"
    },
    {
      "trigger": "animationmanager.previous\tprevious",
      "contents": "animationManager.previous(${1:quantity});"
    },
    {
      "trigger": "animationmanager.refreshframe();\trefreshframe",
      "contents": "animationManager.refreshFrame();"
    },
    {
      "trigger": "animationmanager.stop\tstop",
      "contents": "animationManager.stop(${1:name},${2:resetFrame});"
    },
    {
      "trigger": "animationmanager.validateframes\tvalidateframes",
      "contents": "animationManager.validateFrames(${1:frames},${2:useNumericIndex});"
    },
    {
      "trigger": "animationmanager.update();\tupdate",
      "contents": "animationManager.update();"
    },
    {
      "trigger": "animation.frametotal\tframetotal",
      "contents": "animation.frameTotal"
    },
    {
      "trigger": "animation.isfinished\tisfinished",
      "contents": "animation.isFinished"
    },
    {
      "trigger": "animation.ispaused\tispaused",
      "contents": "animation.isPaused"
    },
    {
      "trigger": "physics.p2\tp2",
      "contents": "physics.p2"
    },
    {
      "trigger": "physics.ninja\tninja",
      "contents": "physics.ninja"
    },
    {
      "trigger": "physics.arcade\tarcade",
      "contents": "physics.arcade"
    },
    {
      "trigger": "p2.game\tgame",
      "contents": "p2.game"
    },
    {
      "trigger": "p2.spring.game\tspring",
      "contents": "p2.spring.game"
    },
    {
      "trigger": "p2.rotationalspring.game\trotationalspring",
      "contents": "p2.rotationalSpring.game"
    },
    {
      "trigger": "p2.revoluteconstraint.game\trevoluteconstraint",
      "contents": "p2.revoluteConstraint.game"
    },
    {
      "trigger": "p2.prismaticconstraint.game\tprismaticconstraint",
      "contents": "p2.prismaticConstraint.game"
    },
    {
      "trigger": "p2.lockconstraint.game\tlockconstraint",
      "contents": "p2.lockConstraint.game"
    },
    {
      "trigger": "p2.onspringremoved\tonspringremoved",
      "contents": "p2.onSpringRemoved"
    },
    {
      "trigger": "p2.onspringadded\tonspringadded",
      "contents": "p2.onSpringAdded"
    },
    {
      "trigger": "p2.onendcontact\tonendcontact",
      "contents": "p2.onEndContact"
    },
    {
      "trigger": "p2.oncontactmaterialremoved\toncontactmaterialremoved",
      "contents": "p2.onContactMaterialRemoved"
    },
    {
      "trigger": "p2.oncontactmaterialadded\toncontactmaterialadded",
      "contents": "p2.onContactMaterialAdded"
    },
    {
      "trigger": "p2.onconstraintremoved\tonconstraintremoved",
      "contents": "p2.onConstraintRemoved"
    },
    {
      "trigger": "p2.onconstraintadded\tonconstraintadded",
      "contents": "p2.onConstraintAdded"
    },
    {
      "trigger": "p2.onbodyremoved\tonbodyremoved",
      "contents": "p2.onBodyRemoved"
    },
    {
      "trigger": "p2.onbodyadded\tonbodyadded",
      "contents": "p2.onBodyAdded"
    },
    {
      "trigger": "p2.onbegincontact\tonbegincontact",
      "contents": "p2.onBeginContact"
    },
    {
      "trigger": "p2.gearconstraint.game\tgearconstraint",
      "contents": "p2.gearConstraint.game"
    },
    {
      "trigger": "p2.distanceconstraint.game\tdistanceconstraint",
      "contents": "p2.distanceConstraint.game"
    },
    {
      "trigger": "p2.body.sprite",
      "contents": "p2.body.sprite"
    },
    {
      "trigger": "p2.body.onendcontact\tonendcontact",
      "contents": "p2.body.onEndContact"
    },
    {
      "trigger": "p2.body.onbegincontact\tonbegincontact",
      "contents": "p2.body.onBeginContact"
    },
    {
      "trigger": "p2.body.offset\toffset",
      "contents": "p2.body.offset"
    },
    {
      "trigger": "p2.body.gravity\tgravity",
      "contents": "p2.body.gravity"
    },
    {
      "trigger": "p2.body.game\tgame",
      "contents": "p2.body.game"
    },
    {
      "trigger": "ninja.tile.velocity\tvelocity",
      "contents": "ninja.tile.velocity"
    },
    {
      "trigger": "ninja.tile.pos\tpos",
      "contents": "ninja.tile.pos"
    },
    {
      "trigger": "ninja.tile.oldpos\toldpos",
      "contents": "ninja.tile.oldpos"
    },
    {
      "trigger": "ninja.time",
      "contents": "ninja.time"
    },
    {
      "trigger": "ninja.quadtree\tquadtree",
      "contents": "ninja.quadTree"
    },
    {
      "trigger": "ninja.game",
      "contents": "ninja.game"
    },
    {
      "trigger": "ninja.bounds\tbounds",
      "contents": "ninja.bounds"
    },
    {
      "trigger": "ninja.circle.velocity\tvelocity",
      "contents": "ninja.circle.velocity"
    },
    {
      "trigger": "ninja.circle.pos\tpos",
      "contents": "ninja.circle.pos"
    },
    {
      "trigger": "ninja.circle.oldpos\toldpos",
      "contents": "ninja.circle.oldpos"
    },
    {
      "trigger": "ninja.body.velocity\tbody.velocity",
      "contents": "ninja.body.velocity"
    },
    {
      "trigger": "ninja.body.sprite\tbody.sprite",
      "contents": "ninja.body.sprite"
    },
    {
      "trigger": "ninja.body.game\tbody.game",
      "contents": "ninja.body.game"
    },
    {
      "trigger": "ninja.aabb.velocity\taabb.velocity",
      "contents": "ninja.aABB.velocity"
    },
    {
      "trigger": "ninja.aabb.pos\taabb.pos",
      "contents": "ninja.aABB.pos"
    },
    {
      "trigger": "ninja.aabb.oldpos\taabb.oldpos",
      "contents": "ninja.aABB.oldpos"
    },
    {
      "trigger": "arcade.velocityfromrotation\tvelocityfromrotation",
      "contents": "arcade.velocityFromRotation(${1:rotation},${2:speed},${3:point});"
    },
    {
      "trigger": "arcade.velocityfromangle\tvelocityfromangle",
      "contents": "arcade.velocityFromAngle(${1:angle},${2:speed},${3:point});"
    },
    {
      "trigger": "arcade.accelerationfromrotation\taccelerationfromrotation",
      "contents": "arcade.accelerationFromRotation(${1:rotation},${2:speed},${3:point});"
    },
    {
      "trigger": "arcade.quadtree\tquadtree",
      "contents": "arcade.quadTree"
    },
    {
      "trigger": "arcade.gravity\tgravity",
      "contents": "arcade.gravity"
    },
    {
      "trigger": "arcade.game",
      "contents": "arcade.game"
    },
    {
      "trigger": "arcade.bounds\tbounds",
      "contents": "arcade.bounds"
    },
    {
      "trigger": "arcade.body.velocity\tbody.velocity",
      "contents": "arcade.body.velocity"
    },
    {
      "trigger": "arcade.body.tilepadding\tbody.tilepadding",
      "contents": "arcade.body.tilePadding"
    },
    {
      "trigger": "arcade.body.sprite\tbody.sprite",
      "contents": "arcade.body.sprite"
    },
    {
      "trigger": "arcade.body.prev\tbody.prev",
      "contents": "arcade.body.prev"
    },
    {
      "trigger": "arcade.body.position\tbody.position",
      "contents": "arcade.body.position"
    },
    {
      "trigger": "arcade.body.offset\tbody.offset",
      "contents": "arcade.body.offset"
    },
    {
      "trigger": "arcade.body.newvelocity\tbody.newvelocity",
      "contents": "arcade.body.newVelocity"
    },
    {
      "trigger": "arcade.body.maxvelocity\tbody.maxvelocity",
      "contents": "arcade.body.maxVelocity"
    },
    {
      "trigger": "arcade.body.gravity\tbody.gravity",
      "contents": "arcade.body.gravity"
    },
    {
      "trigger": "arcade.body.game\tbody.game",
      "contents": "arcade.body.game"
    },
    {
      "trigger": "arcade.body.drag\tbody.drag",
      "contents": "arcade.body.drag"
    },
    {
      "trigger": "arcade.body.deltamax\tbody.deltamax",
      "contents": "arcade.body.deltaMax"
    },
    {
      "trigger": "arcade.body.center\tbody.center",
      "contents": "arcade.body.center"
    },
    {
      "trigger": "arcade.body.bounce\tbody.bounce",
      "contents": "arcade.body.bounce"
    },
    {
      "trigger": "arcade.body.acceleration\tbody.acceleration",
      "contents": "arcade.body.acceleration"
    },
    {
      "trigger": "loader.physics\tphysics",
      "contents": "loader.physics(${1:key},${2:url},${3:data},${4:format});"
    },
    {
      "trigger": "box2d",
      "contents": "box2d"
    },
    {
      "trigger": "chipmunk",
      "contents": "chipmunk"
    },
    {
      "trigger": "ninja.aabb.system\taabb.system",
      "contents": "ninja.aABB.system"
    },
    {
      "trigger": "ninja.body.system\tbody.system",
      "contents": "ninja.body.system"
    },
    {
      "trigger": "ninja.circle.system\tcircle.system",
      "contents": "ninja.circle.system"
    },
    {
      "trigger": "p2.body.world\tbody.world",
      "contents": "p2.body.world"
    },
    {
      "trigger": "p2.distanceconstraint.world\tdistanceconstraint.world",
      "contents": "p2.distanceConstraint.world"
    },
    {
      "trigger": "p2.gearconstraint.world\tgearconstraint.world",
      "contents": "p2.gearConstraint.world"
    },
    {
      "trigger": "p2.lockconstraint.world\tlockconstraint.world",
      "contents": "p2.lockConstraint.world"
    },
    {
      "trigger": "p2.prismaticconstraint.world\tprismaticconstraint.world",
      "contents": "p2.prismaticConstraint.world"
    },
    {
      "trigger": "p2.revoluteconstraint.world\trevoluteconstraint.world",
      "contents": "p2.revoluteConstraint.world"
    },
    {
      "trigger": "p2.rotationalspring.world\trotationalspring.world",
      "contents": "p2.rotationalSpring.world"
    },
    {
      "trigger": "p2.spring.world\tspring.world",
      "contents": "p2.spring.world"
    },
    {
      "trigger": "ninja.tile.system\ttile.system",
      "contents": "ninja.tile.system"
    },
    {
      "trigger": "ninja.body.aabb\tbody.aabb",
      "contents": "ninja.body.aabb"
    },
    {
      "trigger": "p2.bodydebug.body\tbodydebug.body",
      "contents": "p2.bodyDebug.body"
    },
    {
      "trigger": "p2.contactmaterial.materiala\tcontactmaterial.materiala",
      "contents": "p2.contactMaterial.materialA"
    },
    {
      "trigger": "p2.contactmaterial.materialb\tcontactmaterial.materialb",
      "contents": "p2.contactMaterial.materialB"
    },
    {
      "trigger": "ninja.body.circle\tbody.circle",
      "contents": "ninja.body.circle"
    },
    {
      "trigger": "p2.boundscollisiongroup\tboundscollisiongroup",
      "contents": "p2.boundsCollisionGroup"
    },
    {
      "trigger": "p2.everythingcollisiongroup\teverythingcollisiongroup",
      "contents": "p2.everythingCollisionGroup"
    },
    {
      "trigger": "p2.gravity\tgravity",
      "contents": "p2.gravity"
    },
    {
      "trigger": "p2.nothingcollisiongroup\tnothingcollisiongroup",
      "contents": "p2.nothingCollisionGroup"
    },
    {
      "trigger": "p2.addconstraint\taddconstraint",
      "contents": "p2.addConstraint(${1:constraint});"
    },
    {
      "trigger": "p2.addcontactmaterial\taddcontactmaterial",
      "contents": "p2.addContactMaterial(${1:material});"
    },
    {
      "trigger": "p2.createbody\tcreatebody",
      "contents": "p2.createBody(${1:x},${2:y},${3:mass},${4:addToWorld});"
    },
    {
      "trigger": "p2.createcontactmaterial\tcreatecontactmaterial",
      "contents": "p2.createContactMaterial(${1:materialA},${2:materialB},${3:options});"
    },
    {
      "trigger": "p2.createdistanceconstraint\tcreatedistanceconstraint",
      "contents": "p2.createDistanceConstraint(${1:bodyA},${2:bodyB},${3:distance},${4:localAnchorA},${5:localAnchorB},${6:maxForce});"
    },
    {
      "trigger": "p2.creategearconstraint\tcreategearconstraint",
      "contents": "p2.createGearConstraint(${1:bodyA},${2:bodyB},${3:angle},${4:ratio});"
    },
    {
      "trigger": "p2.createlockconstraint\tcreatelockconstraint",
      "contents": "p2.createLockConstraint(${1:bodyA},${2:bodyB},${3:offset},${4:angle},${5:maxForce});"
    },
    {
      "trigger": "p2.creatematerial\tcreatematerial",
      "contents": "p2.createMaterial(${1:name},${2:body});"
    },
    {
      "trigger": "p2.createprismaticconstraint\tcreateprismaticconstraint",
      "contents": "p2.createPrismaticConstraint(${1:bodyA},${2:bodyB},${3:lockRotation},${4:anchorA},${5:anchorB},${6:axis});"
    },
    {
      "trigger": "p2.createrevoluteconstraint\tcreaterevoluteconstraint",
      "contents": "p2.createRevoluteConstraint(${1:bodyA},${2:pivotA},${3:bodyB},${4:pivotB},${5:maxForce},${6:worldPivot});"
    },
    {
      "trigger": "p2.createrotationalspring\tcreaterotationalspring",
      "contents": "p2.createRotationalSpring(${1:bodyA},${2:bodyB},${3:restAngle},${4:stiffness},${5:damping});"
    },
    {
      "trigger": "p2.createspring\tcreatespring",
      "contents": "p2.createSpring(${1:bodyA},${2:bodyB},${3:restLength},${4:stiffness},${5:damping},${6:worldA});"
    },
    {
      "trigger": "p2.removebody\tremovebody",
      "contents": "p2.removeBody(${1:body});"
    },
    {
      "trigger": "p2.removeconstraint\tremoveconstraint",
      "contents": "p2.removeConstraint(${1:constraint});"
    },
    {
      "trigger": "p2.removecontactmaterial\tremovecontactmaterial",
      "contents": "p2.removeContactMaterial(${1:material});"
    },
    {
      "trigger": "p2.removespring\tremovespring",
      "contents": "p2.removeSpring(${1:spring});"
    },
    {
      "trigger": "ninja.body.tile",
      "contents": "ninja.body.tile"
    },
    {
      "trigger": "particle.body",
      "contents": "particle.body"
    },
    {
      "trigger": "p2.body.debugbody",
      "contents": "p2.body.debugBody"
    },
    {
      "trigger": "p2.body.force",
      "contents": "p2.body.force"
    },
    {
      "trigger": "p2.body.velocity",
      "contents": "p2.body.velocity"
    },
    {
      "trigger": "p2.addspring\taddspring",
      "contents": "p2.addSpring(${1:spring});"
    },
    {
      "trigger": "spritebatch.physicsbodytype\tphysicsbodytype",
      "contents": "spriteBatch.physicsBodyType"
    },
    {
      "trigger": "world.physicsbodytype\tphysicsbodytype",
      "contents": "world.physicsBodyType"
    },
    {
      "trigger": "p2.pointproxy.y\tpointproxy",
      "contents": "p2.pointProxy.y"
    },
    {
      "trigger": "p2.pointproxy.x\tpointproxy",
      "contents": "p2.pointProxy.x"
    },
    {
      "trigger": "p2.pointproxy.my\tpointproxy",
      "contents": "p2.pointProxy.my"
    },
    {
      "trigger": "p2.pointproxy.mx\tpointproxy",
      "contents": "p2.pointProxy.mx"
    },
    {
      "trigger": "p2.material.name\tmaterial",
      "contents": "p2.material.name"
    },
    {
      "trigger": "p2.updateboundscollisiongroup\tupdateboundscollisiongroup",
      "contents": "p2.updateBoundsCollisionGroup(${1:setCollisionGroup});"
    },
    {
      "trigger": "p2.update();\tupdate();",
      "contents": "p2.update();"
    },
    {
      "trigger": "p2.tojson();\ttojson();",
      "contents": "p2.toJSON();"
    },
    {
      "trigger": "p2.setworldmaterial\tsetworldmaterial",
      "contents": "p2.setWorldMaterial(${1:material},${2:left},${3:right},${4:top},${5:bottom});"
    },
    {
      "trigger": "p2.setpostbroadphasecallback\tsetpostbroadphasecallback",
      "contents": "p2.setPostBroadphaseCallback(${1:callback},${2:context});"
    },
    {
      "trigger": "p2.setmaterial\tsetmaterial",
      "contents": "p2.setMaterial(${1:material},${2:bodies});"
    },
    {
      "trigger": "p2.setimpactevents\tsetimpactevents",
      "contents": "p2.setImpactEvents(${1:state});"
    },
    {
      "trigger": "p2.setcollisiongroup\tsetcollisiongroup",
      "contents": "p2.setCollisionGroup(${1:object},${2:group});"
    },
    {
      "trigger": "p2.setboundstoworld\tsetboundstoworld",
      "contents": "p2.setBoundsToWorld(${1:left},${2:right},${3:top},${4:bottom},${5:setCollisionGroup});"
    },
    {
      "trigger": "p2.setbounds\tsetbounds",
      "contents": "p2.setBounds(${1:x},${2:y},${3:width},${4:height},${5:left},${6:right});"
    },
    {
      "trigger": "p2.resume();\tresume();",
      "contents": "p2.resume();"
    },
    {
      "trigger": "p2.removebodynextstep\tremovebodynextstep",
      "contents": "p2.removeBodyNextStep(${1:body});"
    },
    {
      "trigger": "p2.pxmi\tpxmi",
      "contents": "p2.pxmi(${1:v});"
    },
    {
      "trigger": "p2.pxm\tpxm",
      "contents": "p2.pxm(${1:v});"
    },
    {
      "trigger": "p2.preupdate();\tpreupdate();",
      "contents": "p2.preUpdate();"
    },
    {
      "trigger": "p2.pause();\tpause();",
      "contents": "p2.pause();"
    },
    {
      "trigger": "p2.mpxi\tmpxi",
      "contents": "p2.mpxi(${1:v});"
    },
    {
      "trigger": "p2.mpx\tmpx",
      "contents": "p2.mpx(${1:v});"
    },
    {
      "trigger": "p2.hittest\thittest",
      "contents": "p2.hitTest(${1:worldPoint},${2:bodies},${3:precision},${4:filterStatic});"
    },
    {
      "trigger": "p2.getcontactmaterial\tgetcontactmaterial",
      "contents": "p2.getContactMaterial(${1:materialA},${2:materialB});"
    },
    {
      "trigger": "p2.endcontacthandler\tendcontacthandler",
      "contents": "p2.endContactHandler(${1:event});"
    },
    {
      "trigger": "p2.enablebody\tenablebody",
      "contents": "p2.enableBody(${1:object},${2:debug});"
    },
    {
      "trigger": "p2.enable\tenable",
      "contents": "p2.enable(${1:object},${2:debug},${3:children});"
    },
    {
      "trigger": "p2.destroy();\tdestroy();",
      "contents": "p2.destroy();"
    },
    {
      "trigger": "p2.createparticle\tcreateparticle",
      "contents": "p2.createParticle(${1:x},${2:y},${3:mass},${4:addToWorld});"
    },
    {
      "trigger": "p2.createcollisiongroup\tcreatecollisiongroup",
      "contents": "p2.createCollisionGroup(${1:object});"
    },
    {
      "trigger": "p2.converttilemap\tconverttilemap",
      "contents": "p2.convertTilemap(${1:map},${2:layer},${3:addToWorld},${4:optimize});"
    },
    {
      "trigger": "p2.convertcollisionobjects\tconvertcollisionobjects",
      "contents": "p2.convertCollisionObjects(${1:map},${2:layer},${3:addToWorld});"
    },
    {
      "trigger": "p2.cleartilemaplayerbodies\tcleartilemaplayerbodies",
      "contents": "p2.clearTilemapLayerBodies(${1:map},${2:layer});"
    },
    {
      "trigger": "p2.clear();\tclear();",
      "contents": "p2.clear();"
    },
    {
      "trigger": "p2.begincontacthandler\tbegincontacthandler",
      "contents": "p2.beginContactHandler(${1:event});"
    },
    {
      "trigger": "p2.addbody\taddbody",
      "contents": "p2.addBody(${1:body});"
    },
    {
      "trigger": "p2.config\tconfig",
      "contents": "p2.config"
    },
    {
      "trigger": "p2.walls\twalls",
      "contents": "p2.walls"
    },
    {
      "trigger": "p2.useelapsedtime\tuseelapsedtime",
      "contents": "p2.useElapsedTime"
    },
    {
      "trigger": "p2.total\ttotal",
      "contents": "p2.total"
    },
    {
      "trigger": "p2.time",
      "contents": "p2.time"
    },
    {
      "trigger": "p2.solveconstraints\tsolveconstraints",
      "contents": "p2.solveConstraints"
    },
    {
      "trigger": "p2.sleepmode\tsleepmode",
      "contents": "p2.sleepMode"
    },
    {
      "trigger": "p2.restitution\trestitution",
      "contents": "p2.restitution"
    },
    {
      "trigger": "p2.postbroadphasecallback\tpostbroadphasecallback",
      "contents": "p2.postBroadphaseCallback"
    },
    {
      "trigger": "p2.paused\tpaused",
      "contents": "p2.paused"
    },
    {
      "trigger": "p2.friction\tfriction",
      "contents": "p2.friction"
    },
    {
      "trigger": "p2.framerate\tframerate",
      "contents": "p2.frameRate"
    },
    {
      "trigger": "button.anchor\tanchor",
      "contents": "button.anchor"
    },
    {
      "trigger": "singlepad.getbutton\tgetbutton",
      "contents": "singlePad.getButton(${1:buttonCode});"
    },
    {
      "trigger": "button.animations\tanimations",
      "contents": "button.animations"
    },
    {
      "trigger": "button.cameraoffset\tcameraoffset",
      "contents": "button.cameraOffset"
    },
    {
      "trigger": "button.croprect\tcroprect",
      "contents": "button.cropRect"
    },
    {
      "trigger": "button.events\tevents",
      "contents": "button.events"
    },
    {
      "trigger": "button.filterarea\tfilterarea",
      "contents": "button.filterArea"
    },
    {
      "trigger": "button.game\tgame",
      "contents": "button.game"
    },
    {
      "trigger": "button.hitarea\thitarea",
      "contents": "button.hitArea"
    },
    {
      "trigger": "button.input\tinput",
      "contents": "button.input"
    },
    {
      "trigger": "button.key\tkey",
      "contents": "button.key"
    },
    {
      "trigger": "button.ondownsound\tondownsound",
      "contents": "button.onDownSound"
    },
    {
      "trigger": "button.oninputdown\toninputdown",
      "contents": "button.onInputDown"
    },
    {
      "trigger": "button.oninputout\toninputout",
      "contents": "button.onInputOut"
    },
    {
      "trigger": "button.oninputover\toninputover",
      "contents": "button.onInputOver"
    },
    {
      "trigger": "button.oninputup\toninputup",
      "contents": "button.onInputUp"
    },
    {
      "trigger": "button.onoutsound\tonoutsound",
      "contents": "button.onOutSound"
    },
    {
      "trigger": "button.onoversound\tonoversound",
      "contents": "button.onOverSound"
    },
    {
      "trigger": "button.onupsound\tonupsound",
      "contents": "button.onUpSound"
    },
    {
      "trigger": "button.pivot\tpivot",
      "contents": "button.pivot"
    },
    {
      "trigger": "button.position\tposition",
      "contents": "button.position"
    },
    {
      "trigger": "button.scale\tscale",
      "contents": "button.scale"
    },
    {
      "trigger": "button.world\tworld",
      "contents": "button.world"
    },
    {
      "trigger": "button.bringtotop\tbringtotop",
      "contents": "button.bringToTop();"
    },
    {
      "trigger": "button.getbounds\tgetbounds",
      "contents": "button.getBounds(${1:matrix});"
    },
    {
      "trigger": "button.getlocalbounds\tgetlocalbounds",
      "contents": "button.getLocalBounds();"
    },
    {
      "trigger": "button.kill\tkill",
      "contents": "button.kill();"
    },
    {
      "trigger": "button.reset\treset",
      "contents": "button.reset(${1:x},${2:y});"
    },
    {
      "trigger": "button.revive\trevive",
      "contents": "button.revive();"
    },
    {
      "trigger": "button.toglobal\ttoglobal",
      "contents": "button.toGlobal(${1:position});"
    },
    {
      "trigger": "button.tolocal\ttolocal",
      "contents": "button.toLocal(${1:position},${2:[from]});"
    },
    {
      "trigger": "gamepadbutton.pad\tpad",
      "contents": "gamepadButton.pad"
    },
    {
      "trigger": "gamepadbutton.onup\tonup",
      "contents": "gamepadButton.onUp"
    },
    {
      "trigger": "gamepadbutton.onfloat\tonfloat",
      "contents": "gamepadButton.onFloat"
    },
    {
      "trigger": "gamepadbutton.ondown\tondown",
      "contents": "gamepadButton.onDown"
    },
    {
      "trigger": "gamepadbutton.game\tgame",
      "contents": "gamepadButton.game"
    },
    {
      "trigger": "gameobjectfactory.button\tbutton",
      "contents": "gameObjectFactory.button(${1:x},${2:y},${3:key},${4:callback},${5:callbackContext},${6:overFrame});"
    },
    {
      "trigger": "gameobjectcreator.button\tbutton",
      "contents": "gameObjectCreator.button(${1:x},${2:y},${3:key},${4:callback},${5:callbackContext},${6:overFrame});"
    },
    {
      "trigger": "stage.buttonmode\tbuttonmode",
      "contents": "stage.buttonMode"
    },
    {
      "trigger": "bitmaptext.buttonmode\tbuttonmode",
      "contents": "bitmapText.buttonMode"
    },
    {
      "trigger": "spritebatch.buttonmode\tbuttonmode",
      "contents": "spriteBatch.buttonMode"
    },
    {
      "trigger": "button.alive\talive",
      "contents": "button.alive"
    },
    {
      "trigger": "button.alpha\talpha",
      "contents": "button.alpha"
    },
    {
      "trigger": "button.angle\tangle",
      "contents": "button.angle"
    },
    {
      "trigger": "sprite.buttonmode\tbuttonmode",
      "contents": "sprite.buttonMode"
    },
    {
      "trigger": "singlepad.processbuttonup\tprocessbuttonup",
      "contents": "singlePad.processButtonUp(${1:buttonCode},${2:value});"
    },
    {
      "trigger": "singlepad.processbuttonfloat\tprocessbuttonfloat",
      "contents": "singlePad.processButtonFloat(${1:buttonCode},${2:value});"
    },
    {
      "trigger": "singlepad.processbuttondown\tprocessbuttondown",
      "contents": "singlePad.processButtonDown(${1:buttonCode},${2:value});"
    },
    {
      "trigger": "singlepad.justreleased\tjustreleased",
      "contents": "singlePad.justReleased(${1:buttonCode},${2:duration});"
    },
    {
      "trigger": "singlepad.justpressed\tjustpressed",
      "contents": "singlePad.justPressed(${1:buttonCode},${2:duration});"
    },
    {
      "trigger": "singlepad.isup\tisup",
      "contents": "singlePad.isUp(${1:buttonCode});"
    },
    {
      "trigger": "singlepad.isdown\tisdown",
      "contents": "singlePad.isDown(${1:buttonCode});"
    },
    {
      "trigger": "world.buttonmode\tbuttonmode",
      "contents": "world.buttonMode"
    },
    {
      "trigger": "singlepad.buttonvalue\tbuttonvalue",
      "contents": "singlePad.buttonValue(${1:buttonCode});"
    },
    {
      "trigger": "button.autocull\tautocull",
      "contents": "button.autoCull"
    },
    {
      "trigger": "button.blendmode\tblendmode",
      "contents": "button.blendMode"
    },
    {
      "trigger": "button.buttonmode\tbuttonmode",
      "contents": "button.buttonMode"
    },
    {
      "trigger": "button.cacheasbitmap\tcacheasbitmap",
      "contents": "button.cacheAsBitmap"
    },
    {
      "trigger": "button.debug\tdebug",
      "contents": "button.debug"
    },
    {
      "trigger": "button.defaultcursor\tdefaultcursor",
      "contents": "button.defaultCursor"
    },
    {
      "trigger": "button.deltax\tdeltax",
      "contents": "button.deltaX"
    },
    {
      "trigger": "button.deltay\tdeltay",
      "contents": "button.deltaY"
    },
    {
      "trigger": "button.deltaz\tdeltaz",
      "contents": "button.deltaZ"
    },
    {
      "trigger": "rope.buttonmode\tbuttonmode",
      "contents": "rope.buttonMode"
    },
    {
      "trigger": "button.destroyphase\tdestroyphase",
      "contents": "button.destroyPhase"
    },
    {
      "trigger": "button.exists\texists",
      "contents": "button.exists"
    },
    {
      "trigger": "button.filters\tfilters",
      "contents": "button.filters"
    },
    {
      "trigger": "button.fixedtocamera\tfixedtocamera",
      "contents": "button.fixedToCamera"
    },
    {
      "trigger": "button.forceout\tforceout",
      "contents": "button.forceOut"
    },
    {
      "trigger": "button.frame\tframe",
      "contents": "button.frame"
    },
    {
      "trigger": "button.framename\tframename",
      "contents": "button.frameName"
    },
    {
      "trigger": "button.freezeframes\tfreezeframes",
      "contents": "button.freezeFrames"
    },
    {
      "trigger": "pointer.button\tbutton",
      "contents": "pointer.button"
    },
    {
      "trigger": "button.height\theight",
      "contents": "button.height"
    },
    {
      "trigger": "button.incamera\tincamera",
      "contents": "button.inCamera"
    },
    {
      "trigger": "button.inworld\tinworld",
      "contents": "button.inWorld"
    },
    {
      "trigger": "button.inputenabled\tinputenabled",
      "contents": "button.inputEnabled"
    },
    {
      "trigger": "button.interactive\tinteractive",
      "contents": "button.interactive"
    },
    {
      "trigger": "button.name\tname",
      "contents": "button.name"
    },
    {
      "trigger": "button.ondownsoundmarker\tondownsoundmarker",
      "contents": "button.onDownSoundMarker"
    },
    {
      "trigger": "physics.p2.bodydebug.buttonmode\tp2.bodydebug.buttonmode",
      "contents": "physics.P2.BodyDebug.buttonMode"
    },
    {
      "trigger": "button.onoutsoundmarker\tonoutsoundmarker",
      "contents": "button.onOutSoundMarker"
    },
    {
      "trigger": "button.onovermouseonly\tonovermouseonly",
      "contents": "button.onOverMouseOnly"
    },
    {
      "trigger": "button.onoversoundmarker\tonoversoundmarker",
      "contents": "button.onOverSoundMarker"
    },
    {
      "trigger": "button.onupsoundmarker\tonupsoundmarker",
      "contents": "button.onUpSoundMarker"
    },
    {
      "trigger": "button.renderorderid\trenderorderid",
      "contents": "button.renderOrderID"
    },
    {
      "trigger": "button.renderable\trenderable",
      "contents": "button.renderable"
    },
    {
      "trigger": "button.rotation\trotation",
      "contents": "button.rotation"
    },
    {
      "trigger": "button.smoothed\tsmoothed",
      "contents": "button.smoothed"
    },
    {
      "trigger": "button.tint\ttint",
      "contents": "button.tint"
    },
    {
      "trigger": "tilesprite.buttonmode\tbuttonmode",
      "contents": "tileSprite.buttonMode"
    },
    {
      "trigger": "button.type\ttype",
      "contents": "button.type"
    },
    {
      "trigger": "button.visible\tvisible",
      "contents": "button.visible"
    },
    {
      "trigger": "particles.arcade.emitter.buttonmode\tarcade.emitter.buttonmode",
      "contents": "particles.Arcade.Emitter.buttonMode"
    },
    {
      "trigger": "button.width\twidth",
      "contents": "button.width"
    },
    {
      "trigger": "button.worldalpha\tworldalpha",
      "contents": "button.worldAlpha"
    },
    {
      "trigger": "button.worldvisible\tworldvisible",
      "contents": "button.worldVisible"
    },
    {
      "trigger": "button.x\tx",
      "contents": "button.x"
    },
    {
      "trigger": "button.y\ty",
      "contents": "button.y"
    },
    {
      "trigger": "button.z\tz",
      "contents": "button.z"
    },
    {
      "trigger": "button.clearframes\tclearframes",
      "contents": "button.clearFrames();"
    },
    {
      "trigger": "button.click\tclick",
      "contents": "button.click(${1:interactionData});"
    },
    {
      "trigger": "button.crop\tcrop",
      "contents": "button.crop(${1:rect},${2:copy});"
    },
    {
      "trigger": "button.destroy\tdestroy",
      "contents": "button.destroy(${1:destroyChildren});"
    },
    {
      "trigger": "button.getchildindex\tgetchildindex",
      "contents": "button.getChildIndex(${1:child});"
    },
    {
      "trigger": "particle.buttonmode\tbuttonmode",
      "contents": "particle.buttonMode"
    },
    {
      "trigger": "mouse.right_button\tright_button",
      "contents": "mouse.RIGHT_BUTTON"
    },
    {
      "trigger": "mouse.no_button\tno_button",
      "contents": "mouse.NO_BUTTON"
    },
    {
      "trigger": "mouse.middle_button\tmiddle_button",
      "contents": "mouse.MIDDLE_BUTTON"
    },
    {
      "trigger": "mouse.left_button\tleft_button",
      "contents": "mouse.LEFT_BUTTON"
    },
    {
      "trigger": "mouse.button-\tbutton-",
      "contents": "mouse.button-"
    },
    {
      "trigger": "button.loadtexture\tloadtexture",
      "contents": "button.loadTexture(${1:key},${2:frame});"
    },
    {
      "trigger": "button.mousedown\tmousedown",
      "contents": "button.mousedown(${1:interactionData});"
    },
    {
      "trigger": "button.mouseout\tmouseout",
      "contents": "button.mouseout(${1:interactionData});"
    },
    {
      "trigger": "button.mouseover\tmouseover",
      "contents": "button.mouseover(${1:interactionData});"
    },
    {
      "trigger": "button.mouseup\tmouseup",
      "contents": "button.mouseup(${1:interactionData});"
    },
    {
      "trigger": "button.mouseupoutside\tmouseupoutside",
      "contents": "button.mouseupoutside(${1:interactionData});"
    },
    {
      "trigger": "button.postupdate\tpostupdate",
      "contents": "button.postUpdate();"
    },
    {
      "trigger": "button.preupdate\tpreupdate",
      "contents": "button.preUpdate();"
    },
    {
      "trigger": "button.removechildren\tremovechildren",
      "contents": "button.removeChildren(${1:beginIndex},${2:endIndex});"
    },
    {
      "trigger": "button.removestagereference\tremovestagereference",
      "contents": "button.removeStageReference();"
    },
    {
      "trigger": "button.resetframe\tresetframe",
      "contents": "button.resetFrame();"
    },
    {
      "trigger": "button.rightclick\trightclick",
      "contents": "button.rightclick(${1:interactionData});"
    },
    {
      "trigger": "image.buttonmode\tbuttonmode",
      "contents": "image.buttonMode"
    },
    {
      "trigger": "button.rightdown\trightdown",
      "contents": "button.rightdown(${1:interactionData});"
    },
    {
      "trigger": "button.rightup\trightup",
      "contents": "button.rightup(${1:interactionData});"
    },
    {
      "trigger": "button.rightupoutside\trightupoutside",
      "contents": "button.rightupoutside(${1:interactionData});"
    },
    {
      "trigger": "button.setchildindex\tsetchildindex",
      "contents": "button.setChildIndex(${1:child},${2:index});"
    },
    {
      "trigger": "button.setdownsound\tsetdownsound",
      "contents": "button.setDownSound(${1:sound},${2:marker});"
    },
    {
      "trigger": "button.setframe\tsetframe",
      "contents": "button.setFrame(${1:frame});"
    },
    {
      "trigger": "button.setframes\tsetframes",
      "contents": "button.setFrames(${1:overFrame},${2:outFrame},${3:downFrame},${4:upFrame});"
    },
    {
      "trigger": "button.setoutsound\tsetoutsound",
      "contents": "button.setOutSound(${1:sound},${2:marker});"
    },
    {
      "trigger": "button.setoversound\tsetoversound",
      "contents": "button.setOverSound(${1:sound},${2:marker});"
    },
    {
      "trigger": "group.buttonmode\tbuttonmode",
      "contents": "group.buttonMode"
    },
    {
      "trigger": "button.setsounds\tsetsounds",
      "contents": "button.setSounds(${1:overSound},${2:overMarker},${3:downSound},${4:downMarker},${5:outSound},${6:outMarker});"
    },
    {
      "trigger": "button.setstagereference\tsetstagereference",
      "contents": "button.setStageReference(${1:stage});"
    },
    {
      "trigger": "button.settexture\tsettexture",
      "contents": "button.setTexture(${1:texture});"
    },
    {
      "trigger": "button.setupsound\tsetupsound",
      "contents": "button.setUpSound(${1:sound},${2:marker});"
    },
    {
      "trigger": "button.swapchildren\tswapchildren",
      "contents": "button.swapChildren(${1:child},${2:child2});"
    },
    {
      "trigger": "button.tap\ttap",
      "contents": "button.tap(${1:interactionData});"
    },
    {
      "trigger": "button.touchend\ttouchend",
      "contents": "button.touchend(${1:interactionData});"
    },
    {
      "trigger": "button.touchendoutside\ttouchendoutside",
      "contents": "button.touchendoutside(${1:interactionData});"
    },
    {
      "trigger": "button.touchstart\ttouchstart",
      "contents": "button.touchstart(${1:interactionData});"
    },
    {
      "trigger": "button.update\tupdate",
      "contents": "button.update();"
    },
    {
      "trigger": "button.updatecache\tupdatecache",
      "contents": "button.updateCache();"
    },
    {
      "trigger": "button.updatecrop\tupdatecrop",
      "contents": "button.updateCrop();"
    },
    {
      "trigger": "button.oninputdownhandler\toninputdownhandler",
      "contents": "button.onInputDownHandler(${1:sprite},${2:pointer});"
    },
    {
      "trigger": "button.oninputouthandler\toninputouthandler",
      "contents": "button.onInputOutHandler(${1:sprite},${2:pointer});"
    },
    {
      "trigger": "button.oninputoverhandler\toninputoverhandler",
      "contents": "button.onInputOverHandler(${1:sprite},${2:pointer});"
    },
    {
      "trigger": "button.oninputuphandler\toninputuphandler",
      "contents": "button.onInputUpHandler(${1:sprite},${2:pointer});"
    },
    {
      "trigger": "button.setstate\tsetstate",
      "contents": "button.setState(${1:newState});"
    },
    {
      "trigger": "graphics.buttonmode\tbuttonmode",
      "contents": "graphics.buttonMode"
    },
    {
      "trigger": "gamepadbutton.processbuttonup\tprocessbuttonup",
      "contents": "gamepadButton.processButtonUp(${1:value});"
    },
    {
      "trigger": "gamepadbutton.processbuttonfloat\tprocessbuttonfloat",
      "contents": "gamepadButton.processButtonFloat(${1:value});"
    },
    {
      "trigger": "gamepadbutton.processbuttondown\tprocessbuttondown",
      "contents": "gamepadButton.processButtonDown(${1:value});"
    },
    {
      "trigger": "gamepadbutton.reset\treset",
      "contents": "gamepadButton.reset();"
    },
    {
      "trigger": "gamepadbutton.justpressed\tjustpressed",
      "contents": "gamepadButton.justPressed(${1:duration});"
    },
    {
      "trigger": "gamepadbutton.destroy\tdestroy",
      "contents": "gamepadButton.destroy();"
    },
    {
      "trigger": "gamepadbutton.value\tvalue",
      "contents": "gamepadButton.value"
    },
    {
      "trigger": "gamepadbutton.timeup\ttimeup",
      "contents": "gamepadButton.timeUp"
    },
    {
      "trigger": "gamepadbutton.timedown\ttimedown",
      "contents": "gamepadButton.timeDown"
    },
    {
      "trigger": "gamepadbutton.repeats\trepeats",
      "contents": "gamepadButton.repeats"
    },
    {
      "trigger": "gamepadbutton.isup\tisup",
      "contents": "gamepadButton.isUp"
    },
    {
      "trigger": "gamepadbutton.isdown\tisdown",
      "contents": "gamepadButton.isDown"
    },
    {
      "trigger": "gamepadbutton.duration\tduration",
      "contents": "gamepadButton.duration"
    },
    {
      "trigger": "gamepadbutton.buttoncode\tbuttoncode",
      "contents": "gamepadButton.buttonCode"
    },
    {
      "trigger": "gamepad.justpressed\tjustpressed",
      "contents": "gamepad.justPressed(${1:buttonCode},${2:duration});"
    },
    {
      "trigger": "gamepad.isdown\tisdown",
      "contents": "gamepad.isDown(${1:buttonCode});"
    },
    {
      "trigger": "flexlayer.buttonmode\tbuttonmode",
      "contents": "flexLayer.buttonMode"
    },
    {
      "trigger": "text.buttonmode\tbuttonmode",
      "contents": "text.buttonMode"
    },
    {
      "trigger": "button.removechildat\tremovechildat",
      "contents": "button.removeChildAt(${1:index});"
    },
    {
      "trigger": "button.removechild\tremovechild",
      "contents": "button.removeChild(${1:child});"
    },
    {
      "trigger": "button.getchildat\tgetchildat",
      "contents": "button.getChildAt(${1:index});"
    },
    {
      "trigger": "button.generatetexture\tgeneratetexture",
      "contents": "button.generateTexture(${1:resolution},${2:scaleMode},${3:renderer});"
    },
    {
      "trigger": "button.fromimage\tfromimage",
      "contents": "button.fromImage(${1:imageId});"
    },
    {
      "trigger": "button.fromframe\tfromframe",
      "contents": "button.fromFrame(${1:frameId});"
    },
    {
      "trigger": "button.addchildat\taddchildat",
      "contents": "button.addChildAt(${1:child},${2:index});"
    },
    {
      "trigger": "button.addchild\taddchild",
      "contents": "button.addChild(${1:child});"
    },
    {
      "trigger": "button.texture\ttexture",
      "contents": "button.texture"
    },
    {
      "trigger": "button.stage\tstage",
      "contents": "button.stage"
    },
    {
      "trigger": "button.shader\tshader",
      "contents": "button.shader"
    },
    {
      "trigger": "button.parent\tparent",
      "contents": "button.parent"
    },
    {
      "trigger": "button.mask\tmask",
      "contents": "button.mask"
    },
    {
      "trigger": "button.children\tchildren",
      "contents": "button.children"
    },
    {
      "trigger": "cache.getbitmapfont\tgetbitmapfont",
      "contents": "cache.getBitmapFont(${1:key});"
    },
    {
      "trigger": "cache.getframe\tgetframe",
      "contents": "cache.getFrame(${1:key});"
    },
    {
      "trigger": "state.cache\tcache",
      "contents": "state.cache"
    },
    {
      "trigger": "cache.getframebyindex\tgetframebyindex",
      "contents": "cache.getFrameByIndex(${1:key});"
    },
    {
      "trigger": "cache.getframebyname\tgetframebyname",
      "contents": "cache.getFrameByName(${1:key});"
    },
    {
      "trigger": "cache.getframedata\tgetframedata",
      "contents": "cache.getFrameData(${1:key},${2:map});"
    },
    {
      "trigger": "cache.getsound\tgetsound",
      "contents": "cache.getSound(${1:key});"
    },
    {
      "trigger": "cache.gettexture\tgettexture",
      "contents": "cache.getTexture(${1:key});"
    },
    {
      "trigger": "cache.gettextureframe\tgettextureframe",
      "contents": "cache.getTextureFrame(${1:key});"
    },
    {
      "trigger": "cache.game\tgame",
      "contents": "cache.game"
    },
    {
      "trigger": "cache.onsoundunlock\tonsoundunlock",
      "contents": "cache.onSoundUnlock"
    },
    {
      "trigger": "cache.addbitmapdata\taddbitmapdata",
      "contents": "cache.addBitmapData(${1:key},${2:bitmapData},${3:frameData});"
    },
    {
      "trigger": "stage.updatecache\tupdatecache",
      "contents": "stage.updateCache();"
    },
    {
      "trigger": "stage.cacheasbitmap\tcacheasbitmap",
      "contents": "stage.cacheAsBitmap"
    },
    {
      "trigger": "spritebatch.updatecache\tupdatecache",
      "contents": "spriteBatch.updateCache();"
    },
    {
      "trigger": "bitmaptext.cacheasbitmap\tcacheasbitmap",
      "contents": "bitmapText.cacheAsBitmap"
    },
    {
      "trigger": "spritebatch.cacheasbitmap\tcacheasbitmap",
      "contents": "spriteBatch.cacheAsBitmap"
    },
    {
      "trigger": "sprite.updatecache\tupdatecache",
      "contents": "sprite.updateCache();"
    },
    {
      "trigger": "bitmaptext.updatecache\tupdatecache",
      "contents": "bitmapText.updateCache();"
    },
    {
      "trigger": "sprite.cacheasbitmap\tcacheasbitmap",
      "contents": "sprite.cacheAsBitmap"
    },
    {
      "trigger": "world.cacheasbitmap\tcacheasbitmap",
      "contents": "world.cacheAsBitmap"
    },
    {
      "trigger": "rope.updatecache\tupdatecache",
      "contents": "rope.updateCache();"
    },
    {
      "trigger": "rope.cacheasbitmap\tcacheasbitmap",
      "contents": "rope.cacheAsBitmap"
    },
    {
      "trigger": "retrofont.addtexturetocache\taddtexturetocache",
      "contents": "retroFont.addTextureToCache(${1:texture},${2:id});"
    },
    {
      "trigger": "rendertexture.addtexturetocache\taddtexturetocache",
      "contents": "renderTexture.addTextureToCache(${1:texture},${2:id});"
    },
    {
      "trigger": "tilesprite.updatecache\tupdatecache",
      "contents": "tileSprite.updateCache();"
    },
    {
      "trigger": "particles.arcade.emitter.updatecache\temitter.updatecache",
      "contents": "particles.Arcade.Emitter.updateCache();"
    },
    {
      "trigger": "tilesprite.cacheasbitmap\tcacheasbitmap",
      "contents": "tileSprite.cacheAsBitmap"
    },
    {
      "trigger": "particles.arcade.emitter.cacheasbitmap\temitter.cacheasbitmap",
      "contents": "particles.Arcade.Emitter.cacheAsBitmap"
    },
    {
      "trigger": "particle.updatecache\tupdatecache",
      "contents": "particle.updateCache();"
    },
    {
      "trigger": "world.updatecache\tupdatecache",
      "contents": "world.updateCache();"
    },
    {
      "trigger": "particle.cacheasbitmap\tcacheasbitmap",
      "contents": "particle.cacheAsBitmap"
    },
    {
      "trigger": "loaderparser.bitmapfont\tbitmapfont",
      "contents": "loaderParser.bitmapFont(${1:game},${2:xml},${3:cacheKey},${4:xSpacing},${5:ySpacing});"
    },
    {
      "trigger": "image.updatecache\tupdatecache",
      "contents": "image.updateCache();"
    },
    {
      "trigger": "image.cacheasbitmap\tcacheasbitmap",
      "contents": "image.cacheAsBitmap"
    },
    {
      "trigger": "group.updatecache\tupdatecache",
      "contents": "group.updateCache();"
    },
    {
      "trigger": "text.updatecache\tupdatecache",
      "contents": "text.updateCache();"
    },
    {
      "trigger": "group.cacheasbitmap\tcacheasbitmap",
      "contents": "group.cacheAsBitmap"
    },
    {
      "trigger": "graphics.updatecache\tupdatecache",
      "contents": "graphics.updateCache();"
    },
    {
      "trigger": "graphics.destroycachedsprite\tdestroycachedsprite",
      "contents": "graphics.destroyCachedSprite();"
    },
    {
      "trigger": "cache._cachemap\t_cachemap",
      "contents": "cache._cacheMap"
    },
    {
      "trigger": "cache.binary\tbinary",
      "contents": "cache.BINARY"
    },
    {
      "trigger": "cache.bitmapdata\tbitmapdata",
      "contents": "cache.BITMAPDATA"
    },
    {
      "trigger": "graphics.cacheasbitmap\tcacheasbitmap",
      "contents": "graphics.cacheAsBitmap"
    },
    {
      "trigger": "flexlayer.updatecache\tupdatecache",
      "contents": "flexLayer.updateCache();"
    },
    {
      "trigger": "cache.bitmapfont\tbitmapfont",
      "contents": "cache.BITMAPFONT"
    },
    {
      "trigger": "cache.canvas\tcanvas",
      "contents": "cache.CANVAS"
    },
    {
      "trigger": "cache.image\timage",
      "contents": "cache.IMAGE"
    },
    {
      "trigger": "cache.json\tjson",
      "contents": "cache.JSON"
    },
    {
      "trigger": "cache.physics\tphysics",
      "contents": "cache.PHYSICS"
    },
    {
      "trigger": "cache.sound\tsound",
      "contents": "cache.SOUND"
    },
    {
      "trigger": "cache.text\ttext",
      "contents": "cache.TEXT"
    },
    {
      "trigger": "cache.texture\ttexture",
      "contents": "cache.TEXTURE"
    },
    {
      "trigger": "cache.tilemap\ttilemap",
      "contents": "cache.TILEMAP"
    },
    {
      "trigger": "cache.xml\txml",
      "contents": "cache.XML"
    },
    {
      "trigger": "cache.addmissingimage\taddmissingimage",
      "contents": "cache.addMissingImage();"
    },
    {
      "trigger": "cache.adddefaultimage\tadddefaultimage",
      "contents": "cache.addDefaultImage();"
    },
    {
      "trigger": "cache.updatesound\tupdatesound",
      "contents": "cache.updateSound(${1:key});"
    },
    {
      "trigger": "cache.updateframedata\tupdateframedata",
      "contents": "cache.updateFrameData(${1:key},${2:frameData});"
    },
    {
      "trigger": "cache.removexml\tremovexml",
      "contents": "cache.removeXML(${1:key});"
    },
    {
      "trigger": "cache.removetilemap\tremovetilemap",
      "contents": "cache.removeTilemap(${1:key});"
    },
    {
      "trigger": "cache.removetext\tremovetext",
      "contents": "cache.removeText(${1:key});"
    },
    {
      "trigger": "cache.removesound\tremovesound",
      "contents": "cache.removeSound(${1:key});"
    },
    {
      "trigger": "cache.removephysics\tremovephysics",
      "contents": "cache.removePhysics(${1:key});"
    },
    {
      "trigger": "cache.removejson\tremovejson",
      "contents": "cache.removeJSON(${1:key});"
    },
    {
      "trigger": "cache.removeimage\tremoveimage",
      "contents": "cache.removeImage(${1:key},${2:removeFromPixi});"
    },
    {
      "trigger": "cache.removecanvas\tremovecanvas",
      "contents": "cache.removeCanvas(${1:key});"
    },
    {
      "trigger": "cache.removebitmapfont\tremovebitmapfont",
      "contents": "cache.removeBitmapFont(${1:key});"
    },
    {
      "trigger": "cache.removebitmapdata\tremovebitmapdata",
      "contents": "cache.removeBitmapData(${1:key});"
    },
    {
      "trigger": "cache.removebinary\tremovebinary",
      "contents": "cache.removeBinary(${1:key});"
    },
    {
      "trigger": "cache.reloadsoundcomplete\treloadsoundcomplete",
      "contents": "cache.reloadSoundComplete(${1:key});"
    },
    {
      "trigger": "cache.reloadsound\treloadsound",
      "contents": "cache.reloadSound(${1:key});"
    },
    {
      "trigger": "cache.issoundready\tissoundready",
      "contents": "cache.isSoundReady(${1:key});"
    },
    {
      "trigger": "cache.issounddecoded\tissounddecoded",
      "contents": "cache.isSoundDecoded(${1:key});"
    },
    {
      "trigger": "cache.getxml\tgetxml",
      "contents": "cache.getXML(${1:key});"
    },
    {
      "trigger": "cache.geturl\tgeturl",
      "contents": "cache.getUrl(${1:url});"
    },
    {
      "trigger": "cache.gettilemapdata\tgettilemapdata",
      "contents": "cache.getTilemapData(${1:key});"
    },
    {
      "trigger": "cache.gettext\tgettext",
      "contents": "cache.getText(${1:key});"
    },
    {
      "trigger": "cache.getsounddata\tgetsounddata",
      "contents": "cache.getSoundData(${1:key});"
    },
    {
      "trigger": "cache.getphysicsdata\tgetphysicsdata",
      "contents": "cache.getPhysicsData(${1:key},${2:object},${3:fixtureKey});"
    },
    {
      "trigger": "cache.getkeys\tgetkeys",
      "contents": "cache.getKeys(${1:type});"
    },
    {
      "trigger": "cache.getjson\tgetjson",
      "contents": "cache.getJSON(${1:key});"
    },
    {
      "trigger": "cache.getimage\tgetimage",
      "contents": "cache.getImage(${1:key});"
    },
    {
      "trigger": "cache.getframecount\tgetframecount",
      "contents": "cache.getFrameCount(${1:key});"
    },
    {
      "trigger": "cache.getcanvas\tgetcanvas",
      "contents": "cache.getCanvas(${1:key});"
    },
    {
      "trigger": "cache.getbinary\tgetbinary",
      "contents": "cache.getBinary(${1:key});"
    },
    {
      "trigger": "cache.destroy\tdestroy",
      "contents": "cache.destroy();"
    },
    {
      "trigger": "cache.decodedsound\tdecodedsound",
      "contents": "cache.decodedSound(${1:key},${2:data});"
    },
    {
      "trigger": "cache.checkxmlkey\tcheckxmlkey",
      "contents": "cache.checkXMLKey(${1:key});"
    },
    {
      "trigger": "cache.checkurl\tcheckurl",
      "contents": "cache.checkUrl(${1:url});"
    },
    {
      "trigger": "cache.checktilemapkey\tchecktilemapkey",
      "contents": "cache.checkTilemapKey(${1:key});"
    },
    {
      "trigger": "cache.checktexturekey\tchecktexturekey",
      "contents": "cache.checkTextureKey(${1:key});"
    },
    {
      "trigger": "cache.checktextkey\tchecktextkey",
      "contents": "cache.checkTextKey(${1:key});"
    },
    {
      "trigger": "cache.checksoundkey\tchecksoundkey",
      "contents": "cache.checkSoundKey(${1:key});"
    },
    {
      "trigger": "cache.checkphysicskey\tcheckphysicskey",
      "contents": "cache.checkPhysicsKey(${1:key});"
    },
    {
      "trigger": "cache.checkkey\tcheckkey",
      "contents": "cache.checkKey(${1:type},${2:key});"
    },
    {
      "trigger": "cache.checkjsonkey\tcheckjsonkey",
      "contents": "cache.checkJSONKey(${1:key});"
    },
    {
      "trigger": "cache.checkimagekey\tcheckimagekey",
      "contents": "cache.checkImageKey(${1:key});"
    },
    {
      "trigger": "cache.checkcanvaskey\tcheckcanvaskey",
      "contents": "cache.checkCanvasKey(${1:key});"
    },
    {
      "trigger": "cache.checkbitmapfontkey\tcheckbitmapfontkey",
      "contents": "cache.checkBitmapFontKey(${1:key});"
    },
    {
      "trigger": "cache.checkbitmapdatakey\tcheckbitmapdatakey",
      "contents": "cache.checkBitmapDataKey(${1:key});"
    },
    {
      "trigger": "cache.checkbinarykey\tcheckbinarykey",
      "contents": "cache.checkBinaryKey(${1:key});"
    },
    {
      "trigger": "cache.addxml\taddxml",
      "contents": "cache.addXML(${1:key},${2:url},${3:data});"
    },
    {
      "trigger": "cache.addtilemap\taddtilemap",
      "contents": "cache.addTilemap(${1:key},${2:url},${3:JSONData},${4:format});"
    },
    {
      "trigger": "cache.addtextureatlas\taddtextureatlas",
      "contents": "cache.addTextureAtlas(${1:key},${2:url},${3:data},${4:atlasData},${5:format});"
    },
    {
      "trigger": "cache.addtext\taddtext",
      "contents": "cache.addText(${1:key},${2:url},${3:data});"
    },
    {
      "trigger": "cache.addspritesheet\taddspritesheet",
      "contents": "cache.addSpriteSheet(${1:key},${2:url},${3:data},${4:frameWidth},${5:frameHeight},${6:frameMax});"
    },
    {
      "trigger": "cache.addsound\taddsound",
      "contents": "cache.addSound(${1:key},${2:url},${3:data},${4:webAudio},${5:audioTag});"
    },
    {
      "trigger": "cache.addrendertexture\taddrendertexture",
      "contents": "cache.addRenderTexture(${1:key},${2:texture});"
    },
    {
      "trigger": "cache.addjson\taddjson",
      "contents": "cache.addJSON(${1:key},${2:url},${3:data});"
    },
    {
      "trigger": "cache.addimage\taddimage",
      "contents": "cache.addImage(${1:key},${2:url},${3:data});"
    },
    {
      "trigger": "cache.addcanvas\taddcanvas",
      "contents": "cache.addCanvas(${1:key},${2:canvas},${3:context});"
    },
    {
      "trigger": "cache.addbitmapfont\taddbitmapfont",
      "contents": "cache.addBitmapFont(${1:key},${2:url},${3:data},${4:xmlData},${5:xSpacing},${6:ySpacing});"
    },
    {
      "trigger": "cache.addbinary\taddbinary",
      "contents": "cache.addBinary(${1:key},${2:binaryData});"
    },
    {
      "trigger": "game.camera\tcamera",
      "contents": "game.camera"
    },
    {
      "trigger": "bitmaptext.cameraoffset\tcameraoffset",
      "contents": "bitmapText.cameraOffset"
    },
    {
      "trigger": "tilesprite.cameraoffset\tcameraoffset",
      "contents": "tileSprite.cameraOffset"
    },
    {
      "trigger": "tilemaplayer.cameraoffset\tcameraoffset",
      "contents": "tilemapLayer.cameraOffset"
    },
    {
      "trigger": "spritebatch.cameraoffset\tcameraoffset",
      "contents": "spriteBatch.cameraOffset"
    },
    {
      "trigger": "sprite.cameraoffset\tcameraoffset",
      "contents": "sprite.cameraOffset"
    },
    {
      "trigger": "rope.cameraoffset\tcameraoffset",
      "contents": "rope.cameraOffset"
    },
    {
      "trigger": "camera._targetposition\t_targetposition",
      "contents": "camera._targetPosition"
    },
    {
      "trigger": "camera.bounds\tbounds",
      "contents": "camera.bounds"
    },
    {
      "trigger": "camera.deadzone\tdeadzone",
      "contents": "camera.deadzone"
    },
    {
      "trigger": "camera.game\tgame",
      "contents": "camera.game"
    },
    {
      "trigger": "camera.position\tposition",
      "contents": "camera.position"
    },
    {
      "trigger": "camera.scale\tscale",
      "contents": "camera.scale"
    },
    {
      "trigger": "camera.screenview\tscreenview",
      "contents": "camera.screenView"
    },
    {
      "trigger": "camera.target\ttarget",
      "contents": "camera.target"
    },
    {
      "trigger": "camera.view\tview",
      "contents": "camera.view"
    },
    {
      "trigger": "physics.p2.bodydebug.cameraoffset\tp2.bodydebug.cameraoffset",
      "contents": "physics.P2.BodyDebug.cameraOffset"
    },
    {
      "trigger": "particles.arcade.emitter.cameraoffset\tarcade.emitter.cameraoffset",
      "contents": "particles.Arcade.Emitter.cameraOffset"
    },
    {
      "trigger": "image.cameraoffset\tcameraoffset",
      "contents": "image.cameraOffset"
    },
    {
      "trigger": "group.cameraoffset\tcameraoffset",
      "contents": "group.cameraOffset"
    },
    {
      "trigger": "flexlayer.cameraoffset\tcameraoffset",
      "contents": "flexLayer.cameraOffset"
    },
    {
      "trigger": "spritebatch.fixedtocamera\tfixedtocamera",
      "contents": "spriteBatch.fixedToCamera"
    },
    {
      "trigger": "sprite.incamera\tincamera",
      "contents": "sprite.inCamera"
    },
    {
      "trigger": "sprite.fixedtocamera\tfixedtocamera",
      "contents": "sprite.fixedToCamera"
    },
    {
      "trigger": "rope.fixedtocamera\tfixedtocamera",
      "contents": "rope.fixedToCamera"
    },
    {
      "trigger": "bitmaptext.fixedtocamera\tfixedtocamera",
      "contents": "bitmapText.fixedToCamera"
    },
    {
      "trigger": "tilesprite.fixedtocamera\tfixedtocamera",
      "contents": "tileSprite.fixedToCamera"
    },
    {
      "trigger": "particles.arcade.emitter.fixedtocamera\tarcade.emitter.fixedtocamera",
      "contents": "particles.Arcade.Emitter.fixedToCamera"
    },
    {
      "trigger": "particle.incamera\tincamera",
      "contents": "particle.inCamera"
    },
    {
      "trigger": "particle.fixedtocamera\tfixedtocamera",
      "contents": "particle.fixedToCamera"
    },
    {
      "trigger": "tilemaplayer.fixedtocamera\tfixedtocamera",
      "contents": "tilemapLayer.fixedToCamera"
    },
    {
      "trigger": "image.incamera\tincamera",
      "contents": "image.inCamera"
    },
    {
      "trigger": "image.fixedtocamera\tfixedtocamera",
      "contents": "image.fixedToCamera"
    },
    {
      "trigger": "flexlayer.fixedtocamera\tfixedtocamera",
      "contents": "flexLayer.fixedToCamera"
    },
    {
      "trigger": "camera.update\tupdate",
      "contents": "camera.update();"
    },
    {
      "trigger": "camera.unfollow\tunfollow",
      "contents": "camera.unfollow();"
    },
    {
      "trigger": "camera.setsize\tsetsize",
      "contents": "camera.setSize(${1:width},${2:height});"
    },
    {
      "trigger": "camera.setposition\tsetposition",
      "contents": "camera.setPosition(${1:x},${2:y});"
    },
    {
      "trigger": "camera.setboundstoworld\tsetboundstoworld",
      "contents": "camera.setBoundsToWorld();"
    },
    {
      "trigger": "camera.reset\treset",
      "contents": "camera.reset();"
    },
    {
      "trigger": "camera.follow\tfollow",
      "contents": "camera.follow(${1:target},${2:style});"
    },
    {
      "trigger": "camera.focusonxy\tfocusonxy",
      "contents": "camera.focusOnXY(${1:x},${2:y});"
    },
    {
      "trigger": "camera.focuson\tfocuson",
      "contents": "camera.focusOn(${1:displayObject});"
    },
    {
      "trigger": "camera.checkworldbounds\tcheckworldbounds",
      "contents": "camera.checkWorldBounds();"
    },
    {
      "trigger": "camera.follow_topdown_tight\tfollow_topdown_tight",
      "contents": "camera.FOLLOW_TOPDOWN_TIGHT"
    },
    {
      "trigger": "camera.follow_topdown\tfollow_topdown",
      "contents": "camera.FOLLOW_TOPDOWN"
    },
    {
      "trigger": "camera.follow_platformer\tfollow_platformer",
      "contents": "camera.FOLLOW_PLATFORMER"
    },
    {
      "trigger": "camera.follow_lockon\tfollow_lockon",
      "contents": "camera.FOLLOW_LOCKON"
    },
    {
      "trigger": "camera.y\ty",
      "contents": "camera.y"
    },
    {
      "trigger": "camera.x\tx",
      "contents": "camera.x"
    },
    {
      "trigger": "camera.width\twidth",
      "contents": "camera.width"
    },
    {
      "trigger": "camera.visible\tvisible",
      "contents": "camera.visible"
    },
    {
      "trigger": "camera.roundpx\troundpx",
      "contents": "camera.roundPx"
    },
    {
      "trigger": "camera.id\tid",
      "contents": "camera.id"
    },
    {
      "trigger": "camera.height\theight",
      "contents": "camera.height"
    },
    {
      "trigger": "camera.atlimit\tatlimit",
      "contents": "camera.atLimit"
    },
    {
      "trigger": "camera.displayobject\tdisplayobject",
      "contents": "camera.displayObject"
    },
    {
      "trigger": "canvas.getoffset\tgetoffset",
      "contents": "canvas.getOffset(${1:element},${2:point});"
    },
    {
      "trigger": "physics.p2.bodydebug.canvas\tp2.bodydebug.canvas",
      "contents": "physics.P2.BodyDebug.canvas"
    },
    {
      "trigger": "game.canvas\tcanvas",
      "contents": "game.canvas"
    },
    {
      "trigger": "game.context\tcontext",
      "contents": "game.context"
    },
    {
      "trigger": "bitmapdata.canvas\tcanvas",
      "contents": "bitmapData.canvas"
    },
    {
      "trigger": "bitmapdata.context\tcontext",
      "contents": "bitmapData.context"
    },
    {
      "trigger": "bitmapdata.ctx\tctx",
      "contents": "bitmapData.ctx"
    },
    {
      "trigger": "retrofont.getcanvas\tgetcanvas",
      "contents": "retroFont.getCanvas();"
    },
    {
      "trigger": "retrofont.fromcanvas\tfromcanvas",
      "contents": "retroFont.fromCanvas(${1:canvas},${2:scaleMode});"
    },
    {
      "trigger": "utils.debug.context\tdebug.context",
      "contents": "utils.Debug.context"
    },
    {
      "trigger": "utils.debug.canvas\tdebug.canvas",
      "contents": "utils.Debug.canvas"
    },
    {
      "trigger": "rendertexture.getcanvas\tgetcanvas",
      "contents": "renderTexture.getCanvas();"
    },
    {
      "trigger": "rendertexture.fromcanvas\tfromcanvas",
      "contents": "renderTexture.fromCanvas(${1:canvas},${2:scaleMode});"
    },
    {
      "trigger": "tilemaplayer.context\tcontext",
      "contents": "tilemapLayer.context"
    },
    {
      "trigger": "tilemaplayer.canvas\tcanvas",
      "contents": "tilemapLayer.canvas"
    },
    {
      "trigger": "canvas.setuserselect\tsetuserselect",
      "contents": "canvas.setUserSelect(${1:canvas},${2:value});"
    },
    {
      "trigger": "canvas.settransform\tsettransform",
      "contents": "canvas.setTransform(${1:context},${2:translateX},${3:translateY},${4:scaleX},${5:scaleY},${6:skewX});"
    },
    {
      "trigger": "canvas.settouchaction\tsettouchaction",
      "contents": "canvas.setTouchAction(${1:canvas},${2:value});"
    },
    {
      "trigger": "canvas.setsmoothingenabled\tsetsmoothingenabled",
      "contents": "canvas.setSmoothingEnabled(${1:context},${2:value});"
    },
    {
      "trigger": "canvas.setimagerenderingcrisp\tsetimagerenderingcrisp",
      "contents": "canvas.setImageRenderingCrisp(${1:canvas});"
    },
    {
      "trigger": "canvas.setimagerenderingbicubic\tsetimagerenderingbicubic",
      "contents": "canvas.setImageRenderingBicubic(${1:canvas});"
    },
    {
      "trigger": "canvas.setbackgroundcolor\tsetbackgroundcolor",
      "contents": "canvas.setBackgroundColor(${1:canvas},${2:color});"
    },
    {
      "trigger": "canvas.removefromdom\tremovefromdom",
      "contents": "canvas.removeFromDOM(${1:canvas});"
    },
    {
      "trigger": "canvas.getsmoothingenabled\tgetsmoothingenabled",
      "contents": "canvas.getSmoothingEnabled(${1:context});"
    },
    {
      "trigger": "canvas.getaspectratio\tgetaspectratio",
      "contents": "canvas.getAspectRatio(${1:canvas});"
    },
    {
      "trigger": "canvas.create\tcreate",
      "contents": "canvas.create(${1:width},${2:height},${3:id});"
    },
    {
      "trigger": "canvas.addtodom\taddtodom",
      "contents": "canvas.addToDOM(${1:canvas},${2:parent},${3:overflowHidden});"
    },
    {
      "trigger": "game.renderer\trenderer",
      "contents": "game.renderer"
    },
    {
      "trigger": "rendertexture.renderer\trenderer",
      "contents": "renderTexture.renderer"
    },
    {
      "trigger": "retrofont.renderer\trenderer",
      "contents": "retroFont.renderer"
    },
    {
      "trigger": "circle.circumferencepoint\tcircumferencepoint",
      "contents": "circle.circumferencePoint(${1:a},${2:angle},${3:asDegrees},${4:out});"
    },
    {
      "trigger": "circle.clone\tclone",
      "contents": "circle.clone(${1:output});"
    },
    {
      "trigger": "circle.copyfrom\tcopyfrom",
      "contents": "circle.copyFrom(${1:source});"
    },
    {
      "trigger": "circle.getbounds\tgetbounds",
      "contents": "circle.getBounds();"
    },
    {
      "trigger": "circle.offset\toffset",
      "contents": "circle.offset(${1:dx},${2:dy});"
    },
    {
      "trigger": "circle.offsetpoint\toffsetpoint",
      "contents": "circle.offsetPoint(${1:point});"
    },
    {
      "trigger": "circle.setto\tsetto",
      "contents": "circle.setTo(${1:x},${2:y},${3:diameter});"
    },
    {
      "trigger": "circle.tostring\ttostring",
      "contents": "circle.toString();"
    },
    {
      "trigger": "circle.intersectsrectangle\tintersectsrectangle",
      "contents": "circle.intersectsRectangle(${1:c},${2:r});"
    },
    {
      "trigger": "circle.intersects\tintersects",
      "contents": "circle.intersects(${1:a},${2:b});"
    },
    {
      "trigger": "circle.equals\tequals",
      "contents": "circle.equals(${1:a},${2:b});"
    },
    {
      "trigger": "circle.distance\tdistance",
      "contents": "circle.distance(${1:dest},${2:round});"
    },
    {
      "trigger": "circle.copyto\tcopyto",
      "contents": "circle.copyTo(${1:dest});"
    },
    {
      "trigger": "circle.contains\tcontains",
      "contents": "circle.contains(${1:a},${2:x},${3:y});"
    },
    {
      "trigger": "circle.circumference\tcircumference",
      "contents": "circle.circumference();"
    },
    {
      "trigger": "circle.y\ty",
      "contents": "circle.y"
    },
    {
      "trigger": "circle.x\tx",
      "contents": "circle.x"
    },
    {
      "trigger": "circle.top\ttop",
      "contents": "circle.top"
    },
    {
      "trigger": "circle.right\tright",
      "contents": "circle.right"
    },
    {
      "trigger": "circle.radius\tradius",
      "contents": "circle.radius"
    },
    {
      "trigger": "circle.empty\tempty",
      "contents": "circle.empty"
    },
    {
      "trigger": "circle.diameter\tdiameter",
      "contents": "circle.diameter"
    },
    {
      "trigger": "circle.bottom\tbottom",
      "contents": "circle.bottom"
    },
    {
      "trigger": "circle.area\tarea",
      "contents": "circle.area"
    },
    {
      "trigger": "color.webtocolor\twebtocolor",
      "contents": "color.webToColor(${1:web},${2:out});"
    },
    {
      "trigger": "color.updatecolor\tupdatecolor",
      "contents": "color.updateColor(${1:out});"
    },
    {
      "trigger": "color.unpackpixel\tunpackpixel",
      "contents": "color.unpackPixel(${1:rgba},${2:out},${3:hsl},${4:hsv});"
    },
    {
      "trigger": "color.torgba\ttorgba",
      "contents": "color.toRGBA(${1:r},${2:g},${3:b},${4:a});"
    },
    {
      "trigger": "color.packpixel\tpackpixel",
      "contents": "color.packPixel(${1:r},${2:g},${3:b},${4:a});"
    },
    {
      "trigger": "color.interpolatergb\tinterpolatergb",
      "contents": "color.interpolateRGB(${1:r1},${2:g1},${3:b1},${4:r2},${5:g2},${6:b2});"
    },
    {
      "trigger": "color.interpolatecolorwithrgb\tinterpolatecolorwithrgb",
      "contents": "color.interpolateColorWithRGB(${1:color},${2:r},${3:g},${4:b},${5:steps},${6:currentStep});"
    },
    {
      "trigger": "color.interpolatecolor\tinterpolatecolor",
      "contents": "color.interpolateColor(${1:color1},${2:color2},${3:steps},${4:currentStep},${5:alpha});"
    },
    {
      "trigger": "color.huetocolor\thuetocolor",
      "contents": "color.hueToColor(${1:p},${2:q},${3:t});"
    },
    {
      "trigger": "color.hextorgb\thextorgb",
      "contents": "color.hexToRGB(${1:hex});"
    },
    {
      "trigger": "color.hextocolor\thextocolor",
      "contents": "color.hexToColor(${1:hex},${2:out});"
    },
    {
      "trigger": "color.getwebrgb\tgetwebrgb",
      "contents": "color.getWebRGB(${1:color});"
    },
    {
      "trigger": "color.getred\tgetred",
      "contents": "color.getRed(${1:color});"
    },
    {
      "trigger": "color.getrandomcolor\tgetrandomcolor",
      "contents": "color.getRandomColor(${1:min},${2:max},${3:alpha});"
    },
    {
      "trigger": "color.getrgb\tgetrgb",
      "contents": "color.getRGB(${1:color});"
    },
    {
      "trigger": "color.getgreen\tgetgreen",
      "contents": "color.getGreen(${1:color});"
    },
    {
      "trigger": "color.getcolor32\tgetcolor32",
      "contents": "color.getColor32(${1:a},${2:r},${3:g},${4:b});"
    },
    {
      "trigger": "color.getcolor\tgetcolor",
      "contents": "color.getColor(${1:r},${2:g},${3:b});"
    },
    {
      "trigger": "color.getblue\tgetblue",
      "contents": "color.getBlue(${1:color});"
    },
    {
      "trigger": "color.getalphafloat\tgetalphafloat",
      "contents": "color.getAlphaFloat(${1:color});"
    },
    {
      "trigger": "color.getalpha\tgetalpha",
      "contents": "color.getAlpha(${1:color});"
    },
    {
      "trigger": "color.fromrgba\tfromrgba",
      "contents": "color.fromRGBA(${1:rgba},${2:out});"
    },
    {
      "trigger": "color.createcolor\tcreatecolor",
      "contents": "color.createColor(${1:r},${2:g},${3:b},${4:a},${5:h},${6:s});"
    },
    {
      "trigger": "color.componenttohex\tcomponenttohex",
      "contents": "color.componentToHex(${1:color});"
    },
    {
      "trigger": "color.rgbtostring\trgbtostring",
      "contents": "color.RGBtoString(${1:r},${2:g},${3:b},${4:a},${5:prefix});"
    },
    {
      "trigger": "color.rgbtohsv\trgbtohsv",
      "contents": "color.RGBtoHSV(${1:r},${2:g},${3:b},${4:out});"
    },
    {
      "trigger": "color.rgbtohsl\trgbtohsl",
      "contents": "color.RGBtoHSL(${1:r},${2:g},${3:b},${4:out});"
    },
    {
      "trigger": "color.hsvtorgb\thsvtorgb",
      "contents": "color.HSVtoRGB(${1:h},${2:s},${3:v},${4:out});"
    },
    {
      "trigger": "color.hsvcolorwheel\thsvcolorwheel",
      "contents": "color.HSVColorWheel(${1:s},${2:v});"
    },
    {
      "trigger": "color.hsltorgb\thsltorgb",
      "contents": "color.HSLtoRGB(${1:h},${2:s},${3:l},${4:out});"
    },
    {
      "trigger": "color.hslcolorwheel\thslcolorwheel",
      "contents": "color.HSLColorWheel(${1:s},${2:l});"
    },
    {
      "trigger": "game.device\tdevice",
      "contents": "game.device"
    },
    {
      "trigger": "device.game\tgame",
      "contents": "device.game"
    },
    {
      "trigger": "device.isconsoleopen\tisconsoleopen",
      "contents": "device.isConsoleOpen();"
    },
    {
      "trigger": "device.checkfullscreensupport\tcheckfullscreensupport",
      "contents": "device.checkFullScreenSupport();"
    },
    {
      "trigger": "device.canplayaudio\tcanplayaudio",
      "contents": "device.canPlayAudio(${1:type});"
    },
    {
      "trigger": "device.worker\tworker",
      "contents": "device.worker"
    },
    {
      "trigger": "device.windowsphone\twindowsphone",
      "contents": "device.windowsPhone"
    },
    {
      "trigger": "device.windows\twindows",
      "contents": "device.windows"
    },
    {
      "trigger": "device.webm\twebm",
      "contents": "device.webm"
    },
    {
      "trigger": "device.webgl\twebgl",
      "contents": "device.webGL"
    },
    {
      "trigger": "device.webaudio\twebaudio",
      "contents": "device.webAudio"
    },
    {
      "trigger": "device.webapp\twebapp",
      "contents": "device.webApp"
    },
    {
      "trigger": "device.wav\twav",
      "contents": "device.wav"
    },
    {
      "trigger": "device.vibration\tvibration",
      "contents": "device.vibration"
    },
    {
      "trigger": "device.typedarray\ttypedarray",
      "contents": "device.typedArray"
    },
    {
      "trigger": "device.tridentversion\ttridentversion",
      "contents": "device.tridentVersion"
    },
    {
      "trigger": "device.trident\ttrident",
      "contents": "device.trident"
    },
    {
      "trigger": "device.touch\ttouch",
      "contents": "device.touch"
    },
    {
      "trigger": "device.support32bit\tsupport32bit",
      "contents": "device.support32bit"
    },
    {
      "trigger": "device.silk\tsilk",
      "contents": "device.silk"
    },
    {
      "trigger": "device.safari\tsafari",
      "contents": "device.safari"
    },
    {
      "trigger": "device.requestfullscreen\trequestfullscreen",
      "contents": "device.requestFullscreen"
    },
    {
      "trigger": "device.quirksmode\tquirksmode",
      "contents": "device.quirksMode"
    },
    {
      "trigger": "device.pointerlock\tpointerlock",
      "contents": "device.pointerLock"
    },
    {
      "trigger": "device.pixelratio\tpixelratio",
      "contents": "device.pixelRatio"
    },
    {
      "trigger": "device.opus\topus",
      "contents": "device.opus"
    },
    {
      "trigger": "device.opera\topera",
      "contents": "device.opera"
    },
    {
      "trigger": "device.ogg\togg",
      "contents": "device.ogg"
    },
    {
      "trigger": "device.nodewebkit\tnodewebkit",
      "contents": "device.nodeWebkit"
    },
    {
      "trigger": "device.node\tnode",
      "contents": "device.node"
    },
    {
      "trigger": "device.mspointer\tmspointer",
      "contents": "device.mspointer"
    },
    {
      "trigger": "device.mp3\tmp3",
      "contents": "device.mp3"
    },
    {
      "trigger": "device.mobilesafari\tmobilesafari",
      "contents": "device.mobileSafari"
    },
    {
      "trigger": "device.midori\tmidori",
      "contents": "device.midori"
    },
    {
      "trigger": "device.macos\tmacos",
      "contents": "device.macOS"
    },
    {
      "trigger": "device.m4a\tm4a",
      "contents": "device.m4a"
    },
    {
      "trigger": "device.localstorage\tlocalstorage",
      "contents": "device.localStorage"
    },
    {
      "trigger": "device.littleendian\tlittleendian",
      "contents": "device.littleEndian"
    },
    {
      "trigger": "device.linux\tlinux",
      "contents": "device.linux"
    },
    {
      "trigger": "device.ieversion\tieversion",
      "contents": "device.ieVersion"
    },
    {
      "trigger": "device.ie\tie",
      "contents": "device.ie"
    },
    {
      "trigger": "device.iphone4\tiphone4",
      "contents": "device.iPhone4"
    },
    {
      "trigger": "device.iphone\tiphone",
      "contents": "device.iPhone"
    },
    {
      "trigger": "device.ipad\tipad",
      "contents": "device.iPad"
    },
    {
      "trigger": "device.ios\tios",
      "contents": "device.iOS"
    },
    {
      "trigger": "device.getusermedia\tgetusermedia",
      "contents": "device.getUserMedia"
    },
    {
      "trigger": "device.fullscreenkeyboard\tfullscreenkeyboard",
      "contents": "device.fullscreenKeyboard"
    },
    {
      "trigger": "device.fullscreen\tfullscreen",
      "contents": "device.fullscreen"
    },
    {
      "trigger": "device.firefox\tfirefox",
      "contents": "device.firefox"
    },
    {
      "trigger": "device.filesystem\tfilesystem",
      "contents": "device.fileSystem"
    },
    {
      "trigger": "device.file\tfile",
      "contents": "device.file"
    },
    {
      "trigger": "device.epiphany\tepiphany",
      "contents": "device.epiphany"
    },
    {
      "trigger": "device.ejecta\tejecta",
      "contents": "device.ejecta"
    },
    {
      "trigger": "device.desktop\tdesktop",
      "contents": "device.desktop"
    },
    {
      "trigger": "device.css3d\tcss3d",
      "contents": "device.css3D"
    },
    {
      "trigger": "device.crosswalk\tcrosswalk",
      "contents": "device.crosswalk"
    },
    {
      "trigger": "device.cordova\tcordova",
      "contents": "device.cordova"
    },
    {
      "trigger": "device.cocoonjsapp\tcocoonjsapp",
      "contents": "device.cocoonJSApp"
    },
    {
      "trigger": "device.cocoonjs\tcocoonjs",
      "contents": "device.cocoonJS"
    },
    {
      "trigger": "device.chromeos\tchromeos",
      "contents": "device.chromeOS"
    },
    {
      "trigger": "device.chrome\tchrome",
      "contents": "device.chrome"
    },
    {
      "trigger": "device.canvas\tcanvas",
      "contents": "device.canvas"
    },
    {
      "trigger": "device.cancelfullscreen\tcancelfullscreen",
      "contents": "device.cancelFullscreen"
    },
    {
      "trigger": "device.audiodata\taudiodata",
      "contents": "device.audioData"
    },
    {
      "trigger": "device.arora\tarora",
      "contents": "device.arora"
    },
    {
      "trigger": "device.android\tandroid",
      "contents": "device.android"
    },
    {
      "trigger": "events.onaddedtogroup\tonaddedtogroup",
      "contents": "events.onAddedToGroup"
    },
    {
      "trigger": "events.ondestroy\tondestroy",
      "contents": "events.onDestroy"
    },
    {
      "trigger": "events.ondragstart\tondragstart",
      "contents": "events.onDragStart"
    },
    {
      "trigger": "events.ondragstop\tondragstop",
      "contents": "events.onDragStop"
    },
    {
      "trigger": "events.onenterbounds\tonenterbounds",
      "contents": "events.onEnterBounds"
    },
    {
      "trigger": "events.oninputdown\toninputdown",
      "contents": "events.onInputDown"
    },
    {
      "trigger": "events.oninputout\toninputout",
      "contents": "events.onInputOut"
    },
    {
      "trigger": "events.oninputover\toninputover",
      "contents": "events.onInputOver"
    },
    {
      "trigger": "events.oninputup\toninputup",
      "contents": "events.onInputUp"
    },
    {
      "trigger": "events.onkilled\tonkilled",
      "contents": "events.onKilled"
    },
    {
      "trigger": "events.onoutofbounds\tonoutofbounds",
      "contents": "events.onOutOfBounds"
    },
    {
      "trigger": "events.onremovedfromgroup\tonremovedfromgroup",
      "contents": "events.onRemovedFromGroup"
    },
    {
      "trigger": "events.onrevived\tonrevived",
      "contents": "events.onRevived"
    },
    {
      "trigger": "events.parent\tparent",
      "contents": "events.parent"
    },
    {
      "trigger": "events.destroy\tdestroy",
      "contents": "events.destroy();"
    },
    {
      "trigger": "filter.game\tgame",
      "contents": "filter.game"
    },
    {
      "trigger": "filter.prevpoint\tprevpoint",
      "contents": "filter.prevPoint"
    },
    {
      "trigger": "gameobjectfactory.filter\tfilter",
      "contents": "gameObjectFactory.filter(${1:filter},${2:-});"
    },
    {
      "trigger": "gameobjectcreator.filter\tfilter",
      "contents": "gameObjectCreator.filter(${1:filter},${2:-});"
    },
    {
      "trigger": "filter.update\tupdate",
      "contents": "filter.update(${1:pointer});"
    },
    {
      "trigger": "filter.setresolution\tsetresolution",
      "contents": "filter.setResolution(${1:width},${2:height});"
    },
    {
      "trigger": "filter.init\tinit",
      "contents": "filter.init();"
    },
    {
      "trigger": "filter.destroy\tdestroy",
      "contents": "filter.destroy();"
    },
    {
      "trigger": "filter.width\twidth",
      "contents": "filter.width"
    },
    {
      "trigger": "filter.uniforms\tuniforms",
      "contents": "filter.uniforms"
    },
    {
      "trigger": "filter.type\ttype",
      "contents": "filter.type"
    },
    {
      "trigger": "filter.padding\tpadding",
      "contents": "filter.padding"
    },
    {
      "trigger": "filter.height\theight",
      "contents": "filter.height"
    },
    {
      "trigger": "filter.fragmentsrc\tfragmentsrc",
      "contents": "filter.fragmentSrc"
    },
    {
      "trigger": "filter.dirty\tdirty",
      "contents": "filter.dirty"
    },
    {
      "trigger": "framedata.getframebyname\tgetframebyname",
      "contents": "frameData.getFrameByName(${1:name});"
    },
    {
      "trigger": "framedata.getframe\tgetframe",
      "contents": "frameData.getFrame(${1:index});"
    },
    {
      "trigger": "framedata.clone\tclone",
      "contents": "frameData.clone();"
    },
    {
      "trigger": "framedata.addframe\taddframe",
      "contents": "frameData.addFrame(${1:frame});"
    },
    {
      "trigger": "frame.getrect\tgetrect",
      "contents": "frame.getRect(${1:out});"
    },
    {
      "trigger": "frame.clone\tclone",
      "contents": "frame.clone();"
    },
    {
      "trigger": "framedata.getframes\tgetframes",
      "contents": "frameData.getFrames(${1:frames},${2:useNumericIndex},${3:output});"
    },
    {
      "trigger": "framedata.getframerange\tgetframerange",
      "contents": "frameData.getFrameRange(${1:start},${2:end},${3:output});"
    },
    {
      "trigger": "framedata.getframeindexes\tgetframeindexes",
      "contents": "frameData.getFrameIndexes(${1:frames},${2:useNumericIndex},${3:output});"
    },
    {
      "trigger": "framedata.checkframename\tcheckframename",
      "contents": "frameData.checkFrameName(${1:name});"
    },
    {
      "trigger": "framedata.total\ttotal",
      "contents": "frameData.total"
    },
    {
      "trigger": "frame.settrim\tsettrim",
      "contents": "frame.setTrim(${1:trimmed},${2:actualWidth},${3:actualHeight},${4:destX},${5:destY},${6:destWidth});"
    },
    {
      "trigger": "frame.y\ty",
      "contents": "frame.y"
    },
    {
      "trigger": "frame.x\tx",
      "contents": "frame.x"
    },
    {
      "trigger": "frame.width\twidth",
      "contents": "frame.width"
    },
    {
      "trigger": "frame.uuid\tuuid",
      "contents": "frame.uuid"
    },
    {
      "trigger": "frame.trimmed\ttrimmed",
      "contents": "frame.trimmed"
    },
    {
      "trigger": "frame.spritesourcesizey\tspritesourcesizey",
      "contents": "frame.spriteSourceSizeY"
    },
    {
      "trigger": "frame.spritesourcesizex\tspritesourcesizex",
      "contents": "frame.spriteSourceSizeX"
    },
    {
      "trigger": "frame.spritesourcesizew\tspritesourcesizew",
      "contents": "frame.spriteSourceSizeW"
    },
    {
      "trigger": "frame.spritesourcesizeh\tspritesourcesizeh",
      "contents": "frame.spriteSourceSizeH"
    },
    {
      "trigger": "frame.sourcesizew\tsourcesizew",
      "contents": "frame.sourceSizeW"
    },
    {
      "trigger": "frame.sourcesizeh\tsourcesizeh",
      "contents": "frame.sourceSizeH"
    },
    {
      "trigger": "frame.rotationdirection\trotationdirection",
      "contents": "frame.rotationDirection"
    },
    {
      "trigger": "frame.rotated\trotated",
      "contents": "frame.rotated"
    },
    {
      "trigger": "frame.right\tright",
      "contents": "frame.right"
    },
    {
      "trigger": "frame.name\tname",
      "contents": "frame.name"
    },
    {
      "trigger": "frame.index\tindex",
      "contents": "frame.index"
    },
    {
      "trigger": "frame.height\theight",
      "contents": "frame.height"
    },
    {
      "trigger": "frame.distance\tdistance",
      "contents": "frame.distance"
    },
    {
      "trigger": "frame.centery\tcentery",
      "contents": "frame.centerY"
    },
    {
      "trigger": "frame.centerx\tcenterx",
      "contents": "frame.centerX"
    },
    {
      "trigger": "frame.bottom\tbottom",
      "contents": "frame.bottom"
    },
    {
      "trigger": "graphics.tolocal\ttolocal",
      "contents": "graphics.toLocal(${1:position},${2:[from]});"
    },
    {
      "trigger": "graphics.toglobal\ttoglobal",
      "contents": "graphics.toGlobal(${1:position});"
    },
    {
      "trigger": "graphics.getlocalbounds\tgetlocalbounds",
      "contents": "graphics.getLocalBounds();"
    },
    {
      "trigger": "graphics.getbounds\tgetbounds",
      "contents": "graphics.getBounds();"
    },
    {
      "trigger": "graphics.world\tworld",
      "contents": "graphics.world"
    },
    {
      "trigger": "graphics.scale\tscale",
      "contents": "graphics.scale"
    },
    {
      "trigger": "graphics.position\tposition",
      "contents": "graphics.position"
    },
    {
      "trigger": "graphics.pivot\tpivot",
      "contents": "graphics.pivot"
    },
    {
      "trigger": "graphics.hitarea\thitarea",
      "contents": "graphics.hitArea"
    },
    {
      "trigger": "graphics.game\tgame",
      "contents": "graphics.game"
    },
    {
      "trigger": "graphics.filterarea\tfilterarea",
      "contents": "graphics.filterArea"
    },
    {
      "trigger": "graphics.cameraoffset\tcameraoffset",
      "contents": "graphics.cameraOffset"
    },
    {
      "trigger": "gameobjectfactory.graphics\tgraphics",
      "contents": "gameObjectFactory.graphics(${1:x},${2:y},${3:group});"
    },
    {
      "trigger": "gameobjectcreator.graphics\tgraphics",
      "contents": "gameObjectCreator.graphics(${1:x},${2:y});"
    },
    {
      "trigger": "graphics.updatebounds\tupdatebounds",
      "contents": "graphics.updateBounds();"
    },
    {
      "trigger": "graphics.update\tupdate",
      "contents": "graphics.update();"
    },
    {
      "trigger": "graphics.touchstart\ttouchstart",
      "contents": "graphics.touchstart(${1:interactionData});"
    },
    {
      "trigger": "graphics.touchendoutside\ttouchendoutside",
      "contents": "graphics.touchendoutside(${1:interactionData});"
    },
    {
      "trigger": "graphics.touchend\ttouchend",
      "contents": "graphics.touchend(${1:interactionData});"
    },
    {
      "trigger": "graphics.tap\ttap",
      "contents": "graphics.tap(${1:interactionData});"
    },
    {
      "trigger": "graphics.swapchildren\tswapchildren",
      "contents": "graphics.swapChildren(${1:child},${2:child2});"
    },
    {
      "trigger": "graphics.setstagereference\tsetstagereference",
      "contents": "graphics.setStageReference(${1:stage});"
    },
    {
      "trigger": "graphics.setchildindex\tsetchildindex",
      "contents": "graphics.setChildIndex(${1:child},${2:index});"
    },
    {
      "trigger": "graphics.rightupoutside\trightupoutside",
      "contents": "graphics.rightupoutside(${1:interactionData});"
    },
    {
      "trigger": "graphics.rightup\trightup",
      "contents": "graphics.rightup(${1:interactionData});"
    },
    {
      "trigger": "graphics.rightdown\trightdown",
      "contents": "graphics.rightdown(${1:interactionData});"
    },
    {
      "trigger": "graphics.rightclick\trightclick",
      "contents": "graphics.rightclick(${1:interactionData});"
    },
    {
      "trigger": "graphics.removestagereference\tremovestagereference",
      "contents": "graphics.removeStageReference();"
    },
    {
      "trigger": "graphics.removechildren\tremovechildren",
      "contents": "graphics.removeChildren(${1:beginIndex},${2:endIndex});"
    },
    {
      "trigger": "graphics.preupdate\tpreupdate",
      "contents": "graphics.preUpdate();"
    },
    {
      "trigger": "graphics.postupdate\tpostupdate",
      "contents": "graphics.postUpdate();"
    },
    {
      "trigger": "graphics.mouseupoutside\tmouseupoutside",
      "contents": "graphics.mouseupoutside(${1:interactionData});"
    },
    {
      "trigger": "graphics.mouseup\tmouseup",
      "contents": "graphics.mouseup(${1:interactionData});"
    },
    {
      "trigger": "graphics.mouseover\tmouseover",
      "contents": "graphics.mouseover(${1:interactionData});"
    },
    {
      "trigger": "graphics.mouseout\tmouseout",
      "contents": "graphics.mouseout(${1:interactionData});"
    },
    {
      "trigger": "graphics.mousedown\tmousedown",
      "contents": "graphics.mousedown(${1:interactionData});"
    },
    {
      "trigger": "graphics.getchildindex\tgetchildindex",
      "contents": "graphics.getChildIndex(${1:child});"
    },
    {
      "trigger": "graphics.drawroundedrect\tdrawroundedrect",
      "contents": "graphics.drawRoundedRect(${1:x},${2:y},${3:width},${4:height},${5:radius});"
    },
    {
      "trigger": "graphics.destroy\tdestroy",
      "contents": "graphics.destroy(${1:destroyChildren});"
    },
    {
      "trigger": "graphics.click\tclick",
      "contents": "graphics.click(${1:interactionData});"
    },
    {
      "trigger": "graphics.z\tz",
      "contents": "graphics.z"
    },
    {
      "trigger": "graphics.y\ty",
      "contents": "graphics.y"
    },
    {
      "trigger": "graphics.x\tx",
      "contents": "graphics.x"
    },
    {
      "trigger": "graphics.worldvisible\tworldvisible",
      "contents": "graphics.worldVisible"
    },
    {
      "trigger": "graphics.worldalpha\tworldalpha",
      "contents": "graphics.worldAlpha"
    },
    {
      "trigger": "graphics.width\twidth",
      "contents": "graphics.width"
    },
    {
      "trigger": "graphics.visible\tvisible",
      "contents": "graphics.visible"
    },
    {
      "trigger": "graphics.type\ttype",
      "contents": "graphics.type"
    },
    {
      "trigger": "graphics.tint\ttint",
      "contents": "graphics.tint"
    },
    {
      "trigger": "graphics.rotation\trotation",
      "contents": "graphics.rotation"
    },
    {
      "trigger": "graphics.renderable\trenderable",
      "contents": "graphics.renderable"
    },
    {
      "trigger": "graphics.name\tname",
      "contents": "graphics.name"
    },
    {
      "trigger": "graphics.linewidth\tlinewidth",
      "contents": "graphics.lineWidth"
    },
    {
      "trigger": "graphics.linecolor\tlinecolor",
      "contents": "graphics.lineColor"
    },
    {
      "trigger": "graphics.ismask\tismask",
      "contents": "graphics.isMask"
    },
    {
      "trigger": "graphics.interactive\tinteractive",
      "contents": "graphics.interactive"
    },
    {
      "trigger": "graphics.height\theight",
      "contents": "graphics.height"
    },
    {
      "trigger": "graphics.fixedtocamera\tfixedtocamera",
      "contents": "graphics.fixedToCamera"
    },
    {
      "trigger": "graphics.filters\tfilters",
      "contents": "graphics.filters"
    },
    {
      "trigger": "graphics.fillalpha\tfillalpha",
      "contents": "graphics.fillAlpha"
    },
    {
      "trigger": "graphics.exists\texists",
      "contents": "graphics.exists"
    },
    {
      "trigger": "graphics.destroyphase\tdestroyphase",
      "contents": "graphics.destroyPhase"
    },
    {
      "trigger": "graphics.defaultcursor\tdefaultcursor",
      "contents": "graphics.defaultCursor"
    },
    {
      "trigger": "graphics.boundspadding\tboundspadding",
      "contents": "graphics.boundsPadding"
    },
    {
      "trigger": "graphics.blendmode\tblendmode",
      "contents": "graphics.blendMode"
    },
    {
      "trigger": "graphics.angle\tangle",
      "contents": "graphics.angle"
    },
    {
      "trigger": "graphics.alpha\talpha",
      "contents": "graphics.alpha"
    },
    {
      "trigger": "graphics.children\tchildren",
      "contents": "graphics.children"
    },
    {
      "trigger": "graphics.mask\tmask",
      "contents": "graphics.mask"
    },
    {
      "trigger": "graphics.parent\tparent",
      "contents": "graphics.parent"
    },
    {
      "trigger": "graphics.stage\tstage",
      "contents": "graphics.stage"
    },
    {
      "trigger": "graphics.addchild\taddchild",
      "contents": "graphics.addChild(${1:child});"
    },
    {
      "trigger": "graphics.addchildat\taddchildat",
      "contents": "graphics.addChildAt(${1:child},${2:index});"
    },
    {
      "trigger": "graphics.arc\tarc",
      "contents": "graphics.arc(${1:cx},${2:cy},${3:radius},${4:startAngle},${5:endAngle},${6:anticlockwise});"
    },
    {
      "trigger": "graphics.beginfill\tbeginfill",
      "contents": "graphics.beginFill(${1:color},${2:alpha});"
    },
    {
      "trigger": "graphics.beziercurveto\tbeziercurveto",
      "contents": "graphics.bezierCurveTo(${1:cpX},${2:cpY},${3:cpX2},${4:cpY2},${5:toX},${6:toY});"
    },
    {
      "trigger": "graphics.clear\tclear",
      "contents": "graphics.clear();"
    },
    {
      "trigger": "graphics.drawcircle\tdrawcircle",
      "contents": "graphics.drawCircle(${1:x},${2:y},${3:radius});"
    },
    {
      "trigger": "graphics.drawellipse\tdrawellipse",
      "contents": "graphics.drawEllipse(${1:x},${2:y},${3:width},${4:height});"
    },
    {
      "trigger": "graphics.drawpolygon\tdrawpolygon",
      "contents": "graphics.drawPolygon(${1:path});"
    },
    {
      "trigger": "graphics.drawrect\tdrawrect",
      "contents": "graphics.drawRect(${1:x},${2:y},${3:width},${4:height});"
    },
    {
      "trigger": "graphics.drawshape\tdrawshape",
      "contents": "graphics.drawShape(${1:shape});"
    },
    {
      "trigger": "graphics.endfill\tendfill",
      "contents": "graphics.endFill();"
    },
    {
      "trigger": "graphics.generatetexture\tgeneratetexture",
      "contents": "graphics.generateTexture(${1:resolution},${2:scaleMode});"
    },
    {
      "trigger": "graphics.getchildat\tgetchildat",
      "contents": "graphics.getChildAt(${1:index});"
    },
    {
      "trigger": "graphics.linestyle\tlinestyle",
      "contents": "graphics.lineStyle(${1:lineWidth},${2:color},${3:alpha});"
    },
    {
      "trigger": "graphics.lineto\tlineto",
      "contents": "graphics.lineTo(${1:x},${2:y});"
    },
    {
      "trigger": "graphics.moveto\tmoveto",
      "contents": "graphics.moveTo(${1:x},${2:y});"
    },
    {
      "trigger": "graphics.quadraticcurveto\tquadraticcurveto",
      "contents": "graphics.quadraticCurveTo(${1:cpX},${2:cpY},${3:toX},${4:toY});"
    },
    {
      "trigger": "graphics.removechild\tremovechild",
      "contents": "graphics.removeChild(${1:child});"
    },
    {
      "trigger": "graphics.removechildat\tremovechildat",
      "contents": "graphics.removeChildAt(${1:index});"
    },
    {
      "trigger": "group.createmultiple\tcreatemultiple",
      "contents": "group.createMultiple(${1:quantity},${2:key},${3:frame},${4:exists});"
    },
    {
      "trigger": "group.create\tcreate",
      "contents": "group.create(${1:x},${2:y},${3:key},${4:frame},${5:exists});"
    },
    {
      "trigger": "group.countliving\tcountliving",
      "contents": "group.countLiving();"
    },
    {
      "trigger": "group.countdead\tcountdead",
      "contents": "group.countDead();"
    },
    {
      "trigger": "group.click\tclick",
      "contents": "group.click(${1:interactionData});"
    },
    {
      "trigger": "group.checkproperty\tcheckproperty",
      "contents": "group.checkProperty(${1:child},${2:key},${3:value},${4:force});"
    },
    {
      "trigger": "group.checkall\tcheckall",
      "contents": "group.checkAll(${1:key},${2:value},${3:checkAlive},${4:checkVisible},${5:force});"
    },
    {
      "trigger": "group.callallexists\tcallallexists",
      "contents": "group.callAllExists(${1:callback},${2:existsValue},${3:parameter});"
    },
    {
      "trigger": "group.callall\tcallall",
      "contents": "group.callAll(${1:method},${2:context},${3:parameter});"
    },
    {
      "trigger": "group.bringtotop\tbringtotop",
      "contents": "group.bringToTop(${1:child});"
    },
    {
      "trigger": "group.ascendingsorthandler\tascendingsorthandler",
      "contents": "group.ascendingSortHandler(${1:a},${2:b});"
    },
    {
      "trigger": "group.addmultiple\taddmultiple",
      "contents": "group.addMultiple(${1:children},${2:silent});"
    },
    {
      "trigger": "group.addat\taddat",
      "contents": "group.addAt(${1:child},${2:index},${3:silent});"
    },
    {
      "trigger": "group.addall\taddall",
      "contents": "group.addAll(${1:property},${2:amount},${3:checkAlive},${4:checkVisible});"
    },
    {
      "trigger": "group.add\tadd",
      "contents": "group.add(${1:child},${2:silent});"
    },
    {
      "trigger": "group.sort_descending\tsort_descending",
      "contents": "group.SORT_DESCENDING"
    },
    {
      "trigger": "group.sort_ascending\tsort_ascending",
      "contents": "group.SORT_ASCENDING"
    },
    {
      "trigger": "group.return_total\treturn_total",
      "contents": "group.RETURN_TOTAL"
    },
    {
      "trigger": "group.return_none\treturn_none",
      "contents": "group.RETURN_NONE"
    },
    {
      "trigger": "group.return_child\treturn_child",
      "contents": "group.RETURN_CHILD"
    },
    {
      "trigger": "group.type\ttype",
      "contents": "group.type"
    },
    {
      "trigger": "group.z\tz",
      "contents": "group.z"
    },
    {
      "trigger": "group.y\ty",
      "contents": "group.y"
    },
    {
      "trigger": "group.x\tx",
      "contents": "group.x"
    },
    {
      "trigger": "group.worldvisible\tworldvisible",
      "contents": "group.worldVisible"
    },
    {
      "trigger": "group.worldalpha\tworldalpha",
      "contents": "group.worldAlpha"
    },
    {
      "trigger": "group.width\twidth",
      "contents": "group.width"
    },
    {
      "trigger": "group.visible\tvisible",
      "contents": "group.visible"
    },
    {
      "trigger": "group.total\ttotal",
      "contents": "group.total"
    },
    {
      "trigger": "group.rotation\trotation",
      "contents": "group.rotation"
    },
    {
      "trigger": "group.renderable\trenderable",
      "contents": "group.renderable"
    },
    {
      "trigger": "group.physicsbodytype\tphysicsbodytype",
      "contents": "group.physicsBodyType"
    },
    {
      "trigger": "group.name\tname",
      "contents": "group.name"
    },
    {
      "trigger": "group.length\tlength",
      "contents": "group.length"
    },
    {
      "trigger": "group.interactive\tinteractive",
      "contents": "group.interactive"
    },
    {
      "trigger": "group.ignoredestroy\tignoredestroy",
      "contents": "group.ignoreDestroy"
    },
    {
      "trigger": "group.height\theight",
      "contents": "group.height"
    },
    {
      "trigger": "group.fixedtocamera\tfixedtocamera",
      "contents": "group.fixedToCamera"
    },
    {
      "trigger": "group.filters\tfilters",
      "contents": "group.filters"
    },
    {
      "trigger": "group.exists\texists",
      "contents": "group.exists"
    },
    {
      "trigger": "group.enablebodydebug\tenablebodydebug",
      "contents": "group.enableBodyDebug"
    },
    {
      "trigger": "group.enablebody\tenablebody",
      "contents": "group.enableBody"
    },
    {
      "trigger": "group.defaultcursor\tdefaultcursor",
      "contents": "group.defaultCursor"
    },
    {
      "trigger": "group.cursor\tcursor",
      "contents": "group.cursor"
    },
    {
      "trigger": "group.classtype\tclasstype",
      "contents": "group.classType"
    },
    {
      "trigger": "group.angle\tangle",
      "contents": "group.angle"
    },
    {
      "trigger": "group.alpha\talpha",
      "contents": "group.alpha"
    },
    {
      "trigger": "group.alive\talive",
      "contents": "group.alive"
    },
    {
      "trigger": "group.children\tchildren",
      "contents": "group.children"
    },
    {
      "trigger": "group.mask\tmask",
      "contents": "group.mask"
    },
    {
      "trigger": "group.stage\tstage",
      "contents": "group.stage"
    },
    {
      "trigger": "group.addchild\taddchild",
      "contents": "group.addChild(${1:child});"
    },
    {
      "trigger": "group.addchildat\taddchildat",
      "contents": "group.addChildAt(${1:child},${2:index});"
    },
    {
      "trigger": "group.generatetexture\tgeneratetexture",
      "contents": "group.generateTexture(${1:resolution},${2:scaleMode},${3:renderer});"
    },
    {
      "trigger": "group.getchildat\tgetchildat",
      "contents": "group.getChildAt(${1:index});"
    },
    {
      "trigger": "group.removechild\tremovechild",
      "contents": "group.removeChild(${1:child});"
    },
    {
      "trigger": "group.removechildat\tremovechildat",
      "contents": "group.removeChildAt(${1:index});"
    },
    {
      "trigger": "inputhandler.start\tstart",
      "contents": "inputHandler.start(${1:priority},${2:useHandCursor});"
    },
    {
      "trigger": "inputhandler.sprite\tsprite",
      "contents": "inputHandler.sprite"
    },
    {
      "trigger": "inputhandler.snapoffset\tsnapoffset",
      "contents": "inputHandler.snapOffset"
    },
    {
      "trigger": "inputhandler.game\tgame",
      "contents": "inputHandler.game"
    },
    {
      "trigger": "inputhandler.boundssprite\tboundssprite",
      "contents": "inputHandler.boundsSprite"
    },
    {
      "trigger": "inputhandler.boundsrect\tboundsrect",
      "contents": "inputHandler.boundsRect"
    },
    {
      "trigger": "input.updatepointer\tupdatepointer",
      "contents": "input.updatePointer(${1:event});"
    },
    {
      "trigger": "input.stoppointer\tstoppointer",
      "contents": "input.stopPointer(${1:event});"
    },
    {
      "trigger": "input.startpointer\tstartpointer",
      "contents": "input.startPointer(${1:event});"
    },
    {
      "trigger": "input.getpointerfromidentifier\tgetpointerfromidentifier",
      "contents": "input.getPointerFromIdentifier(${1:identifier});"
    },
    {
      "trigger": "input.getpointerfromid\tgetpointerfromid",
      "contents": "input.getPointerFromId(${1:pointerId});"
    },
    {
      "trigger": "input.getpointer\tgetpointer",
      "contents": "input.getPointer(${1:state});"
    },
    {
      "trigger": "input.getlocalposition\tgetlocalposition",
      "contents": "input.getLocalPosition(${1:displayObject},${2:pointer});"
    },
    {
      "trigger": "input.addpointer\taddpointer",
      "contents": "input.addPointer();"
    },
    {
      "trigger": "input.speed\tspeed",
      "contents": "input.speed"
    },
    {
      "trigger": "input.scale\tscale",
      "contents": "input.scale"
    },
    {
      "trigger": "input.position\tposition",
      "contents": "input.position"
    },
    {
      "trigger": "input.pointer9\tpointer9",
      "contents": "input.pointer9"
    },
    {
      "trigger": "input.pointer8\tpointer8",
      "contents": "input.pointer8"
    },
    {
      "trigger": "input.pointer7\tpointer7",
      "contents": "input.pointer7"
    },
    {
      "trigger": "input.pointer6\tpointer6",
      "contents": "input.pointer6"
    },
    {
      "trigger": "input.pointer5\tpointer5",
      "contents": "input.pointer5"
    },
    {
      "trigger": "input.pointer4\tpointer4",
      "contents": "input.pointer4"
    },
    {
      "trigger": "input.pointer3\tpointer3",
      "contents": "input.pointer3"
    },
    {
      "trigger": "input.pointer2\tpointer2",
      "contents": "input.pointer2"
    },
    {
      "trigger": "input.pointer10\tpointer10",
      "contents": "input.pointer10"
    },
    {
      "trigger": "input.pointer1\tpointer1",
      "contents": "input.pointer1"
    },
    {
      "trigger": "input.onup\tonup",
      "contents": "input.onUp"
    },
    {
      "trigger": "input.ontap\tontap",
      "contents": "input.onTap"
    },
    {
      "trigger": "input.onhold\tonhold",
      "contents": "input.onHold"
    },
    {
      "trigger": "input.ondown\tondown",
      "contents": "input.onDown"
    },
    {
      "trigger": "input.mspointer\tmspointer",
      "contents": "input.mspointer"
    },
    {
      "trigger": "input.interactiveitems\tinteractiveitems",
      "contents": "input.interactiveItems"
    },
    {
      "trigger": "input.gamepad\tgamepad",
      "contents": "input.gamepad"
    },
    {
      "trigger": "input.game\tgame",
      "contents": "input.game"
    },
    {
      "trigger": "input.circle\tcircle",
      "contents": "input.circle"
    },
    {
      "trigger": "input.activepointer\tactivepointer",
      "contents": "input.activePointer"
    },
    {
      "trigger": "image.input\tinput",
      "contents": "image.input"
    },
    {
      "trigger": "inputhandler.validforinput\tvalidforinput",
      "contents": "inputHandler.validForInput(${1:highestID},${2:highestRenderID},${3:includePixelPerfect});"
    },
    {
      "trigger": "inputhandler.update\tupdate",
      "contents": "inputHandler.update(${1:pointer});"
    },
    {
      "trigger": "inputhandler.updatedrag\tupdatedrag",
      "contents": "inputHandler.updateDrag(${1:pointer});"
    },
    {
      "trigger": "inputhandler.stopdrag\tstopdrag",
      "contents": "inputHandler.stopDrag(${1:pointer});"
    },
    {
      "trigger": "inputhandler.stop\tstop",
      "contents": "inputHandler.stop();"
    },
    {
      "trigger": "inputhandler.startdrag\tstartdrag",
      "contents": "inputHandler.startDrag(${1:pointer});"
    },
    {
      "trigger": "inputhandler.setdraglock\tsetdraglock",
      "contents": "inputHandler.setDragLock(${1:allowHorizontal},${2:allowVertical});"
    },
    {
      "trigger": "inputhandler.reset\treset",
      "contents": "inputHandler.reset();"
    },
    {
      "trigger": "inputhandler.pointery\tpointery",
      "contents": "inputHandler.pointerY(${1:pointer});"
    },
    {
      "trigger": "inputhandler.pointerx\tpointerx",
      "contents": "inputHandler.pointerX(${1:pointer});"
    },
    {
      "trigger": "inputhandler.pointerup\tpointerup",
      "contents": "inputHandler.pointerUp(${1:pointer});"
    },
    {
      "trigger": "inputhandler.pointertimeup\tpointertimeup",
      "contents": "inputHandler.pointerTimeUp(${1:pointer});"
    },
    {
      "trigger": "inputhandler.pointertimeover\tpointertimeover",
      "contents": "inputHandler.pointerTimeOver(${1:pointer});"
    },
    {
      "trigger": "inputhandler.pointertimeout\tpointertimeout",
      "contents": "inputHandler.pointerTimeOut(${1:pointer});"
    },
    {
      "trigger": "inputhandler.pointertimedown\tpointertimedown",
      "contents": "inputHandler.pointerTimeDown(${1:pointer});"
    },
    {
      "trigger": "inputhandler.pointerover\tpointerover",
      "contents": "inputHandler.pointerOver(${1:index});"
    },
    {
      "trigger": "inputhandler.pointerout\tpointerout",
      "contents": "inputHandler.pointerOut(${1:index});"
    },
    {
      "trigger": "inputhandler.pointerdragged\tpointerdragged",
      "contents": "inputHandler.pointerDragged(${1:pointer});"
    },
    {
      "trigger": "inputhandler.pointerdown\tpointerdown",
      "contents": "inputHandler.pointerDown(${1:pointer});"
    },
    {
      "trigger": "inputhandler.overduration\toverduration",
      "contents": "inputHandler.overDuration(${1:pointer});"
    },
    {
      "trigger": "inputhandler.justreleased\tjustreleased",
      "contents": "inputHandler.justReleased(${1:pointer},${2:delay});"
    },
    {
      "trigger": "inputhandler.justpressed\tjustpressed",
      "contents": "inputHandler.justPressed(${1:pointer},${2:delay});"
    },
    {
      "trigger": "inputhandler.justover\tjustover",
      "contents": "inputHandler.justOver(${1:pointer},${2:delay});"
    },
    {
      "trigger": "inputhandler.justout\tjustout",
      "contents": "inputHandler.justOut(${1:pointer},${2:delay});"
    },
    {
      "trigger": "inputhandler.ispixelperfect\tispixelperfect",
      "contents": "inputHandler.isPixelPerfect();"
    },
    {
      "trigger": "inputhandler.globaltolocaly\tglobaltolocaly",
      "contents": "inputHandler.globalToLocalY(${1:y});"
    },
    {
      "trigger": "inputhandler.globaltolocalx\tglobaltolocalx",
      "contents": "inputHandler.globalToLocalX(${1:x});"
    },
    {
      "trigger": "inputhandler.enablesnap\tenablesnap",
      "contents": "inputHandler.enableSnap(${1:snapX},${2:snapY},${3:onDrag},${4:onRelease},${5:snapOffsetX},${6:snapOffsetX});"
    },
    {
      "trigger": "inputhandler.enabledrag\tenabledrag",
      "contents": "inputHandler.enableDrag(${1:lockCenter},${2:bringToTop},${3:pixelPerfect},${4:alphaThreshold},${5:boundsRect},${6:boundsSprite});"
    },
    {
      "trigger": "inputhandler.downduration\tdownduration",
      "contents": "inputHandler.downDuration(${1:pointer});"
    },
    {
      "trigger": "inputhandler.disablesnap\tdisablesnap",
      "contents": "inputHandler.disableSnap();"
    },
    {
      "trigger": "inputhandler.disabledrag\tdisabledrag",
      "contents": "inputHandler.disableDrag();"
    },
    {
      "trigger": "inputhandler.destroy\tdestroy",
      "contents": "inputHandler.destroy();"
    },
    {
      "trigger": "inputhandler.checkpointerover\tcheckpointerover",
      "contents": "inputHandler.checkPointerOver(${1:pointer},${2:fastTest});"
    },
    {
      "trigger": "inputhandler.checkpointerdown\tcheckpointerdown",
      "contents": "inputHandler.checkPointerDown(${1:pointer},${2:fastTest});"
    },
    {
      "trigger": "inputhandler.checkpixel\tcheckpixel",
      "contents": "inputHandler.checkPixel(${1:x},${2:y},${3:pointer});"
    },
    {
      "trigger": "inputhandler.checkboundssprite\tcheckboundssprite",
      "contents": "inputHandler.checkBoundsSprite();"
    },
    {
      "trigger": "inputhandler.checkboundsrect\tcheckboundsrect",
      "contents": "inputHandler.checkBoundsRect();"
    },
    {
      "trigger": "inputhandler.checked\tchecked",
      "contents": "inputHandler.checked"
    },
    {
      "trigger": "inputhandler.usehandcursor\tusehandcursor",
      "contents": "inputHandler.useHandCursor"
    },
    {
      "trigger": "inputhandler.snapy\tsnapy",
      "contents": "inputHandler.snapY"
    },
    {
      "trigger": "inputhandler.snapx\tsnapx",
      "contents": "inputHandler.snapX"
    },
    {
      "trigger": "inputhandler.snaponrelease\tsnaponrelease",
      "contents": "inputHandler.snapOnRelease"
    },
    {
      "trigger": "inputhandler.snapondrag\tsnapondrag",
      "contents": "inputHandler.snapOnDrag"
    },
    {
      "trigger": "inputhandler.snapoffsety\tsnapoffsety",
      "contents": "inputHandler.snapOffsetY"
    },
    {
      "trigger": "inputhandler.snapoffsetx\tsnapoffsetx",
      "contents": "inputHandler.snapOffsetX"
    },
    {
      "trigger": "inputhandler.scalelayer\tscalelayer",
      "contents": "inputHandler.scaleLayer"
    },
    {
      "trigger": "inputhandler.priorityid\tpriorityid",
      "contents": "inputHandler.priorityID"
    },
    {
      "trigger": "inputhandler.pixelperfectover\tpixelperfectover",
      "contents": "inputHandler.pixelPerfectOver"
    },
    {
      "trigger": "inputhandler.pixelperfectclick\tpixelperfectclick",
      "contents": "inputHandler.pixelPerfectClick"
    },
    {
      "trigger": "inputhandler.pixelperfectalpha\tpixelperfectalpha",
      "contents": "inputHandler.pixelPerfectAlpha"
    },
    {
      "trigger": "inputhandler.isdragged\tisdragged",
      "contents": "inputHandler.isDragged"
    },
    {
      "trigger": "inputhandler.enabled\tenabled",
      "contents": "inputHandler.enabled"
    },
    {
      "trigger": "inputhandler.draggable\tdraggable",
      "contents": "inputHandler.draggable"
    },
    {
      "trigger": "inputhandler.consumepointerevent\tconsumepointerevent",
      "contents": "inputHandler.consumePointerEvent"
    },
    {
      "trigger": "inputhandler.bringtotop\tbringtotop",
      "contents": "inputHandler.bringToTop"
    },
    {
      "trigger": "inputhandler.allowverticaldrag\tallowverticaldrag",
      "contents": "inputHandler.allowVerticalDrag"
    },
    {
      "trigger": "inputhandler.allowhorizontaldrag\tallowhorizontaldrag",
      "contents": "inputHandler.allowHorizontalDrag"
    },
    {
      "trigger": "input.update\tupdate",
      "contents": "input.update();"
    },
    {
      "trigger": "input.boot\tboot",
      "contents": "input.boot();"
    },
    {
      "trigger": "input.resetspeed\tresetspeed",
      "contents": "input.resetSpeed(${1:x},${2:y});"
    },
    {
      "trigger": "input.reset\treset",
      "contents": "input.reset(${1:hard});"
    },
    {
      "trigger": "input.hittest\thittest",
      "contents": "input.hitTest(${1:displayObject},${2:pointer},${3:localPoint});"
    },
    {
      "trigger": "input.destroy\tdestroy",
      "contents": "input.destroy();"
    },
    {
      "trigger": "input.deletemovecallback\tdeletemovecallback",
      "contents": "input.deleteMoveCallback(${1:index});"
    },
    {
      "trigger": "input.addmovecallback\taddmovecallback",
      "contents": "input.addMoveCallback(${1:callback},${2:context});"
    },
    {
      "trigger": "input.touch_overrides_mouse\ttouch_overrides_mouse",
      "contents": "input.TOUCH_OVERRIDES_MOUSE"
    },
    {
      "trigger": "input.mouse_touch_combine\tmouse_touch_combine",
      "contents": "input.MOUSE_TOUCH_COMBINE"
    },
    {
      "trigger": "input.mouse_overrides_touch\tmouse_overrides_touch",
      "contents": "input.MOUSE_OVERRIDES_TOUCH"
    },
    {
      "trigger": "input.y\ty",
      "contents": "input.y"
    },
    {
      "trigger": "input.x\tx",
      "contents": "input.x"
    },
    {
      "trigger": "input.worldy\tworldy",
      "contents": "input.worldY"
    },
    {
      "trigger": "input.worldx\tworldx",
      "contents": "input.worldX"
    },
    {
      "trigger": "input.totalinactivepointers\ttotalinactivepointers",
      "contents": "input.totalInactivePointers"
    },
    {
      "trigger": "input.totalactivepointers\ttotalactivepointers",
      "contents": "input.totalActivePointers"
    },
    {
      "trigger": "input.taprate\ttaprate",
      "contents": "input.tapRate"
    },
    {
      "trigger": "input.resetlocked\tresetlocked",
      "contents": "input.resetLocked"
    },
    {
      "trigger": "input.recordrate\trecordrate",
      "contents": "input.recordRate"
    },
    {
      "trigger": "input.recordpointerhistory\trecordpointerhistory",
      "contents": "input.recordPointerHistory"
    },
    {
      "trigger": "input.recordlimit\trecordlimit",
      "contents": "input.recordLimit"
    },
    {
      "trigger": "input.pollrate\tpollrate",
      "contents": "input.pollRate"
    },
    {
      "trigger": "input.polllocked\tpolllocked",
      "contents": "input.pollLocked"
    },
    {
      "trigger": "input.multiinputoverride\tmultiinputoverride",
      "contents": "input.multiInputOverride"
    },
    {
      "trigger": "input.movecallbacks\tmovecallbacks",
      "contents": "input.moveCallbacks"
    },
    {
      "trigger": "input.movecallbackcontext\tmovecallbackcontext",
      "contents": "input.moveCallbackContext"
    },
    {
      "trigger": "input.movecallback\tmovecallback",
      "contents": "input.moveCallback"
    },
    {
      "trigger": "input.mousepointer\tmousepointer",
      "contents": "input.mousePointer"
    },
    {
      "trigger": "input.minpriorityid\tminpriorityid",
      "contents": "input.minPriorityID"
    },
    {
      "trigger": "input.maxpointers\tmaxpointers",
      "contents": "input.maxPointers"
    },
    {
      "trigger": "input.justreleasedrate\tjustreleasedrate",
      "contents": "input.justReleasedRate"
    },
    {
      "trigger": "input.justpressedrate\tjustpressedrate",
      "contents": "input.justPressedRate"
    },
    {
      "trigger": "input.holdrate\tholdrate",
      "contents": "input.holdRate"
    },
    {
      "trigger": "input.hitcontext\thitcontext",
      "contents": "input.hitContext"
    },
    {
      "trigger": "input.hitcanvas\thitcanvas",
      "contents": "input.hitCanvas"
    },
    {
      "trigger": "input.doubletaprate\tdoubletaprate",
      "contents": "input.doubleTapRate"
    },
    {
      "trigger": "input.disabled\tdisabled",
      "contents": "input.disabled"
    },
    {
      "trigger": "input.currentpointers\tcurrentpointers",
      "contents": "input.currentPointers"
    },
    {
      "trigger": "keyboard.addkey\taddkey",
      "contents": "keyboard.addKey(${1:keycode});"
    },
    {
      "trigger": "keyboard.lastkey\tlastkey",
      "contents": "keyboard.lastKey"
    },
    {
      "trigger": "keyboard.game\tgame",
      "contents": "keyboard.game"
    },
    {
      "trigger": "key.onup\tonup",
      "contents": "key.onUp"
    },
    {
      "trigger": "key.ondown\tondown",
      "contents": "key.onDown"
    },
    {
      "trigger": "key.game\tgame",
      "contents": "key.game"
    },
    {
      "trigger": "input.keyboard\tkeyboard",
      "contents": "input.keyboard"
    },
    {
      "trigger": "keyboard.processkeyup\tprocesskeyup",
      "contents": "keyboard.processKeyUp(${1:event});"
    },
    {
      "trigger": "keyboard.processkeypress\tprocesskeypress",
      "contents": "keyboard.processKeyPress(${1:event});"
    },
    {
      "trigger": "keyboard.processkeydown\tprocesskeydown",
      "contents": "keyboard.processKeyDown(${1:event});"
    },
    {
      "trigger": "keyboard.update\tupdate",
      "contents": "keyboard.update();"
    },
    {
      "trigger": "keyboard.stop\tstop",
      "contents": "keyboard.stop();"
    },
    {
      "trigger": "keyboard.start\tstart",
      "contents": "keyboard.start();"
    },
    {
      "trigger": "keyboard.reset\treset",
      "contents": "keyboard.reset(${1:hard});"
    },
    {
      "trigger": "keyboard.removekeycapture\tremovekeycapture",
      "contents": "keyboard.removeKeyCapture(${1:keycode});"
    },
    {
      "trigger": "keyboard.removekey\tremovekey",
      "contents": "keyboard.removeKey(${1:keycode});"
    },
    {
      "trigger": "keyboard.justreleased\tjustreleased",
      "contents": "keyboard.justReleased(${1:keycode},${2:duration});"
    },
    {
      "trigger": "keyboard.justpressed\tjustpressed",
      "contents": "keyboard.justPressed(${1:keycode},${2:duration});"
    },
    {
      "trigger": "keyboard.isdown\tisdown",
      "contents": "keyboard.isDown(${1:keycode});"
    },
    {
      "trigger": "keyboard.destroy\tdestroy",
      "contents": "keyboard.destroy();"
    },
    {
      "trigger": "keyboard.createcursorkeys\tcreatecursorkeys",
      "contents": "keyboard.createCursorKeys();"
    },
    {
      "trigger": "keyboard.clearcaptures\tclearcaptures",
      "contents": "keyboard.clearCaptures();"
    },
    {
      "trigger": "keyboard.addkeycapture\taddkeycapture",
      "contents": "keyboard.addKeyCapture(${1:keycode});"
    },
    {
      "trigger": "keyboard.addcallbacks\taddcallbacks",
      "contents": "keyboard.addCallbacks(${1:context},${2:onDown},${3:onUp},${4:onPress});"
    },
    {
      "trigger": "keyboard.pressevent\tpressevent",
      "contents": "keyboard.pressEvent"
    },
    {
      "trigger": "keyboard.onupcallback\tonupcallback",
      "contents": "keyboard.onUpCallback"
    },
    {
      "trigger": "keyboard.onpresscallback\tonpresscallback",
      "contents": "keyboard.onPressCallback"
    },
    {
      "trigger": "keyboard.ondowncallback\tondowncallback",
      "contents": "keyboard.onDownCallback"
    },
    {
      "trigger": "keyboard.lastchar\tlastchar",
      "contents": "keyboard.lastChar"
    },
    {
      "trigger": "keyboard.event\tevent",
      "contents": "keyboard.event"
    },
    {
      "trigger": "keyboard.disabled\tdisabled",
      "contents": "keyboard.disabled"
    },
    {
      "trigger": "keyboard.callbackcontext\tcallbackcontext",
      "contents": "keyboard.callbackContext"
    },
    {
      "trigger": "key.processkeyup\tprocesskeyup",
      "contents": "key.processKeyUp(${1:event.});"
    },
    {
      "trigger": "key.processkeydown\tprocesskeydown",
      "contents": "key.processKeyDown(${1:event.});"
    },
    {
      "trigger": "key.reset\treset",
      "contents": "key.reset(${1:hard});"
    },
    {
      "trigger": "key.justreleased\tjustreleased",
      "contents": "key.justReleased(${1:duration});"
    },
    {
      "trigger": "key.justpressed\tjustpressed",
      "contents": "key.justPressed(${1:duration});"
    },
    {
      "trigger": "key.timeup\ttimeup",
      "contents": "key.timeUp"
    },
    {
      "trigger": "key.timedown\ttimedown",
      "contents": "key.timeDown"
    },
    {
      "trigger": "key.shiftkey\tshiftkey",
      "contents": "key.shiftKey"
    },
    {
      "trigger": "key.repeats\trepeats",
      "contents": "key.repeats"
    },
    {
      "trigger": "key.onholdcontext\tonholdcontext",
      "contents": "key.onHoldContext"
    },
    {
      "trigger": "key.onholdcallback\tonholdcallback",
      "contents": "key.onHoldCallback"
    },
    {
      "trigger": "key.keycode\tkeycode",
      "contents": "key.keyCode"
    },
    {
      "trigger": "key.isup\tisup",
      "contents": "key.isUp"
    },
    {
      "trigger": "key.isdown\tisdown",
      "contents": "key.isDown"
    },
    {
      "trigger": "key.event\tevent",
      "contents": "key.event"
    },
    {
      "trigger": "key.enabled\tenabled",
      "contents": "key.enabled"
    },
    {
      "trigger": "key.duration\tduration",
      "contents": "key.duration"
    },
    {
      "trigger": "key.ctrlkey\tctrlkey",
      "contents": "key.ctrlKey"
    },
    {
      "trigger": "key.altkey\taltkey",
      "contents": "key.altKey"
    },
    {
      "trigger": "mouse.pointerlock\tpointerlock",
      "contents": "mouse.pointerLock"
    },
    {
      "trigger": "mouse.game\tgame",
      "contents": "mouse.game"
    },
    {
      "trigger": "input.mouse\tmouse",
      "contents": "input.mouse"
    },
    {
      "trigger": "mouse.stop\tstop",
      "contents": "mouse.stop();"
    },
    {
      "trigger": "mouse.start\tstart",
      "contents": "mouse.start();"
    },
    {
      "trigger": "mouse.requestpointerlock\trequestpointerlock",
      "contents": "mouse.requestPointerLock();"
    },
    {
      "trigger": "mouse.releasepointerlock\treleasepointerlock",
      "contents": "mouse.releasePointerLock();"
    },
    {
      "trigger": "mouse.pointerlockchange\tpointerlockchange",
      "contents": "mouse.pointerLockChange(${1:event});"
    },
    {
      "trigger": "mouse.onmousewheel\tonmousewheel",
      "contents": "mouse.onMouseWheel(${1:event});"
    },
    {
      "trigger": "mouse.onmouseupglobal\tonmouseupglobal",
      "contents": "mouse.onMouseUpGlobal(${1:event});"
    },
    {
      "trigger": "mouse.onmouseup\tonmouseup",
      "contents": "mouse.onMouseUp(${1:event});"
    },
    {
      "trigger": "mouse.onmouseover\tonmouseover",
      "contents": "mouse.onMouseOver(${1:event});"
    },
    {
      "trigger": "mouse.onmouseout\tonmouseout",
      "contents": "mouse.onMouseOut(${1:event});"
    },
    {
      "trigger": "mouse.onmousemove\tonmousemove",
      "contents": "mouse.onMouseMove(${1:event});"
    },
    {
      "trigger": "mouse.onmousedown\tonmousedown",
      "contents": "mouse.onMouseDown(${1:event});"
    },
    {
      "trigger": "mouse.wheel_up\twheel_up",
      "contents": "mouse.WHEEL_UP"
    },
    {
      "trigger": "mouse.wheel_down\twheel_down",
      "contents": "mouse.WHEEL_DOWN"
    },
    {
      "trigger": "mouse.wheeldelta\twheeldelta",
      "contents": "mouse.wheelDelta"
    },
    {
      "trigger": "mouse.stopongameout\tstopongameout",
      "contents": "mouse.stopOnGameOut"
    },
    {
      "trigger": "mouse.mousewheelcallback\tmousewheelcallback",
      "contents": "mouse.mouseWheelCallback"
    },
    {
      "trigger": "mouse.mouseupcallback\tmouseupcallback",
      "contents": "mouse.mouseUpCallback"
    },
    {
      "trigger": "mouse.mouseovercallback\tmouseovercallback",
      "contents": "mouse.mouseOverCallback"
    },
    {
      "trigger": "mouse.mouseoutcallback\tmouseoutcallback",
      "contents": "mouse.mouseOutCallback"
    },
    {
      "trigger": "mouse.mousemovecallback\tmousemovecallback",
      "contents": "mouse.mouseMoveCallback"
    },
    {
      "trigger": "mouse.mousedowncallback\tmousedowncallback",
      "contents": "mouse.mouseDownCallback"
    },
    {
      "trigger": "mouse.locked\tlocked",
      "contents": "mouse.locked"
    },
    {
      "trigger": "mouse.event\tevent",
      "contents": "mouse.event"
    },
    {
      "trigger": "mouse.disabled\tdisabled",
      "contents": "mouse.disabled"
    },
    {
      "trigger": "mouse.capture\tcapture",
      "contents": "mouse.capture"
    },
    {
      "trigger": "mouse.callbackcontext\tcallbackcontext",
      "contents": "mouse.callbackContext"
    },
    {
      "trigger": "particles.add\tadd",
      "contents": "particles.add(${1:emitter});"
    },
    {
      "trigger": "particles.game\tgame",
      "contents": "particles.game"
    },
    {
      "trigger": "emitter.tolocal\ttolocal",
      "contents": "emitter.toLocal(${1:position},${2:[from]});"
    },
    {
      "trigger": "emitter.toglobal\ttoglobal",
      "contents": "emitter.toGlobal(${1:position});"
    },
    {
      "trigger": "emitter.getlocalbounds\tgetlocalbounds",
      "contents": "emitter.getLocalBounds();"
    },
    {
      "trigger": "emitter.getbounds\tgetbounds",
      "contents": "emitter.getBounds();"
    },
    {
      "trigger": "emitter.filter\tfilter",
      "contents": "emitter.filter(${1:predicate},${2:checkExists});"
    },
    {
      "trigger": "emitter.scale\tscale",
      "contents": "emitter.scale"
    },
    {
      "trigger": "emitter.position\tposition",
      "contents": "emitter.position"
    },
    {
      "trigger": "emitter.pivot\tpivot",
      "contents": "emitter.pivot"
    },
    {
      "trigger": "emitter.particledrag\tparticledrag",
      "contents": "emitter.particleDrag"
    },
    {
      "trigger": "emitter.particleanchor\tparticleanchor",
      "contents": "emitter.particleAnchor"
    },
    {
      "trigger": "emitter.parent\tparent",
      "contents": "emitter.parent"
    },
    {
      "trigger": "emitter.ondestroy\tondestroy",
      "contents": "emitter.onDestroy"
    },
    {
      "trigger": "emitter.minparticlespeed\tminparticlespeed",
      "contents": "emitter.minParticleSpeed"
    },
    {
      "trigger": "emitter.maxparticlespeed\tmaxparticlespeed",
      "contents": "emitter.maxParticleSpeed"
    },
    {
      "trigger": "emitter.hitarea\thitarea",
      "contents": "emitter.hitArea"
    },
    {
      "trigger": "emitter.game\tgame",
      "contents": "emitter.game"
    },
    {
      "trigger": "emitter.filterarea\tfilterarea",
      "contents": "emitter.filterArea"
    },
    {
      "trigger": "emitter.cameraoffset\tcameraoffset",
      "contents": "emitter.cameraOffset"
    },
    {
      "trigger": "emitter.bounce\tbounce",
      "contents": "emitter.bounce"
    },
    {
      "trigger": "emitter.area\tarea",
      "contents": "emitter.area"
    },
    {
      "trigger": "particle.tolocal\ttolocal",
      "contents": "particle.toLocal(${1:position},${2:[from]});"
    },
    {
      "trigger": "particle.toglobal\ttoglobal",
      "contents": "particle.toGlobal(${1:position});"
    },
    {
      "trigger": "particle.getlocalbounds\tgetlocalbounds",
      "contents": "particle.getLocalBounds();"
    },
    {
      "trigger": "particle.getbounds\tgetbounds",
      "contents": "particle.getBounds(${1:matrix});"
    },
    {
      "trigger": "particle.world\tworld",
      "contents": "particle.world"
    },
    {
      "trigger": "particle.scale\tscale",
      "contents": "particle.scale"
    },
    {
      "trigger": "particle.position\tposition",
      "contents": "particle.position"
    },
    {
      "trigger": "particle.pivot\tpivot",
      "contents": "particle.pivot"
    },
    {
      "trigger": "particle.key\tkey",
      "contents": "particle.key"
    },
    {
      "trigger": "particle.input\tinput",
      "contents": "particle.input"
    },
    {
      "trigger": "particle.hitarea\thitarea",
      "contents": "particle.hitArea"
    },
    {
      "trigger": "particle.game\tgame",
      "contents": "particle.game"
    },
    {
      "trigger": "particle.filterarea\tfilterarea",
      "contents": "particle.filterArea"
    },
    {
      "trigger": "particle.events\tevents",
      "contents": "particle.events"
    },
    {
      "trigger": "particle.croprect\tcroprect",
      "contents": "particle.cropRect"
    },
    {
      "trigger": "particle.cameraoffset\tcameraoffset",
      "contents": "particle.cameraOffset"
    },
    {
      "trigger": "particle.anchor\tanchor",
      "contents": "particle.anchor"
    },
    {
      "trigger": "particle.body\tbody",
      "contents": "particle.body"
    },
    {
      "trigger": "emitter.makeparticles\tmakeparticles",
      "contents": "emitter.makeParticles(${1:keys},${2:frames},${3:quantity},${4:collide},${5:collideWorldBounds});"
    },
    {
      "trigger": "particles.update\tupdate",
      "contents": "particles.update();"
    },
    {
      "trigger": "particles.remove\tremove",
      "contents": "particles.remove(${1:emitter});"
    },
    {
      "trigger": "particles.emitters\temitters",
      "contents": "particles.emitters"
    },
    {
      "trigger": "particles.id\tid",
      "contents": "particles.ID"
    },
    {
      "trigger": "emitter.xy\txy",
      "contents": "emitter.xy(${1:index},${2:x},${3:y});"
    },
    {
      "trigger": "emitter.updatecache\tupdatecache",
      "contents": "emitter.updateCache();"
    },
    {
      "trigger": "emitter.update\tupdate",
      "contents": "emitter.update();"
    },
    {
      "trigger": "emitter.touchstart\ttouchstart",
      "contents": "emitter.touchstart(${1:interactionData});"
    },
    {
      "trigger": "emitter.touchendoutside\ttouchendoutside",
      "contents": "emitter.touchendoutside(${1:interactionData});"
    },
    {
      "trigger": "emitter.touchend\ttouchend",
      "contents": "emitter.touchend(${1:interactionData});"
    },
    {
      "trigger": "emitter.tap\ttap",
      "contents": "emitter.tap(${1:interactionData});"
    },
    {
      "trigger": "emitter.swapchildren\tswapchildren",
      "contents": "emitter.swapChildren(${1:child},${2:child2});"
    },
    {
      "trigger": "emitter.swap\tswap",
      "contents": "emitter.swap(${1:child1},${2:child2});"
    },
    {
      "trigger": "emitter.suball\tsuball",
      "contents": "emitter.subAll(${1:property},${2:amount},${3:checkAlive},${4:checkVisible});"
    },
    {
      "trigger": "emitter.start\tstart",
      "contents": "emitter.start(${1:explode},${2:lifespan},${3:frequency},${4:quantity},${5:forceQuantity});"
    },
    {
      "trigger": "emitter.sort\tsort",
      "contents": "emitter.sort(${1:index},${2:order});"
    },
    {
      "trigger": "emitter.setyspeed\tsetyspeed",
      "contents": "emitter.setYSpeed(${1:min},${2:max});"
    },
    {
      "trigger": "emitter.setxspeed\tsetxspeed",
      "contents": "emitter.setXSpeed(${1:min},${2:max});"
    },
    {
      "trigger": "emitter.setstagereference\tsetstagereference",
      "contents": "emitter.setStageReference(${1:stage});"
    },
    {
      "trigger": "emitter.setsize\tsetsize",
      "contents": "emitter.setSize(${1:width},${2:height});"
    },
    {
      "trigger": "emitter.setscale\tsetscale",
      "contents": "emitter.setScale(${1:minX},${2:maxX},${3:minY},${4:maxY},${5:rate},${6:ease});"
    },
    {
      "trigger": "emitter.setrotation\tsetrotation",
      "contents": "emitter.setRotation(${1:min},${2:max});"
    },
    {
      "trigger": "emitter.setproperty\tsetproperty",
      "contents": "emitter.setProperty(${1:child},${2:key},${3:value},${4:operation},${5:force});"
    },
    {
      "trigger": "emitter.setchildindex\tsetchildindex",
      "contents": "emitter.setChildIndex(${1:child},${2:index});"
    },
    {
      "trigger": "emitter.setalpha\tsetalpha",
      "contents": "emitter.setAlpha(${1:min},${2:max},${3:rate},${4:ease},${5:yoyo});"
    },
    {
      "trigger": "emitter.setallchildren\tsetallchildren",
      "contents": "emitter.setAllChildren(${1:key},${2:value},${3:checkAlive},${4:checkVisible},${5:operation},${6:force});"
    },
    {
      "trigger": "emitter.setall\tsetall",
      "contents": "emitter.setAll(${1:key},${2:value},${3:checkAlive},${4:checkVisible},${5:operation},${6:force});"
    },
    {
      "trigger": "emitter.set\tset",
      "contents": "emitter.set(${1:child},${2:key},${3:value},${4:checkAlive},${5:checkVisible},${6:operation});"
    },
    {
      "trigger": "emitter.sendtoback\tsendtoback",
      "contents": "emitter.sendToBack(${1:child});"
    },
    {
      "trigger": "emitter.rightupoutside\trightupoutside",
      "contents": "emitter.rightupoutside(${1:interactionData});"
    },
    {
      "trigger": "emitter.rightup\trightup",
      "contents": "emitter.rightup(${1:interactionData});"
    },
    {
      "trigger": "emitter.rightdown\trightdown",
      "contents": "emitter.rightdown(${1:interactionData});"
    },
    {
      "trigger": "emitter.rightclick\trightclick",
      "contents": "emitter.rightclick(${1:interactionData});"
    },
    {
      "trigger": "emitter.revive\trevive",
      "contents": "emitter.revive();"
    },
    {
      "trigger": "emitter.reverse\treverse",
      "contents": "emitter.reverse();"
    },
    {
      "trigger": "emitter.resetcursor\tresetcursor",
      "contents": "emitter.resetCursor(${1:index});"
    },
    {
      "trigger": "emitter.replace\treplace",
      "contents": "emitter.replace(${1:oldChild},${2:newChild});"
    },
    {
      "trigger": "emitter.removestagereference\tremovestagereference",
      "contents": "emitter.removeStageReference();"
    },
    {
      "trigger": "emitter.removechildren\tremovechildren",
      "contents": "emitter.removeChildren(${1:beginIndex},${2:endIndex});"
    },
    {
      "trigger": "emitter.removebetween\tremovebetween",
      "contents": "emitter.removeBetween(${1:startIndex},${2:endIndex},${3:destroy},${4:silent});"
    },
    {
      "trigger": "emitter.removeall\tremoveall",
      "contents": "emitter.removeAll(${1:destroy},${2:silent});"
    },
    {
      "trigger": "emitter.remove\tremove",
      "contents": "emitter.remove(${1:child},${2:destroy},${3:silent});"
    },
    {
      "trigger": "emitter.previous\tprevious",
      "contents": "emitter.previous();"
    },
    {
      "trigger": "emitter.next\tnext",
      "contents": "emitter.next();"
    },
    {
      "trigger": "emitter.multiplyall\tmultiplyall",
      "contents": "emitter.multiplyAll(${1:property},${2:amount},${3:checkAlive},${4:checkVisible});"
    },
    {
      "trigger": "emitter.moveup\tmoveup",
      "contents": "emitter.moveUp(${1:child});"
    },
    {
      "trigger": "emitter.movedown\tmovedown",
      "contents": "emitter.moveDown(${1:child});"
    },
    {
      "trigger": "emitter.mouseupoutside\tmouseupoutside",
      "contents": "emitter.mouseupoutside(${1:interactionData});"
    },
    {
      "trigger": "emitter.mouseup\tmouseup",
      "contents": "emitter.mouseup(${1:interactionData});"
    },
    {
      "trigger": "emitter.mouseover\tmouseover",
      "contents": "emitter.mouseover(${1:interactionData});"
    },
    {
      "trigger": "emitter.mouseout\tmouseout",
      "contents": "emitter.mouseout(${1:interactionData});"
    },
    {
      "trigger": "emitter.mousedown\tmousedown",
      "contents": "emitter.mousedown(${1:interactionData});"
    },
    {
      "trigger": "emitter.kill\tkill",
      "contents": "emitter.kill();"
    },
    {
      "trigger": "emitter.iterate\titerate",
      "contents": "emitter.iterate(${1:key},${2:value},${3:returnType},${4:callback},${5:callbackContext});"
    },
    {
      "trigger": "emitter.hasproperty\thasproperty",
      "contents": "emitter.hasProperty(${1:child},${2:key});"
    },
    {
      "trigger": "emitter.gettop\tgettop",
      "contents": "emitter.getTop();"
    },
    {
      "trigger": "emitter.getrandom\tgetrandom",
      "contents": "emitter.getRandom(${1:startIndex},${2:length});"
    },
    {
      "trigger": "emitter.getindex\tgetindex",
      "contents": "emitter.getIndex(${1:child});"
    },
    {
      "trigger": "emitter.getfirstexists\tgetfirstexists",
      "contents": "emitter.getFirstExists(${1:state});"
    },
    {
      "trigger": "emitter.getfirstdead\tgetfirstdead",
      "contents": "emitter.getFirstDead();"
    },
    {
      "trigger": "emitter.getfirstalive\tgetfirstalive",
      "contents": "emitter.getFirstAlive();"
    },
    {
      "trigger": "emitter.getchildindex\tgetchildindex",
      "contents": "emitter.getChildIndex(${1:child});"
    },
    {
      "trigger": "emitter.getbottom\tgetbottom",
      "contents": "emitter.getBottom();"
    },
    {
      "trigger": "emitter.getat\tgetat",
      "contents": "emitter.getAt(${1:index});"
    },
    {
      "trigger": "emitter.foreachexists\tforeachexists",
      "contents": "emitter.forEachExists(${1:callback},${2:callbackContext});"
    },
    {
      "trigger": "emitter.foreachdead\tforeachdead",
      "contents": "emitter.forEachDead(${1:callback},${2:callbackContext});"
    },
    {
      "trigger": "emitter.foreachalive\tforeachalive",
      "contents": "emitter.forEachAlive(${1:callback},${2:callbackContext});"
    },
    {
      "trigger": "emitter.foreach\tforeach",
      "contents": "emitter.forEach(${1:callback},${2:callbackContext},${3:checkExists});"
    },
    {
      "trigger": "emitter.flow\tflow",
      "contents": "emitter.flow(${1:lifespan},${2:frequency},${3:quantity});"
    },
    {
      "trigger": "emitter.explode\texplode",
      "contents": "emitter.explode(${1:lifespan},${2:quantity});"
    },
    {
      "trigger": "emitter.emitparticle\temitparticle",
      "contents": "emitter.emitParticle();"
    },
    {
      "trigger": "emitter.divideall\tdivideall",
      "contents": "emitter.divideAll(${1:property},${2:amount},${3:checkAlive},${4:checkVisible});"
    },
    {
      "trigger": "emitter.destroy\tdestroy",
      "contents": "emitter.destroy(${1:destroyChildren},${2:soft});"
    },
    {
      "trigger": "emitter.descendingsorthandler\tdescendingsorthandler",
      "contents": "emitter.descendingSortHandler(${1:a},${2:b});"
    },
    {
      "trigger": "emitter.customsort\tcustomsort",
      "contents": "emitter.customSort(${1:sortHandler},${2:context});"
    },
    {
      "trigger": "emitter.createmultiple\tcreatemultiple",
      "contents": "emitter.createMultiple(${1:quantity},${2:key},${3:frame},${4:exists});"
    },
    {
      "trigger": "emitter.create\tcreate",
      "contents": "emitter.create(${1:x},${2:y},${3:key},${4:frame},${5:exists});"
    },
    {
      "trigger": "emitter.countliving\tcountliving",
      "contents": "emitter.countLiving();"
    },
    {
      "trigger": "emitter.countdead\tcountdead",
      "contents": "emitter.countDead();"
    },
    {
      "trigger": "emitter.click\tclick",
      "contents": "emitter.click(${1:interactionData});"
    },
    {
      "trigger": "emitter.checkproperty\tcheckproperty",
      "contents": "emitter.checkProperty(${1:child},${2:key},${3:value},${4:force});"
    },
    {
      "trigger": "emitter.checkall\tcheckall",
      "contents": "emitter.checkAll(${1:key},${2:value},${3:checkAlive},${4:checkVisible},${5:force});"
    },
    {
      "trigger": "emitter.callallexists\tcallallexists",
      "contents": "emitter.callAllExists(${1:callback},${2:existsValue},${3:parameter});"
    },
    {
      "trigger": "emitter.callall\tcallall",
      "contents": "emitter.callAll(${1:method},${2:context},${3:parameter});"
    },
    {
      "trigger": "emitter.bringtotop\tbringtotop",
      "contents": "emitter.bringToTop(${1:child});"
    },
    {
      "trigger": "emitter.at\tat",
      "contents": "emitter.at(${1:object});"
    },
    {
      "trigger": "emitter.ascendingsorthandler\tascendingsorthandler",
      "contents": "emitter.ascendingSortHandler(${1:a},${2:b});"
    },
    {
      "trigger": "emitter.addmultiple\taddmultiple",
      "contents": "emitter.addMultiple(${1:children},${2:silent});"
    },
    {
      "trigger": "emitter.addat\taddat",
      "contents": "emitter.addAt(${1:child},${2:index},${3:silent});"
    },
    {
      "trigger": "emitter.addall\taddall",
      "contents": "emitter.addAll(${1:property},${2:amount},${3:checkAlive},${4:checkVisible});"
    },
    {
      "trigger": "emitter.add\tadd",
      "contents": "emitter.add(${1:child},${2:silent});"
    },
    {
      "trigger": "emitter.type\ttype",
      "contents": "emitter.type"
    },
    {
      "trigger": "emitter.z\tz",
      "contents": "emitter.z"
    },
    {
      "trigger": "emitter.y\ty",
      "contents": "emitter.y"
    },
    {
      "trigger": "emitter.x\tx",
      "contents": "emitter.x"
    },
    {
      "trigger": "emitter.worldvisible\tworldvisible",
      "contents": "emitter.worldVisible"
    },
    {
      "trigger": "emitter.worldalpha\tworldalpha",
      "contents": "emitter.worldAlpha"
    },
    {
      "trigger": "emitter.width\twidth",
      "contents": "emitter.width"
    },
    {
      "trigger": "emitter.visible\tvisible",
      "contents": "emitter.visible"
    },
    {
      "trigger": "emitter.total\ttotal",
      "contents": "emitter.total"
    },
    {
      "trigger": "emitter.top\ttop",
      "contents": "emitter.top"
    },
    {
      "trigger": "emitter.scaledata\tscaledata",
      "contents": "emitter.scaleData"
    },
    {
      "trigger": "emitter.rotation\trotation",
      "contents": "emitter.rotation"
    },
    {
      "trigger": "emitter.right\tright",
      "contents": "emitter.right"
    },
    {
      "trigger": "emitter.renderable\trenderable",
      "contents": "emitter.renderable"
    },
    {
      "trigger": "emitter.physicsbodytype\tphysicsbodytype",
      "contents": "emitter.physicsBodyType"
    },
    {
      "trigger": "emitter.particlesendtoback\tparticlesendtoback",
      "contents": "emitter.particleSendToBack"
    },
    {
      "trigger": "emitter.particleclass\tparticleclass",
      "contents": "emitter.particleClass"
    },
    {
      "trigger": "emitter.particlebringtotop\tparticlebringtotop",
      "contents": "emitter.particleBringToTop"
    },
    {
      "trigger": "emitter.on\ton",
      "contents": "emitter.on"
    },
    {
      "trigger": "emitter.name\tname",
      "contents": "emitter.name"
    },
    {
      "trigger": "emitter.minrotation\tminrotation",
      "contents": "emitter.minRotation"
    },
    {
      "trigger": "emitter.minparticlescale\tminparticlescale",
      "contents": "emitter.minParticleScale"
    },
    {
      "trigger": "emitter.minparticlealpha\tminparticlealpha",
      "contents": "emitter.minParticleAlpha"
    },
    {
      "trigger": "emitter.maxrotation\tmaxrotation",
      "contents": "emitter.maxRotation"
    },
    {
      "trigger": "emitter.maxparticles\tmaxparticles",
      "contents": "emitter.maxParticles"
    },
    {
      "trigger": "emitter.maxparticlescale\tmaxparticlescale",
      "contents": "emitter.maxParticleScale"
    },
    {
      "trigger": "emitter.maxparticlealpha\tmaxparticlealpha",
      "contents": "emitter.maxParticleAlpha"
    },
    {
      "trigger": "emitter.lifespan\tlifespan",
      "contents": "emitter.lifespan"
    },
    {
      "trigger": "emitter.length\tlength",
      "contents": "emitter.length"
    },
    {
      "trigger": "emitter.left\tleft",
      "contents": "emitter.left"
    },
    {
      "trigger": "emitter.interactive\tinteractive",
      "contents": "emitter.interactive"
    },
    {
      "trigger": "emitter.ignoredestroy\tignoredestroy",
      "contents": "emitter.ignoreDestroy"
    },
    {
      "trigger": "emitter.height\theight",
      "contents": "emitter.height"
    },
    {
      "trigger": "emitter.gravity\tgravity",
      "contents": "emitter.gravity"
    },
    {
      "trigger": "emitter.frequency\tfrequency",
      "contents": "emitter.frequency"
    },
    {
      "trigger": "emitter.fixedtocamera\tfixedtocamera",
      "contents": "emitter.fixedToCamera"
    },
    {
      "trigger": "emitter.filters\tfilters",
      "contents": "emitter.filters"
    },
    {
      "trigger": "emitter.exists\texists",
      "contents": "emitter.exists"
    },
    {
      "trigger": "emitter.enablebodydebug\tenablebodydebug",
      "contents": "emitter.enableBodyDebug"
    },
    {
      "trigger": "emitter.enablebody\tenablebody",
      "contents": "emitter.enableBody"
    },
    {
      "trigger": "emitter.emity\temity",
      "contents": "emitter.emitY"
    },
    {
      "trigger": "emitter.emitx\temitx",
      "contents": "emitter.emitX"
    },
    {
      "trigger": "emitter.defaultcursor\tdefaultcursor",
      "contents": "emitter.defaultCursor"
    },
    {
      "trigger": "emitter.cursor\tcursor",
      "contents": "emitter.cursor"
    },
    {
      "trigger": "emitter.classtype\tclasstype",
      "contents": "emitter.classType"
    },
    {
      "trigger": "emitter.cacheasbitmap\tcacheasbitmap",
      "contents": "emitter.cacheAsBitmap"
    },
    {
      "trigger": "emitter.buttonmode\tbuttonmode",
      "contents": "emitter.buttonMode"
    },
    {
      "trigger": "emitter.bottom\tbottom",
      "contents": "emitter.bottom"
    },
    {
      "trigger": "emitter.blendmode\tblendmode",
      "contents": "emitter.blendMode"
    },
    {
      "trigger": "emitter.autoscale\tautoscale",
      "contents": "emitter.autoScale"
    },
    {
      "trigger": "emitter.autoalpha\tautoalpha",
      "contents": "emitter.autoAlpha"
    },
    {
      "trigger": "emitter.angulardrag\tangulardrag",
      "contents": "emitter.angularDrag"
    },
    {
      "trigger": "emitter.angle\tangle",
      "contents": "emitter.angle"
    },
    {
      "trigger": "pluginmanager.add\tadd",
      "contents": "pluginManager.add(${1:plugin},${2:parameter});"
    },
    {
      "trigger": "pluginmanager.game\tgame",
      "contents": "pluginManager.game"
    },
    {
      "trigger": "plugin.game\tgame",
      "contents": "plugin.game"
    },
    {
      "trigger": "gameobjectfactory.plugin\tplugin",
      "contents": "gameObjectFactory.plugin(${1:plugin},${2:parameter});"
    },
    {
      "trigger": "pluginmanager.update\tupdate",
      "contents": "pluginManager.update();"
    },
    {
      "trigger": "pluginmanager.render\trender",
      "contents": "pluginManager.render();"
    },
    {
      "trigger": "pluginmanager.removeall\tremoveall",
      "contents": "pluginManager.removeAll();"
    },
    {
      "trigger": "pluginmanager.remove\tremove",
      "contents": "pluginManager.remove(${1:plugin});"
    },
    {
      "trigger": "pluginmanager.preupdate\tpreupdate",
      "contents": "pluginManager.preUpdate();"
    },
    {
      "trigger": "pluginmanager.postupdate\tpostupdate",
      "contents": "pluginManager.postUpdate();"
    },
    {
      "trigger": "pluginmanager.postrender\tpostrender",
      "contents": "pluginManager.postRender();"
    },
    {
      "trigger": "pluginmanager.destroy\tdestroy",
      "contents": "pluginManager.destroy();"
    },
    {
      "trigger": "pluginmanager.plugins\tplugins",
      "contents": "pluginManager.plugins"
    },
    {
      "trigger": "plugin.update\tupdate",
      "contents": "plugin.update();"
    },
    {
      "trigger": "plugin.render\trender",
      "contents": "plugin.render();"
    },
    {
      "trigger": "plugin.preupdate\tpreupdate",
      "contents": "plugin.preUpdate();"
    },
    {
      "trigger": "plugin.postrender\tpostrender",
      "contents": "plugin.postRender();"
    },
    {
      "trigger": "plugin.destroy\tdestroy",
      "contents": "plugin.destroy();"
    },
    {
      "trigger": "plugin.visible\tvisible",
      "contents": "plugin.visible"
    },
    {
      "trigger": "plugin.parent\tparent",
      "contents": "plugin.parent"
    },
    {
      "trigger": "plugin.hasupdate\thasupdate",
      "contents": "plugin.hasUpdate"
    },
    {
      "trigger": "plugin.hasrender\thasrender",
      "contents": "plugin.hasRender"
    },
    {
      "trigger": "plugin.haspreupdate\thaspreupdate",
      "contents": "plugin.hasPreUpdate"
    },
    {
      "trigger": "plugin.haspostupdate\thaspostupdate",
      "contents": "plugin.hasPostUpdate"
    },
    {
      "trigger": "plugin.haspostrender\thaspostrender",
      "contents": "plugin.hasPostRender"
    },
    {
      "trigger": "plugin.active\tactive",
      "contents": "plugin.active"
    },
    {
      "trigger": "pointer.positionup\tpositionup",
      "contents": "pointer.positionUp"
    },
    {
      "trigger": "pointer.positiondown\tpositiondown",
      "contents": "pointer.positionDown"
    },
    {
      "trigger": "pointer.position\tposition",
      "contents": "pointer.position"
    },
    {
      "trigger": "pointer.game\tgame",
      "contents": "pointer.game"
    },
    {
      "trigger": "pointer.circle\tcircle",
      "contents": "pointer.circle"
    },
    {
      "trigger": "point.subtract\tsubtract",
      "contents": "point.subtract(${1:a},${2:b},${3:out});"
    },
    {
      "trigger": "point.setto\tsetto",
      "contents": "point.setTo(${1:x},${2:y});"
    },
    {
      "trigger": "point.setmagnitude\tsetmagnitude",
      "contents": "point.setMagnitude(${1:magnitude});"
    },
    {
      "trigger": "point.set\tset",
      "contents": "point.set(${1:x},${2:y});"
    },
    {
      "trigger": "point.rperp\trperp",
      "contents": "point.rperp(${1:a},${2:out});"
    },
    {
      "trigger": "point.rotate\trotate",
      "contents": "point.rotate(${1:a},${2:x},${3:y},${4:angle},${5:asDegrees},${6:distance});"
    },
    {
      "trigger": "point.projectunit\tprojectunit",
      "contents": "point.projectUnit(${1:a},${2:b},${3:out});"
    },
    {
      "trigger": "point.project\tproject",
      "contents": "point.project(${1:a},${2:b},${3:out});"
    },
    {
      "trigger": "point.perp\tperp",
      "contents": "point.perp(${1:a},${2:out});"
    },
    {
      "trigger": "point.parse\tparse",
      "contents": "point.parse(${1:obj},${2:xProp},${3:yProp});"
    },
    {
      "trigger": "point.normalize\tnormalize",
      "contents": "point.normalize(${1:a},${2:out});"
    },
    {
      "trigger": "point.normalrighthand\tnormalrighthand",
      "contents": "point.normalRightHand(${1:a},${2:out});"
    },
    {
      "trigger": "point.negative\tnegative",
      "contents": "point.negative(${1:a},${2:out});"
    },
    {
      "trigger": "point.multiplyadd\tmultiplyadd",
      "contents": "point.multiplyAdd(${1:a},${2:b},${3:s},${4:out});"
    },
    {
      "trigger": "point.multiply\tmultiply",
      "contents": "point.multiply(${1:a},${2:b},${3:out});"
    },
    {
      "trigger": "point.invert\tinvert",
      "contents": "point.invert();"
    },
    {
      "trigger": "point.interpolate\tinterpolate",
      "contents": "point.interpolate(${1:a},${2:b},${3:f},${4:out});"
    },
    {
      "trigger": "point.divide\tdivide",
      "contents": "point.divide(${1:a},${2:b},${3:out});"
    },
    {
      "trigger": "point.copyfrom\tcopyfrom",
      "contents": "point.copyFrom(${1:source});"
    },
    {
      "trigger": "point.clone\tclone",
      "contents": "point.clone(${1:output});"
    },
    {
      "trigger": "point.clampy\tclampy",
      "contents": "point.clampY(${1:min},${2:max});"
    },
    {
      "trigger": "point.clampx\tclampx",
      "contents": "point.clampX(${1:min},${2:max});"
    },
    {
      "trigger": "point.clamp\tclamp",
      "contents": "point.clamp(${1:min},${2:max});"
    },
    {
      "trigger": "point.centroid\tcentroid",
      "contents": "point.centroid(${1:points},${2:out});"
    },
    {
      "trigger": "point.add\tadd",
      "contents": "point.add(${1:a},${2:b},${3:out});"
    },
    {
      "trigger": "soundmanager.play\tplay",
      "contents": "soundManager.play(${1:key},${2:volume},${3:loop});"
    },
    {
      "trigger": "soundmanager.addsprite\taddsprite",
      "contents": "soundManager.addSprite(${1:key});"
    },
    {
      "trigger": "soundmanager.add\tadd",
      "contents": "soundManager.add(${1:key},${2:volume},${3:loop},${4:connect});"
    },
    {
      "trigger": "soundmanager.onsounddecode\tonsounddecode",
      "contents": "soundManager.onSoundDecode"
    },
    {
      "trigger": "soundmanager.game\tgame",
      "contents": "soundManager.game"
    },
    {
      "trigger": "sound.play\tplay",
      "contents": "sound.play(${1:marker},${2:position},${3:volume},${4:loop},${5:forceRestart});"
    },
    {
      "trigger": "sound.onstop\tonstop",
      "contents": "sound.onStop"
    },
    {
      "trigger": "sound.onresume\tonresume",
      "contents": "sound.onResume"
    },
    {
      "trigger": "sound.onplay\tonplay",
      "contents": "sound.onPlay"
    },
    {
      "trigger": "sound.onpause\tonpause",
      "contents": "sound.onPause"
    },
    {
      "trigger": "sound.onmute\tonmute",
      "contents": "sound.onMute"
    },
    {
      "trigger": "sound.onmarkercomplete\tonmarkercomplete",
      "contents": "sound.onMarkerComplete"
    },
    {
      "trigger": "sound.onloop\tonloop",
      "contents": "sound.onLoop"
    },
    {
      "trigger": "sound.onfadecomplete\tonfadecomplete",
      "contents": "sound.onFadeComplete"
    },
    {
      "trigger": "sound.ondecoded\tondecoded",
      "contents": "sound.onDecoded"
    },
    {
      "trigger": "sound.game\tgame",
      "contents": "sound.game"
    },
    {
      "trigger": "soundmanager.boot\tboot",
      "contents": "soundManager.boot();"
    },
    {
      "trigger": "soundmanager.update\tupdate",
      "contents": "soundManager.update();"
    },
    {
      "trigger": "soundmanager.unlock\tunlock",
      "contents": "soundManager.unlock();"
    },
    {
      "trigger": "soundmanager.stopall\tstopall",
      "contents": "soundManager.stopAll();"
    },
    {
      "trigger": "soundmanager.resumeall\tresumeall",
      "contents": "soundManager.resumeAll();"
    },
    {
      "trigger": "soundmanager.removebykey\tremovebykey",
      "contents": "soundManager.removeByKey(${1:key});"
    },
    {
      "trigger": "soundmanager.remove\tremove",
      "contents": "soundManager.remove(${1:sound});"
    },
    {
      "trigger": "soundmanager.pauseall\tpauseall",
      "contents": "soundManager.pauseAll();"
    },
    {
      "trigger": "soundmanager.destroy\tdestroy",
      "contents": "soundManager.destroy();"
    },
    {
      "trigger": "soundmanager.decode\tdecode",
      "contents": "soundManager.decode(${1:key},${2:sound});"
    },
    {
      "trigger": "soundmanager.volume\tvolume",
      "contents": "soundManager.volume"
    },
    {
      "trigger": "soundmanager.usingwebaudio\tusingwebaudio",
      "contents": "soundManager.usingWebAudio"
    },
    {
      "trigger": "soundmanager.usingaudiotag\tusingaudiotag",
      "contents": "soundManager.usingAudioTag"
    },
    {
      "trigger": "soundmanager.touchlocked\ttouchlocked",
      "contents": "soundManager.touchLocked"
    },
    {
      "trigger": "soundmanager.noaudio\tnoaudio",
      "contents": "soundManager.noAudio"
    },
    {
      "trigger": "soundmanager.mute\tmute",
      "contents": "soundManager.mute"
    },
    {
      "trigger": "soundmanager.context\tcontext",
      "contents": "soundManager.context"
    },
    {
      "trigger": "soundmanager.connecttomaster\tconnecttomaster",
      "contents": "soundManager.connectToMaster"
    },
    {
      "trigger": "soundmanager.channels\tchannels",
      "contents": "soundManager.channels"
    },
    {
      "trigger": "sound.update\tupdate",
      "contents": "sound.update();"
    },
    {
      "trigger": "sound.soundhasunlocked\tsoundhasunlocked",
      "contents": "sound.soundHasUnlocked(${1:key});"
    },
    {
      "trigger": "sound.stop\tstop",
      "contents": "sound.stop();"
    },
    {
      "trigger": "sound.resume\tresume",
      "contents": "sound.resume();"
    },
    {
      "trigger": "sound.restart\trestart",
      "contents": "sound.restart(${1:marker},${2:position},${3:volume},${4:loop});"
    },
    {
      "trigger": "sound.removemarker\tremovemarker",
      "contents": "sound.removeMarker(${1:name});"
    },
    {
      "trigger": "sound.pause\tpause",
      "contents": "sound.pause();"
    },
    {
      "trigger": "sound.fadeto\tfadeto",
      "contents": "sound.fadeTo(${1:duration},${2:volume});"
    },
    {
      "trigger": "sound.fadeout\tfadeout",
      "contents": "sound.fadeOut(${1:duration});"
    },
    {
      "trigger": "sound.fadein\tfadein",
      "contents": "sound.fadeIn(${1:duration},${2:loop});"
    },
    {
      "trigger": "sound.destroy\tdestroy",
      "contents": "sound.destroy(${1:remove});"
    },
    {
      "trigger": "sound.addmarker\taddmarker",
      "contents": "sound.addMarker(${1:name},${2:start},${3:duration},${4:volume},${5:loop});"
    },
    {
      "trigger": "sound.volume\tvolume",
      "contents": "sound.volume"
    },
    {
      "trigger": "sound.usingwebaudio\tusingwebaudio",
      "contents": "sound.usingWebAudio"
    },
    {
      "trigger": "sound.usingaudiotag\tusingaudiotag",
      "contents": "sound.usingAudioTag"
    },
    {
      "trigger": "sound.totalduration\ttotalduration",
      "contents": "sound.totalDuration"
    },
    {
      "trigger": "sound.stoptime\tstoptime",
      "contents": "sound.stopTime"
    },
    {
      "trigger": "sound.starttime\tstarttime",
      "contents": "sound.startTime"
    },
    {
      "trigger": "sound.position\tposition",
      "contents": "sound.position"
    },
    {
      "trigger": "sound.pendingplayback\tpendingplayback",
      "contents": "sound.pendingPlayback"
    },
    {
      "trigger": "sound.pausedtime\tpausedtime",
      "contents": "sound.pausedTime"
    },
    {
      "trigger": "sound.pausedposition\tpausedposition",
      "contents": "sound.pausedPosition"
    },
    {
      "trigger": "sound.paused\tpaused",
      "contents": "sound.paused"
    },
    {
      "trigger": "sound.override\toverride",
      "contents": "sound.override"
    },
    {
      "trigger": "sound.name\tname",
      "contents": "sound.name"
    },
    {
      "trigger": "sound.mute\tmute",
      "contents": "sound.mute"
    },
    {
      "trigger": "sound.mastergainnode\tmastergainnode",
      "contents": "sound.masterGainNode"
    },
    {
      "trigger": "sound.markers\tmarkers",
      "contents": "sound.markers"
    },
    {
      "trigger": "sound.loop\tloop",
      "contents": "sound.loop"
    },
    {
      "trigger": "sound.key\tkey",
      "contents": "sound.key"
    },
    {
      "trigger": "sound.isplaying\tisplaying",
      "contents": "sound.isPlaying"
    },
    {
      "trigger": "sound.isdecoding\tisdecoding",
      "contents": "sound.isDecoding"
    },
    {
      "trigger": "sound.isdecoded\tisdecoded",
      "contents": "sound.isDecoded"
    },
    {
      "trigger": "sound.gainnode\tgainnode",
      "contents": "sound.gainNode"
    },
    {
      "trigger": "sound.externalnode\texternalnode",
      "contents": "sound.externalNode"
    },
    {
      "trigger": "sound.durationms\tdurationms",
      "contents": "sound.durationMS"
    },
    {
      "trigger": "sound.duration\tduration",
      "contents": "sound.duration"
    },
    {
      "trigger": "sound.currenttime\tcurrenttime",
      "contents": "sound.currentTime"
    },
    {
      "trigger": "sound.currentmarker\tcurrentmarker",
      "contents": "sound.currentMarker"
    },
    {
      "trigger": "sound.context\tcontext",
      "contents": "sound.context"
    },
    {
      "trigger": "sound.autoplay\tautoplay",
      "contents": "sound.autoplay"
    },
    {
      "trigger": "sound.allowmultiple\tallowmultiple",
      "contents": "sound.allowMultiple"
    },
    {
      "trigger": "statemanager.game\tgame",
      "contents": "stateManager.game"
    },
    {
      "trigger": "state.tweens\ttweens",
      "contents": "state.tweens"
    },
    {
      "trigger": "state.stage\tstage",
      "contents": "state.stage"
    },
    {
      "trigger": "state.sound\tsound",
      "contents": "state.sound"
    },
    {
      "trigger": "state.scale\tscale",
      "contents": "state.scale"
    },
    {
      "trigger": "state.rnd\trnd",
      "contents": "state.rnd"
    },
    {
      "trigger": "state.physics\tphysics",
      "contents": "state.physics"
    },
    {
      "trigger": "state.particles\tparticles",
      "contents": "state.particles"
    },
    {
      "trigger": "state.math\tmath",
      "contents": "state.math"
    },
    {
      "trigger": "state.make\tmake",
      "contents": "state.make"
    },
    {
      "trigger": "state.load\tload",
      "contents": "state.load"
    },
    {
      "trigger": "state.input\tinput",
      "contents": "state.input"
    },
    {
      "trigger": "state.game\tgame",
      "contents": "state.game"
    },
    {
      "trigger": "state.camera\tcamera",
      "contents": "state.camera"
    },
    {
      "trigger": "state.add\tadd",
      "contents": "state.add"
    },
    {
      "trigger": "game.state\tstate",
      "contents": "game.state"
    },
    {
      "trigger": "statemanager.update\tupdate",
      "contents": "stateManager.update();"
    },
    {
      "trigger": "statemanager.unlink\tunlink",
      "contents": "stateManager.unlink(${1:key});"
    },
    {
      "trigger": "statemanager.resume\tresume",
      "contents": "stateManager.resume();"
    },
    {
      "trigger": "statemanager.resize\tresize",
      "contents": "stateManager.resize();"
    },
    {
      "trigger": "statemanager.render\trender",
      "contents": "stateManager.render();"
    },
    {
      "trigger": "statemanager.prerender\tprerender",
      "contents": "stateManager.preRender();"
    },
    {
      "trigger": "statemanager.pauseupdate\tpauseupdate",
      "contents": "stateManager.pauseUpdate();"
    },
    {
      "trigger": "statemanager.pause\tpause",
      "contents": "stateManager.pause();"
    },
    {
      "trigger": "statemanager.loadcomplete\tloadcomplete",
      "contents": "stateManager.loadComplete();"
    },
    {
      "trigger": "statemanager.link\tlink",
      "contents": "stateManager.link(${1:key});"
    },
    {
      "trigger": "statemanager.start\tstart",
      "contents": "stateManager.start(${1:key},${2:clearWorld},${3:clearCache},${4:parameter});"
    },
    {
      "trigger": "statemanager.restart\trestart",
      "contents": "stateManager.restart(${1:clearWorld},${2:clearCache},${3:parameter});"
    },
    {
      "trigger": "statemanager.remove\tremove",
      "contents": "stateManager.remove(${1:key});"
    },
    {
      "trigger": "statemanager.preupdate\tpreupdate",
      "contents": "stateManager.preUpdate();"
    },
    {
      "trigger": "statemanager.getcurrentstate\tgetcurrentstate",
      "contents": "stateManager.getCurrentState();"
    },
    {
      "trigger": "statemanager.destroy\tdestroy",
      "contents": "stateManager.destroy();"
    },
    {
      "trigger": "statemanager.clearcurrentstate\tclearcurrentstate",
      "contents": "stateManager.clearCurrentState();"
    },
    {
      "trigger": "statemanager.checkstate\tcheckstate",
      "contents": "stateManager.checkState(${1:key});"
    },
    {
      "trigger": "statemanager.add\tadd",
      "contents": "stateManager.add(${1:key},${2:state},${3:autoStart});"
    },
    {
      "trigger": "statemanager.states\tstates",
      "contents": "stateManager.states"
    },
    {
      "trigger": "statemanager.onupdatecallback\tonupdatecallback",
      "contents": "stateManager.onUpdateCallback"
    },
    {
      "trigger": "statemanager.onshutdowncallback\tonshutdowncallback",
      "contents": "stateManager.onShutDownCallback"
    },
    {
      "trigger": "statemanager.onresumedcallback\tonresumedcallback",
      "contents": "stateManager.onResumedCallback"
    },
    {
      "trigger": "statemanager.onresizecallback\tonresizecallback",
      "contents": "stateManager.onResizeCallback"
    },
    {
      "trigger": "statemanager.onrendercallback\tonrendercallback",
      "contents": "stateManager.onRenderCallback"
    },
    {
      "trigger": "statemanager.onpreloadcallback\tonpreloadcallback",
      "contents": "stateManager.onPreloadCallback"
    },
    {
      "trigger": "statemanager.onprerendercallback\tonprerendercallback",
      "contents": "stateManager.onPreRenderCallback"
    },
    {
      "trigger": "statemanager.onpausedcallback\tonpausedcallback",
      "contents": "stateManager.onPausedCallback"
    },
    {
      "trigger": "statemanager.onpauseupdatecallback\tonpauseupdatecallback",
      "contents": "stateManager.onPauseUpdateCallback"
    },
    {
      "trigger": "statemanager.onloadupdatecallback\tonloadupdatecallback",
      "contents": "stateManager.onLoadUpdateCallback"
    },
    {
      "trigger": "statemanager.onloadrendercallback\tonloadrendercallback",
      "contents": "stateManager.onLoadRenderCallback"
    },
    {
      "trigger": "statemanager.oninitcallback\toninitcallback",
      "contents": "stateManager.onInitCallback"
    },
    {
      "trigger": "statemanager.oncreatecallback\toncreatecallback",
      "contents": "stateManager.onCreateCallback"
    },
    {
      "trigger": "statemanager.current\tcurrent",
      "contents": "stateManager.current"
    },
    {
      "trigger": "state.update\tupdate",
      "contents": "state.update();"
    },
    {
      "trigger": "state.shutdown\tshutdown",
      "contents": "state.shutdown();"
    },
    {
      "trigger": "state.resize\tresize",
      "contents": "state.resize();"
    },
    {
      "trigger": "state.render\trender",
      "contents": "state.render();"
    },
    {
      "trigger": "state.preload\tpreload",
      "contents": "state.preload();"
    },
    {
      "trigger": "state.paused\tpaused",
      "contents": "state.paused();"
    },
    {
      "trigger": "state.pauseupdate\tpauseupdate",
      "contents": "state.pauseUpdate();"
    },
    {
      "trigger": "state.loadupdate\tloadupdate",
      "contents": "state.loadUpdate();"
    },
    {
      "trigger": "state.loadrender\tloadrender",
      "contents": "state.loadRender();"
    },
    {
      "trigger": "state.create\tcreate",
      "contents": "state.create();"
    },
    {
      "trigger": "text.tolocal\ttolocal",
      "contents": "text.toLocal(${1:position},${2:[from]});"
    },
    {
      "trigger": "text.toglobal\ttoglobal",
      "contents": "text.toGlobal(${1:position});"
    },
    {
      "trigger": "text.getlocalbounds\tgetlocalbounds",
      "contents": "text.getLocalBounds();"
    },
    {
      "trigger": "text.getbounds\tgetbounds",
      "contents": "text.getBounds(${1:matrix});"
    },
    {
      "trigger": "text.world\tworld",
      "contents": "text.world"
    },
    {
      "trigger": "text.scale\tscale",
      "contents": "text.scale"
    },
    {
      "trigger": "text.position\tposition",
      "contents": "text.position"
    },
    {
      "trigger": "text.pivot\tpivot",
      "contents": "text.pivot"
    },
    {
      "trigger": "text.hitarea\thitarea",
      "contents": "text.hitArea"
    },
    {
      "trigger": "text.game\tgame",
      "contents": "text.game"
    },
    {
      "trigger": "text.filterarea\tfilterarea",
      "contents": "text.filterArea"
    },
    {
      "trigger": "text.events\tevents",
      "contents": "text.events"
    },
    {
      "trigger": "text.cameraoffset\tcameraoffset",
      "contents": "text.cameraOffset"
    },
    {
      "trigger": "text.anchor\tanchor",
      "contents": "text.anchor"
    },
    {
      "trigger": "gameobjectfactory.text\ttext",
      "contents": "gameObjectFactory.text(${1:x},${2:y},${3:text},${4:style},${5:group});"
    },
    {
      "trigger": "gameobjectcreator.text\ttext",
      "contents": "gameObjectCreator.text(${1:x},${2:y},${3:text},${4:style});"
    },
    {
      "trigger": "text.update\tupdate",
      "contents": "text.update();"
    },
    {
      "trigger": "text.touchstart\ttouchstart",
      "contents": "text.touchstart(${1:interactionData});"
    },
    {
      "trigger": "text.touchendoutside\ttouchendoutside",
      "contents": "text.touchendoutside(${1:interactionData});"
    },
    {
      "trigger": "text.touchend\ttouchend",
      "contents": "text.touchend(${1:interactionData});"
    },
    {
      "trigger": "text.tap\ttap",
      "contents": "text.tap(${1:interactionData});"
    },
    {
      "trigger": "text.swapchildren\tswapchildren",
      "contents": "text.swapChildren(${1:child},${2:child2});"
    },
    {
      "trigger": "text.settexture\tsettexture",
      "contents": "text.setTexture(${1:texture});"
    },
    {
      "trigger": "text.settext\tsettext",
      "contents": "text.setText(${1:text});"
    },
    {
      "trigger": "text.setstyle\tsetstyle",
      "contents": "text.setStyle(${1:style},${2:style.font},${3:style.fill},${4:style.align},${5:style.stroke},${6:style.strokeThickness});"
    },
    {
      "trigger": "text.setstagereference\tsetstagereference",
      "contents": "text.setStageReference(${1:stage});"
    },
    {
      "trigger": "text.setshadow\tsetshadow",
      "contents": "text.setShadow(${1:x},${2:y},${3:color},${4:blur});"
    },
    {
      "trigger": "text.setchildindex\tsetchildindex",
      "contents": "text.setChildIndex(${1:child},${2:index});"
    },
    {
      "trigger": "text.rightupoutside\trightupoutside",
      "contents": "text.rightupoutside(${1:interactionData});"
    },
    {
      "trigger": "text.rightup\trightup",
      "contents": "text.rightup(${1:interactionData});"
    },
    {
      "trigger": "text.rightdown\trightdown",
      "contents": "text.rightdown(${1:interactionData});"
    },
    {
      "trigger": "text.rightclick\trightclick",
      "contents": "text.rightclick(${1:interactionData});"
    },
    {
      "trigger": "text.removestagereference\tremovestagereference",
      "contents": "text.removeStageReference();"
    },
    {
      "trigger": "text.removechildren\tremovechildren",
      "contents": "text.removeChildren(${1:beginIndex},${2:endIndex});"
    },
    {
      "trigger": "text.preupdate\tpreupdate",
      "contents": "text.preUpdate();"
    },
    {
      "trigger": "text.postupdate\tpostupdate",
      "contents": "text.postUpdate();"
    },
    {
      "trigger": "text.mouseupoutside\tmouseupoutside",
      "contents": "text.mouseupoutside(${1:interactionData});"
    },
    {
      "trigger": "text.mouseup\tmouseup",
      "contents": "text.mouseup(${1:interactionData});"
    },
    {
      "trigger": "text.mouseover\tmouseover",
      "contents": "text.mouseover(${1:interactionData});"
    },
    {
      "trigger": "text.mouseout\tmouseout",
      "contents": "text.mouseout(${1:interactionData});"
    },
    {
      "trigger": "text.mousedown\tmousedown",
      "contents": "text.mousedown(${1:interactionData});"
    },
    {
      "trigger": "text.getchildindex\tgetchildindex",
      "contents": "text.getChildIndex(${1:child});"
    },
    {
      "trigger": "text.destroy\tdestroy",
      "contents": "text.destroy(${1:destroyChildren});"
    },
    {
      "trigger": "text.click\tclick",
      "contents": "text.click(${1:interactionData});"
    },
    {
      "trigger": "text.clearcolors\tclearcolors",
      "contents": "text.clearColors();"
    },
    {
      "trigger": "text.addcolor\taddcolor",
      "contents": "text.addColor(${1:color},${2:position});"
    },
    {
      "trigger": "text.z\tz",
      "contents": "text.z"
    },
    {
      "trigger": "text.y\ty",
      "contents": "text.y"
    },
    {
      "trigger": "text.x\tx",
      "contents": "text.x"
    },
    {
      "trigger": "text.worldvisible\tworldvisible",
      "contents": "text.worldVisible"
    },
    {
      "trigger": "text.worldalpha\tworldalpha",
      "contents": "text.worldAlpha"
    },
    {
      "trigger": "text.wordwrapwidth\twordwrapwidth",
      "contents": "text.wordWrapWidth"
    },
    {
      "trigger": "text.wordwrap\twordwrap",
      "contents": "text.wordWrap"
    },
    {
      "trigger": "text.width\twidth",
      "contents": "text.width"
    },
    {
      "trigger": "text.visible\tvisible",
      "contents": "text.visible"
    },
    {
      "trigger": "text.type\ttype",
      "contents": "text.type"
    },
    {
      "trigger": "text.tint\ttint",
      "contents": "text.tint"
    },
    {
      "trigger": "text.text\ttext",
      "contents": "text.text"
    },
    {
      "trigger": "text.strokethickness\tstrokethickness",
      "contents": "text.strokeThickness"
    },
    {
      "trigger": "text.stroke\tstroke",
      "contents": "text.stroke"
    },
    {
      "trigger": "text.shadowoffsety\tshadowoffsety",
      "contents": "text.shadowOffsetY"
    },
    {
      "trigger": "text.shadowoffsetx\tshadowoffsetx",
      "contents": "text.shadowOffsetX"
    },
    {
      "trigger": "text.shadowcolor\tshadowcolor",
      "contents": "text.shadowColor"
    },
    {
      "trigger": "text.shadowblur\tshadowblur",
      "contents": "text.shadowBlur"
    },
    {
      "trigger": "text.rotation\trotation",
      "contents": "text.rotation"
    },
    {
      "trigger": "text.resolution\tresolution",
      "contents": "text.resolution"
    },
    {
      "trigger": "text.renderable\trenderable",
      "contents": "text.renderable"
    },
    {
      "trigger": "text.name\tname",
      "contents": "text.name"
    },
    {
      "trigger": "text.linespacing\tlinespacing",
      "contents": "text.lineSpacing"
    },
    {
      "trigger": "text.interactive\tinteractive",
      "contents": "text.interactive"
    },
    {
      "trigger": "text.inputenabled\tinputenabled",
      "contents": "text.inputEnabled"
    },
    {
      "trigger": "text.input\tinput",
      "contents": "text.input"
    },
    {
      "trigger": "text.height\theight",
      "contents": "text.height"
    },
    {
      "trigger": "text.fontweight\tfontweight",
      "contents": "text.fontWeight"
    },
    {
      "trigger": "text.fontsize\tfontsize",
      "contents": "text.fontSize"
    },
    {
      "trigger": "text.font\tfont",
      "contents": "text.font"
    },
    {
      "trigger": "text.fixedtocamera\tfixedtocamera",
      "contents": "text.fixedToCamera"
    },
    {
      "trigger": "text.filters\tfilters",
      "contents": "text.filters"
    },
    {
      "trigger": "text.fill\tfill",
      "contents": "text.fill"
    },
    {
      "trigger": "text.exists\texists",
      "contents": "text.exists"
    },
    {
      "trigger": "text.destroyphase\tdestroyphase",
      "contents": "text.destroyPhase"
    },
    {
      "trigger": "text.defaultcursor\tdefaultcursor",
      "contents": "text.defaultCursor"
    },
    {
      "trigger": "text.context\tcontext",
      "contents": "text.context"
    },
    {
      "trigger": "text.colors\tcolors",
      "contents": "text.colors"
    },
    {
      "trigger": "text.canvas\tcanvas",
      "contents": "text.canvas"
    },
    {
      "trigger": "text.cacheasbitmap\tcacheasbitmap",
      "contents": "text.cacheAsBitmap"
    },
    {
      "trigger": "text.blendmode\tblendmode",
      "contents": "text.blendMode"
    },
    {
      "trigger": "text.angle\tangle",
      "contents": "text.angle"
    },
    {
      "trigger": "text.alpha\talpha",
      "contents": "text.alpha"
    },
    {
      "trigger": "text.align\talign",
      "contents": "text.align"
    },
    {
      "trigger": "text.children\tchildren",
      "contents": "text.children"
    },
    {
      "trigger": "text.mask\tmask",
      "contents": "text.mask"
    },
    {
      "trigger": "text.parent\tparent",
      "contents": "text.parent"
    },
    {
      "trigger": "text.shader\tshader",
      "contents": "text.shader"
    },
    {
      "trigger": "text.stage\tstage",
      "contents": "text.stage"
    },
    {
      "trigger": "text.texture\ttexture",
      "contents": "text.texture"
    },
    {
      "trigger": "text.addchild\taddchild",
      "contents": "text.addChild(${1:child});"
    },
    {
      "trigger": "text.addchildat\taddchildat",
      "contents": "text.addChildAt(${1:child},${2:index});"
    },
    {
      "trigger": "text.fromframe\tfromframe",
      "contents": "text.fromFrame(${1:frameId});"
    },
    {
      "trigger": "text.fromimage\tfromimage",
      "contents": "text.fromImage(${1:imageId});"
    },
    {
      "trigger": "text.generatetexture\tgeneratetexture",
      "contents": "text.generateTexture(${1:resolution},${2:scaleMode},${3:renderer});"
    },
    {
      "trigger": "text.getchildat\tgetchildat",
      "contents": "text.getChildAt(${1:index});"
    },
    {
      "trigger": "text.removechild\tremovechild",
      "contents": "text.removeChild(${1:child});"
    },
    {
      "trigger": "text.removechildat\tremovechildat",
      "contents": "text.removeChildAt(${1:index});"
    },
    {
      "trigger": "timerevent.timer\ttimer",
      "contents": "timerEvent.timer"
    },
    {
      "trigger": "timer.repeat\trepeat",
      "contents": "timer.repeat(${1:delay},${2:repeatCount},${3:callback},${4:callbackContext},${5:arguments});"
    },
    {
      "trigger": "timer.loop\tloop",
      "contents": "timer.loop(${1:delay},${2:callback},${3:callbackContext},${4:arguments});"
    },
    {
      "trigger": "timer.add\tadd",
      "contents": "timer.add(${1:delay},${2:callback},${3:callbackContext},${4:arguments});"
    },
    {
      "trigger": "timer.oncomplete\toncomplete",
      "contents": "timer.onComplete"
    },
    {
      "trigger": "timer.game\tgame",
      "contents": "timer.game"
    },
    {
      "trigger": "time.create\tcreate",
      "contents": "time.create(${1:autoDestroy});"
    },
    {
      "trigger": "time.add\tadd",
      "contents": "time.add(${1:timer});"
    },
    {
      "trigger": "time.game\tgame",
      "contents": "time.game"
    },
    {
      "trigger": "time.events\tevents",
      "contents": "time.events"
    },
    {
      "trigger": "state.time\ttime",
      "contents": "state.time"
    },
    {
      "trigger": "game.time\ttime",
      "contents": "game.time"
    },
    {
      "trigger": "physics.ninja.time\tninja.time",
      "contents": "physics.Ninja.time"
    },
    {
      "trigger": "timerevent.pendingdelete\tpendingdelete",
      "contents": "timerEvent.pendingDelete"
    },
    {
      "trigger": "timerevent.tick\ttick",
      "contents": "timerEvent.tick"
    },
    {
      "trigger": "timerevent.repeatcount\trepeatcount",
      "contents": "timerEvent.repeatCount"
    },
    {
      "trigger": "timerevent.loop\tloop",
      "contents": "timerEvent.loop"
    },
    {
      "trigger": "timerevent.delay\tdelay",
      "contents": "timerEvent.delay"
    },
    {
      "trigger": "timerevent.callbackcontext\tcallbackcontext",
      "contents": "timerEvent.callbackContext"
    },
    {
      "trigger": "timerevent.callback\tcallback",
      "contents": "timerEvent.callback"
    },
    {
      "trigger": "timerevent.arguments\targuments",
      "contents": "timerEvent.arguments"
    },
    {
      "trigger": "timer.update\tupdate",
      "contents": "timer.update(${1:time});"
    },
    {
      "trigger": "timer.sorthandler\tsorthandler",
      "contents": "timer.sortHandler();"
    },
    {
      "trigger": "timer.stop\tstop",
      "contents": "timer.stop(${1:clearEvents});"
    },
    {
      "trigger": "timer.start\tstart",
      "contents": "timer.start(${1:delay});"
    },
    {
      "trigger": "timer.resume\tresume",
      "contents": "timer.resume();"
    },
    {
      "trigger": "timer.removeall\tremoveall",
      "contents": "timer.removeAll();"
    },
    {
      "trigger": "timer.remove\tremove",
      "contents": "timer.remove(${1:event});"
    },
    {
      "trigger": "timer.pause\tpause",
      "contents": "timer.pause();"
    },
    {
      "trigger": "timer.order\torder",
      "contents": "timer.order();"
    },
    {
      "trigger": "timer.destroy\tdestroy",
      "contents": "timer.destroy();"
    },
    {
      "trigger": "timer.clearpendingevents\tclearpendingevents",
      "contents": "timer.clearPendingEvents();"
    },
    {
      "trigger": "timer.adjustevents\tadjustevents",
      "contents": "timer.adjustEvents();"
    },
    {
      "trigger": "timer.second\tsecond",
      "contents": "timer.SECOND"
    },
    {
      "trigger": "timer.quarter\tquarter",
      "contents": "timer.QUARTER"
    },
    {
      "trigger": "timer.minute\tminute",
      "contents": "timer.MINUTE"
    },
    {
      "trigger": "timer.half\thalf",
      "contents": "timer.HALF"
    },
    {
      "trigger": "timer.nexttick\tnexttick",
      "contents": "timer.nextTick"
    },
    {
      "trigger": "timer.elapsed\telapsed",
      "contents": "timer.elapsed"
    },
    {
      "trigger": "timer.timecap\ttimecap",
      "contents": "timer.timeCap"
    },
    {
      "trigger": "timer.seconds\tseconds",
      "contents": "timer.seconds"
    },
    {
      "trigger": "timer.running\trunning",
      "contents": "timer.running"
    },
    {
      "trigger": "timer.paused\tpaused",
      "contents": "timer.paused"
    },
    {
      "trigger": "timer.next\tnext",
      "contents": "timer.next"
    },
    {
      "trigger": "timer.ms\tms",
      "contents": "timer.ms"
    },
    {
      "trigger": "timer.length\tlength",
      "contents": "timer.length"
    },
    {
      "trigger": "timer.expired\texpired",
      "contents": "timer.expired"
    },
    {
      "trigger": "timer.duration\tduration",
      "contents": "timer.duration"
    },
    {
      "trigger": "timer.autodestroy\tautodestroy",
      "contents": "timer.autoDestroy"
    },
    {
      "trigger": "time.update\tupdate",
      "contents": "time.update(${1:time});"
    },
    {
      "trigger": "time.boot\tboot",
      "contents": "time.boot();"
    },
    {
      "trigger": "time.totalelapsedseconds\ttotalelapsedseconds",
      "contents": "time.totalElapsedSeconds();"
    },
    {
      "trigger": "time.reset\treset",
      "contents": "time.reset();"
    },
    {
      "trigger": "time.removeall\tremoveall",
      "contents": "time.removeAll();"
    },
    {
      "trigger": "time.elapsedsince\telapsedsince",
      "contents": "time.elapsedSince(${1:since});"
    },
    {
      "trigger": "time.elapsedsecondssince\telapsedsecondssince",
      "contents": "time.elapsedSecondsSince(${1:since});"
    },
    {
      "trigger": "time.time\ttime",
      "contents": "time.time"
    },
    {
      "trigger": "time.prevtime\tprevtime",
      "contents": "time.prevTime"
    },
    {
      "trigger": "time.pausedtime\tpausedtime",
      "contents": "time.pausedTime"
    },
    {
      "trigger": "time.now\tnow",
      "contents": "time.now"
    },
    {
      "trigger": "time.fps\tfps",
      "contents": "time.fps"
    },
    {
      "trigger": "time.elapsed\telapsed",
      "contents": "time.elapsed"
    },
    {
      "trigger": "time.timetocall\ttimetocall",
      "contents": "time.timeToCall"
    },
    {
      "trigger": "time.timecap\ttimecap",
      "contents": "time.timeCap"
    },
    {
      "trigger": "time.physicselapsed\tphysicselapsed",
      "contents": "time.physicsElapsed"
    },
    {
      "trigger": "time.pauseduration\tpauseduration",
      "contents": "time.pauseDuration"
    },
    {
      "trigger": "time.msmin\tmsmin",
      "contents": "time.msMin"
    },
    {
      "trigger": "time.msmax\tmsmax",
      "contents": "time.msMax"
    },
    {
      "trigger": "time.lasttime\tlasttime",
      "contents": "time.lastTime"
    },
    {
      "trigger": "time.frames\tframes",
      "contents": "time.frames"
    },
    {
      "trigger": "time.fpsmin\tfpsmin",
      "contents": "time.fpsMin"
    },
    {
      "trigger": "time.fpsmax\tfpsmax",
      "contents": "time.fpsMax"
    },
    {
      "trigger": "time.deltacap\tdeltacap",
      "contents": "time.deltaCap"
    },
    {
      "trigger": "time.advancedtiming\tadvancedtiming",
      "contents": "time.advancedTiming"
    },
    {
      "trigger": "timer.events\tevents",
      "contents": "timer.events"
    },
    {
      "trigger": "touch.game\tgame",
      "contents": "touch.game"
    },
    {
      "trigger": "input.touch\ttouch",
      "contents": "input.touch"
    },
    {
      "trigger": "touch.stop\tstop",
      "contents": "touch.stop();"
    },
    {
      "trigger": "touch.start\tstart",
      "contents": "touch.start();"
    },
    {
      "trigger": "touch.ontouchstart\tontouchstart",
      "contents": "touch.onTouchStart(${1:event});"
    },
    {
      "trigger": "touch.ontouchmove\tontouchmove",
      "contents": "touch.onTouchMove(${1:event});"
    },
    {
      "trigger": "touch.ontouchleave\tontouchleave",
      "contents": "touch.onTouchLeave(${1:event});"
    },
    {
      "trigger": "touch.ontouchenter\tontouchenter",
      "contents": "touch.onTouchEnter(${1:event});"
    },
    {
      "trigger": "touch.ontouchend\tontouchend",
      "contents": "touch.onTouchEnd(${1:event});"
    },
    {
      "trigger": "touch.ontouchcancel\tontouchcancel",
      "contents": "touch.onTouchCancel(${1:event});"
    },
    {
      "trigger": "touch.consumetouchmove\tconsumetouchmove",
      "contents": "touch.consumeTouchMove();"
    },
    {
      "trigger": "touch.touchstartcallback\ttouchstartcallback",
      "contents": "touch.touchStartCallback"
    },
    {
      "trigger": "touch.touchmovecallback\ttouchmovecallback",
      "contents": "touch.touchMoveCallback"
    },
    {
      "trigger": "touch.touchleavecallback\ttouchleavecallback",
      "contents": "touch.touchLeaveCallback"
    },
    {
      "trigger": "touch.touchentercallback\ttouchentercallback",
      "contents": "touch.touchEnterCallback"
    },
    {
      "trigger": "touch.touchendcallback\ttouchendcallback",
      "contents": "touch.touchEndCallback"
    },
    {
      "trigger": "touch.touchcancelcallback\ttouchcancelcallback",
      "contents": "touch.touchCancelCallback"
    },
    {
      "trigger": "touch.preventdefault\tpreventdefault",
      "contents": "touch.preventDefault"
    },
    {
      "trigger": "touch.event\tevent",
      "contents": "touch.event"
    },
    {
      "trigger": "touch.disabled\tdisabled",
      "contents": "touch.disabled"
    },
    {
      "trigger": "touch.callbackcontext\tcallbackcontext",
      "contents": "touch.callbackContext"
    },
    {
      "trigger": "tweenmanager.game\tgame",
      "contents": "tweenManager.game"
    },
    {
      "trigger": "tween.yoyo\tyoyo",
      "contents": "tween.yoyo(${1:yoyo});"
    },
    {
      "trigger": "tween.to\tto",
      "contents": "tween.to(${1:properties},${2:duration},${3:ease},${4:autoStart},${5:delay},${6:repeat});"
    },
    {
      "trigger": "tween.stop\tstop",
      "contents": "tween.stop();"
    },
    {
      "trigger": "tween.start\tstart",
      "contents": "tween.start();"
    },
    {
      "trigger": "tween.repeat\trepeat",
      "contents": "tween.repeat(${1:times});"
    },
    {
      "trigger": "tween.onupdatecallback\tonupdatecallback",
      "contents": "tween.onUpdateCallback(${1:callback},${2:callbackContext});"
    },
    {
      "trigger": "tween.loop\tloop",
      "contents": "tween.loop();"
    },
    {
      "trigger": "tween.interpolation\tinterpolation",
      "contents": "tween.interpolation(${1:interpolation});"
    },
    {
      "trigger": "tween.from\tfrom",
      "contents": "tween.from(${1:properties},${2:duration},${3:ease},${4:autoStart},${5:delay},${6:repeat});"
    },
    {
      "trigger": "tween.easing\teasing",
      "contents": "tween.easing(${1:easing});"
    },
    {
      "trigger": "tween.delay\tdelay",
      "contents": "tween.delay(${1:amount});"
    },
    {
      "trigger": "tween.chain\tchain",
      "contents": "tween.chain();"
    },
    {
      "trigger": "tween.onstart\tonstart",
      "contents": "tween.onStart"
    },
    {
      "trigger": "tween.onloop\tonloop",
      "contents": "tween.onLoop"
    },
    {
      "trigger": "tween.oncomplete\toncomplete",
      "contents": "tween.onComplete"
    },
    {
      "trigger": "tween.game\tgame",
      "contents": "tween.game"
    },
    {
      "trigger": "tweenmanager.update\tupdate",
      "contents": "tweenManager.update();"
    },
    {
      "trigger": "tweenmanager.resumeall\tresumeall",
      "contents": "tweenManager.resumeAll();"
    },
    {
      "trigger": "tweenmanager.removeall\tremoveall",
      "contents": "tweenManager.removeAll();"
    },
    {
      "trigger": "tweenmanager.remove\tremove",
      "contents": "tweenManager.remove(${1:tween});"
    },
    {
      "trigger": "tweenmanager.pauseall\tpauseall",
      "contents": "tweenManager.pauseAll();"
    },
    {
      "trigger": "tweenmanager.istweening\tistweening",
      "contents": "tweenManager.isTweening(${1:object});"
    },
    {
      "trigger": "tweenmanager.getall\tgetall",
      "contents": "tweenManager.getAll();"
    },
    {
      "trigger": "tweenmanager.create\tcreate",
      "contents": "tweenManager.create(${1:object});"
    },
    {
      "trigger": "tweenmanager.add\tadd",
      "contents": "tweenManager.add(${1:tween});"
    },
    {
      "trigger": "tween.update\tupdate",
      "contents": "tween.update(${1:time});"
    },
    {
      "trigger": "tween.resume\tresume",
      "contents": "tween.resume();"
    },
    {
      "trigger": "tween.pause\tpause",
      "contents": "tween.pause();"
    },
    {
      "trigger": "tween.generatedata\tgeneratedata",
      "contents": "tween.generateData(${1:frameRate},${2:data});"
    },
    {
      "trigger": "tween.pendingdelete\tpendingdelete",
      "contents": "tween.pendingDelete"
    },
    {
      "trigger": "tween.isrunning\tisrunning",
      "contents": "tween.isRunning"
    },
    {
      "trigger": "utils.transposearray\ttransposearray",
      "contents": "utils.transposeArray(${1:array});"
    },
    {
      "trigger": "utils.shuffle\tshuffle",
      "contents": "utils.shuffle(${1:array});"
    },
    {
      "trigger": "utils.setproperty\tsetproperty",
      "contents": "utils.setProperty(${1:obj},${2:prop});"
    },
    {
      "trigger": "utils.rotatearray\trotatearray",
      "contents": "utils.rotateArray(${1:matrix},${2:direction});"
    },
    {
      "trigger": "utils.parsedimension\tparsedimension",
      "contents": "utils.parseDimension(${1:size},${2:dimension});"
    },
    {
      "trigger": "utils.pad\tpad",
      "contents": "utils.pad(${1:str},${2:len},${3:pad},${4:dir});"
    },
    {
      "trigger": "utils.mixin\tmixin",
      "contents": "utils.mixin(${1:from},${2:to});"
    },
    {
      "trigger": "utils.isplainobject\tisplainobject",
      "contents": "utils.isPlainObject(${1:obj});"
    },
    {
      "trigger": "utils.getproperty\tgetproperty",
      "contents": "utils.getProperty(${1:obj},${2:prop});"
    },
    {
      "trigger": "utils.extend\textend",
      "contents": "utils.extend(${1:deep},${2:target});"
    },
    {
      "trigger": "world.tolocal\ttolocal",
      "contents": "world.toLocal(${1:position},${2:[from]});"
    },
    {
      "trigger": "world.toglobal\ttoglobal",
      "contents": "world.toGlobal(${1:position});"
    },
    {
      "trigger": "world.getlocalbounds\tgetlocalbounds",
      "contents": "world.getLocalBounds();"
    },
    {
      "trigger": "world.getbounds\tgetbounds",
      "contents": "world.getBounds();"
    },
    {
      "trigger": "world.filter\tfilter",
      "contents": "world.filter(${1:predicate},${2:checkExists});"
    },
    {
      "trigger": "world.scale\tscale",
      "contents": "world.scale"
    },
    {
      "trigger": "world.position\tposition",
      "contents": "world.position"
    },
    {
      "trigger": "world.pivot\tpivot",
      "contents": "world.pivot"
    },
    {
      "trigger": "world.parent\tparent",
      "contents": "world.parent"
    },
    {
      "trigger": "world.ondestroy\tondestroy",
      "contents": "world.onDestroy"
    },
    {
      "trigger": "world.hitarea\thitarea",
      "contents": "world.hitArea"
    },
    {
      "trigger": "world.game\tgame",
      "contents": "world.game"
    },
    {
      "trigger": "world.filterarea\tfilterarea",
      "contents": "world.filterArea"
    },
    {
      "trigger": "world.cameraoffset\tcameraoffset",
      "contents": "world.cameraOffset"
    },
    {
      "trigger": "world.camera\tcamera",
      "contents": "world.camera"
    },
    {
      "trigger": "world.bounds\tbounds",
      "contents": "world.bounds"
    },
    {
      "trigger": "state.world\tworld",
      "contents": "state.world"
    },
    {
      "trigger": "camera.world\tworld",
      "contents": "camera.world"
    },
    {
      "trigger": "gameobjectfactory.world\tworld",
      "contents": "gameObjectFactory.world"
    },
    {
      "trigger": "gameobjectcreator.world\tworld",
      "contents": "gameObjectCreator.world"
    },
    {
      "trigger": "world.getindex\tgetindex",
      "contents": "world.getIndex(${1:child});"
    },
    {
      "trigger": "world.getfirstexists\tgetfirstexists",
      "contents": "world.getFirstExists(${1:state});"
    },
    {
      "trigger": "world.getfirstdead\tgetfirstdead",
      "contents": "world.getFirstDead();"
    },
    {
      "trigger": "world.getfirstalive\tgetfirstalive",
      "contents": "world.getFirstAlive();"
    },
    {
      "trigger": "world.getchildindex\tgetchildindex",
      "contents": "world.getChildIndex(${1:child});"
    },
    {
      "trigger": "world.getbottom\tgetbottom",
      "contents": "world.getBottom();"
    },
    {
      "trigger": "world.getat\tgetat",
      "contents": "world.getAt(${1:index});"
    },
    {
      "trigger": "world.foreachexists\tforeachexists",
      "contents": "world.forEachExists(${1:callback},${2:callbackContext});"
    },
    {
      "trigger": "world.foreachdead\tforeachdead",
      "contents": "world.forEachDead(${1:callback},${2:callbackContext});"
    },
    {
      "trigger": "world.foreachalive\tforeachalive",
      "contents": "world.forEachAlive(${1:callback},${2:callbackContext});"
    },
    {
      "trigger": "world.foreach\tforeach",
      "contents": "world.forEach(${1:callback},${2:callbackContext},${3:checkExists});"
    },
    {
      "trigger": "world.divideall\tdivideall",
      "contents": "world.divideAll(${1:property},${2:amount},${3:checkAlive},${4:checkVisible});"
    },
    {
      "trigger": "world.destroy\tdestroy",
      "contents": "world.destroy(${1:destroyChildren},${2:soft});"
    },
    {
      "trigger": "world.descendingsorthandler\tdescendingsorthandler",
      "contents": "world.descendingSortHandler(${1:a},${2:b});"
    },
    {
      "trigger": "world.customsort\tcustomsort",
      "contents": "world.customSort(${1:sortHandler},${2:context});"
    },
    {
      "trigger": "world.createmultiple\tcreatemultiple",
      "contents": "world.createMultiple(${1:quantity},${2:key},${3:frame},${4:exists});"
    },
    {
      "trigger": "world.create\tcreate",
      "contents": "world.create(${1:x},${2:y},${3:key},${4:frame},${5:exists});"
    },
    {
      "trigger": "world.countliving\tcountliving",
      "contents": "world.countLiving();"
    },
    {
      "trigger": "world.countdead\tcountdead",
      "contents": "world.countDead();"
    },
    {
      "trigger": "world.click\tclick",
      "contents": "world.click(${1:interactionData});"
    },
    {
      "trigger": "world.checkproperty\tcheckproperty",
      "contents": "world.checkProperty(${1:child},${2:key},${3:value},${4:force});"
    },
    {
      "trigger": "world.checkall\tcheckall",
      "contents": "world.checkAll(${1:key},${2:value},${3:checkAlive},${4:checkVisible},${5:force});"
    },
    {
      "trigger": "world.callallexists\tcallallexists",
      "contents": "world.callAllExists(${1:callback},${2:existsValue},${3:parameter});"
    },
    {
      "trigger": "world.callall\tcallall",
      "contents": "world.callAll(${1:method},${2:context},${3:parameter});"
    },
    {
      "trigger": "world.bringtotop\tbringtotop",
      "contents": "world.bringToTop(${1:child});"
    },
    {
      "trigger": "world.ascendingsorthandler\tascendingsorthandler",
      "contents": "world.ascendingSortHandler(${1:a},${2:b});"
    },
    {
      "trigger": "world.addmultiple\taddmultiple",
      "contents": "world.addMultiple(${1:children},${2:silent});"
    },
    {
      "trigger": "world.addat\taddat",
      "contents": "world.addAt(${1:child},${2:index},${3:silent});"
    },
    {
      "trigger": "world.addall\taddall",
      "contents": "world.addAll(${1:property},${2:amount},${3:checkAlive},${4:checkVisible});"
    },
    {
      "trigger": "world.add\tadd",
      "contents": "world.add(${1:child},${2:silent});"
    },
    {
      "trigger": "world.z\tz",
      "contents": "world.z"
    },
    {
      "trigger": "world.y\ty",
      "contents": "world.y"
    },
    {
      "trigger": "world.x\tx",
      "contents": "world.x"
    },
    {
      "trigger": "world.worldvisible\tworldvisible",
      "contents": "world.worldVisible"
    },
    {
      "trigger": "world.worldalpha\tworldalpha",
      "contents": "world.worldAlpha"
    },
    {
      "trigger": "world.width\twidth",
      "contents": "world.width"
    },
    {
      "trigger": "world.visible\tvisible",
      "contents": "world.visible"
    },
    {
      "trigger": "world.total\ttotal",
      "contents": "world.total"
    },
    {
      "trigger": "world.rotation\trotation",
      "contents": "world.rotation"
    },
    {
      "trigger": "world.renderable\trenderable",
      "contents": "world.renderable"
    },
    {
      "trigger": "world.randomy\trandomy",
      "contents": "world.randomY"
    },
    {
      "trigger": "world.randomx\trandomx",
      "contents": "world.randomX"
    },
    {
      "trigger": "world.physicsbodytype\tphysicsbodytype",
      "contents": "world.physicsBodyType"
    },
    {
      "trigger": "world.name\tname",
      "contents": "world.name"
    },
    {
      "trigger": "world.length\tlength",
      "contents": "world.length"
    },
    {
      "trigger": "world.interactive\tinteractive",
      "contents": "world.interactive"
    },
    {
      "trigger": "world.ignoredestroy\tignoredestroy",
      "contents": "world.ignoreDestroy"
    },
    {
      "trigger": "world.height\theight",
      "contents": "world.height"
    },
    {
      "trigger": "world.fixedtocamera\tfixedtocamera",
      "contents": "world.fixedToCamera"
    },
    {
      "trigger": "world.filters\tfilters",
      "contents": "world.filters"
    },
    {
      "trigger": "world.exists\texists",
      "contents": "world.exists"
    },
    {
      "trigger": "world.enablebodydebug\tenablebodydebug",
      "contents": "world.enableBodyDebug"
    },
    {
      "trigger": "world.enablebody\tenablebody",
      "contents": "world.enableBody"
    },
    {
      "trigger": "world.defaultcursor\tdefaultcursor",
      "contents": "world.defaultCursor"
    },
    {
      "trigger": "world.cursor\tcursor",
      "contents": "world.cursor"
    },
    {
      "trigger": "world.classtype\tclasstype",
      "contents": "world.classType"
    },
    {
      "trigger": "world.centery\tcentery",
      "contents": "world.centerY"
    },
    {
      "trigger": "world.centerx\tcenterx",
      "contents": "world.centerX"
    },
    {
      "trigger": "world.angle\tangle",
      "contents": "world.angle"
    },
    {
      "trigger": "world.alpha\talpha",
      "contents": "world.alpha"
    },
    {
      "trigger": "world.alive\talive",
      "contents": "world.alive"
    },
    {
      "trigger": "world._definedsize\t_definedsize",
      "contents": "world._definedSize"
    },
    {
      "trigger": "world.boot\tboot",
      "contents": "world.boot();"
    },
    {
      "trigger": "world.xy\txy",
      "contents": "world.xy(${1:index},${2:x},${3:y});"
    },
    {
      "trigger": "world.wrap\twrap",
      "contents": "world.wrap(${1:sprite},${2:padding},${3:useBounds},${4:horizontal},${5:vertical});"
    },
    {
      "trigger": "world.touchstart\ttouchstart",
      "contents": "world.touchstart(${1:interactionData});"
    },
    {
      "trigger": "world.touchendoutside\ttouchendoutside",
      "contents": "world.touchendoutside(${1:interactionData});"
    },
    {
      "trigger": "world.touchend\ttouchend",
      "contents": "world.touchend(${1:interactionData});"
    },
    {
      "trigger": "world.tap\ttap",
      "contents": "world.tap(${1:interactionData});"
    },
    {
      "trigger": "world.swapchildren\tswapchildren",
      "contents": "world.swapChildren(${1:child},${2:child2});"
    },
    {
      "trigger": "world.swap\tswap",
      "contents": "world.swap(${1:child1},${2:child2});"
    },
    {
      "trigger": "world.suball\tsuball",
      "contents": "world.subAll(${1:property},${2:amount},${3:checkAlive},${4:checkVisible});"
    },
    {
      "trigger": "world.sort\tsort",
      "contents": "world.sort(${1:index},${2:order});"
    },
    {
      "trigger": "world.shutdown\tshutdown",
      "contents": "world.shutdown();"
    },
    {
      "trigger": "world.setstagereference\tsetstagereference",
      "contents": "world.setStageReference(${1:stage});"
    },
    {
      "trigger": "world.setproperty\tsetproperty",
      "contents": "world.setProperty(${1:child},${2:key},${3:value},${4:operation},${5:force});"
    },
    {
      "trigger": "world.setchildindex\tsetchildindex",
      "contents": "world.setChildIndex(${1:child},${2:index});"
    },
    {
      "trigger": "world.setbounds\tsetbounds",
      "contents": "world.setBounds(${1:x},${2:y},${3:width},${4:height});"
    },
    {
      "trigger": "world.setallchildren\tsetallchildren",
      "contents": "world.setAllChildren(${1:key},${2:value},${3:checkAlive},${4:checkVisible},${5:operation},${6:force});"
    },
    {
      "trigger": "world.setall\tsetall",
      "contents": "world.setAll(${1:key},${2:value},${3:checkAlive},${4:checkVisible},${5:operation},${6:force});"
    },
    {
      "trigger": "world.set\tset",
      "contents": "world.set(${1:child},${2:key},${3:value},${4:checkAlive},${5:checkVisible},${6:operation});"
    },
    {
      "trigger": "world.sendtoback\tsendtoback",
      "contents": "world.sendToBack(${1:child});"
    },
    {
      "trigger": "world.rightupoutside\trightupoutside",
      "contents": "world.rightupoutside(${1:interactionData});"
    },
    {
      "trigger": "world.rightup\trightup",
      "contents": "world.rightup(${1:interactionData});"
    },
    {
      "trigger": "world.rightdown\trightdown",
      "contents": "world.rightdown(${1:interactionData});"
    },
    {
      "trigger": "world.rightclick\trightclick",
      "contents": "world.rightclick(${1:interactionData});"
    },
    {
      "trigger": "world.reverse\treverse",
      "contents": "world.reverse();"
    },
    {
      "trigger": "world.resetcursor\tresetcursor",
      "contents": "world.resetCursor(${1:index});"
    },
    {
      "trigger": "world.replace\treplace",
      "contents": "world.replace(${1:oldChild},${2:newChild});"
    },
    {
      "trigger": "world.removestagereference\tremovestagereference",
      "contents": "world.removeStageReference();"
    },
    {
      "trigger": "world.removechildren\tremovechildren",
      "contents": "world.removeChildren(${1:beginIndex},${2:endIndex});"
    },
    {
      "trigger": "world.removebetween\tremovebetween",
      "contents": "world.removeBetween(${1:startIndex},${2:endIndex},${3:destroy},${4:silent});"
    },
    {
      "trigger": "world.remove\tremove",
      "contents": "world.remove(${1:child},${2:destroy},${3:silent});"
    },
    {
      "trigger": "world.previous\tprevious",
      "contents": "world.previous();"
    },
    {
      "trigger": "world.next\tnext",
      "contents": "world.next();"
    },
    {
      "trigger": "world.multiplyall\tmultiplyall",
      "contents": "world.multiplyAll(${1:property},${2:amount},${3:checkAlive},${4:checkVisible});"
    },
    {
      "trigger": "world.moveup\tmoveup",
      "contents": "world.moveUp(${1:child});"
    },
    {
      "trigger": "world.movedown\tmovedown",
      "contents": "world.moveDown(${1:child});"
    },
    {
      "trigger": "world.mouseupoutside\tmouseupoutside",
      "contents": "world.mouseupoutside(${1:interactionData});"
    },
    {
      "trigger": "world.mouseup\tmouseup",
      "contents": "world.mouseup(${1:interactionData});"
    },
    {
      "trigger": "world.mouseover\tmouseover",
      "contents": "world.mouseover(${1:interactionData});"
    },
    {
      "trigger": "world.mouseout\tmouseout",
      "contents": "world.mouseout(${1:interactionData});"
    },
    {
      "trigger": "world.mousedown\tmousedown",
      "contents": "world.mousedown(${1:interactionData});"
    },
    {
      "trigger": "world.iterate\titerate",
      "contents": "world.iterate(${1:key},${2:value},${3:returnType},${4:callback},${5:callbackContext});"
    },
    {
      "trigger": "world.hasproperty\thasproperty",
      "contents": "world.hasProperty(${1:child},${2:key});"
    },
    {
      "trigger": "world.gettop\tgettop",
      "contents": "world.getTop();"
    },
    {
      "trigger": "world.getrandom\tgetrandom",
      "contents": "world.getRandom(${1:startIndex},${2:length});"
    },
    {
      "trigger": "world.removeall\tremoveall",
      "contents": "world.removeAll(${1:destroy},${2:silent});"
    },
    {
      "trigger": "world.removechildat\tremovechildat",
      "contents": "world.removeChildAt(${1:index});"
    },
    {
      "trigger": "world.removechild\tremovechild",
      "contents": "world.removeChild(${1:child});"
    },
    {
      "trigger": "world.children\tchildren",
      "contents": "world.children"
    },
    {
      "trigger": "world.mask\tmask",
      "contents": "world.mask"
    },
    {
      "trigger": "world.stage\tstage",
      "contents": "world.stage"
    },
    {
      "trigger": "world.addchild\taddchild",
      "contents": "world.addChild(${1:child});"
    },
    {
      "trigger": "world.addchildat\taddchildat",
      "contents": "world.addChildAt(${1:child},${2:index});"
    },
    {
      "trigger": "world.generatetexture\tgeneratetexture",
      "contents": "world.generateTexture(${1:resolution},${2:scaleMode},${3:renderer});"
    },
    {
      "trigger": "world.getchildat\tgetchildat",
      "contents": "world.getChildAt(${1:index});"
    },
    {
      "trigger": "math.wrapvalue\twrapvalue",
      "contents": "math.wrapValue(${1:value},${2:amount},${3:max});"
    },
    {
      "trigger": "math.wrapangle\twrapangle",
      "contents": "math.wrapAngle(${1:angle},${2:radians});"
    },
    {
      "trigger": "math.wrap\twrap",
      "contents": "math.wrap(${1:value},${2:min},${3:max});"
    },
    {
      "trigger": "math.within\twithin",
      "contents": "math.within(${1:a},${2:b},${3:tolerance});"
    },
    {
      "trigger": "math.truncate\ttruncate",
      "contents": "math.truncate(${1:n});"
    },
    {
      "trigger": "math.snaptoinarray\tsnaptoinarray",
      "contents": "math.snapToInArray(${1:input},${2:arr},${3:sort});"
    },
    {
      "trigger": "math.snaptofloor\tsnaptofloor",
      "contents": "math.snapToFloor(${1:input},${2:gap},${3:start});"
    },
    {
      "trigger": "math.snaptoceil\tsnaptoceil",
      "contents": "math.snapToCeil(${1:input},${2:gap},${3:start});"
    },
    {
      "trigger": "math.snapto\tsnapto",
      "contents": "math.snapTo(${1:input},${2:gap},${3:start});"
    },
    {
      "trigger": "math.smoothstep\tsmoothstep",
      "contents": "math.smoothstep(${1:x},${2:min},${3:max});"
    },
    {
      "trigger": "math.smootherstep\tsmootherstep",
      "contents": "math.smootherstep(${1:x},${2:min},${3:max});"
    },
    {
      "trigger": "math.sincosgenerator\tsincosgenerator",
      "contents": "math.sinCosGenerator(${1:length},${2:sinAmplitude},${3:cosAmplitude},${4:frequency});"
    },
    {
      "trigger": "math.sign\tsign",
      "contents": "math.sign(${1:x});"
    },
    {
      "trigger": "math.shufflearray\tshufflearray",
      "contents": "math.shuffleArray(${1:array});"
    },
    {
      "trigger": "math.shift\tshift",
      "contents": "math.shift(${1:stack});"
    },
    {
      "trigger": "math.shear\tshear",
      "contents": "math.shear(${1:n});"
    },
    {
      "trigger": "math.roundto\troundto",
      "contents": "math.roundTo(${1:value},${2:place},${3:base});"
    },
    {
      "trigger": "math.reverseangle\treverseangle",
      "contents": "math.reverseAngle(${1:angleRad});"
    },
    {
      "trigger": "math.removerandom\tremoverandom",
      "contents": "math.removeRandom(${1:objects},${2:startIndex},${3:length});"
    },
    {
      "trigger": "math.randomsign\trandomsign",
      "contents": "math.randomSign();"
    },
    {
      "trigger": "math.radtodeg\tradtodeg",
      "contents": "math.radToDeg();"
    },
    {
      "trigger": "math.percent\tpercent",
      "contents": "math.percent(${1:a},${2:b},${3:base});"
    },
    {
      "trigger": "math.numberarraystep\tnumberarraystep",
      "contents": "math.numberArrayStep(${1:start},${2:end},${3:step});"
    },
    {
      "trigger": "math.numberarray\tnumberarray",
      "contents": "math.numberArray(${1:min},${2:max});"
    },
    {
      "trigger": "math.normalizelongitude\tnormalizelongitude",
      "contents": "math.normalizeLongitude(${1:lng});"
    },
    {
      "trigger": "math.normalizelatitude\tnormalizelatitude",
      "contents": "math.normalizeLatitude(${1:lat});"
    },
    {
      "trigger": "math.normalizeangle\tnormalizeangle",
      "contents": "math.normalizeAngle(${1:angleRad});"
    },
    {
      "trigger": "math.minsub\tminsub",
      "contents": "math.minSub(${1:value},${2:amount},${3:min});"
    },
    {
      "trigger": "math.minproperty\tminproperty",
      "contents": "math.minProperty();"
    },
    {
      "trigger": "math.min\tmin",
      "contents": "math.min();"
    },
    {
      "trigger": "math.maxproperty\tmaxproperty",
      "contents": "math.maxProperty();"
    },
    {
      "trigger": "math.maxadd\tmaxadd",
      "contents": "math.maxAdd(${1:value},${2:amount},${3:max-});"
    },
    {
      "trigger": "math.max\tmax",
      "contents": "math.max();"
    },
    {
      "trigger": "math.maplinear\tmaplinear",
      "contents": "math.mapLinear(${1:x},${2:a1},${3:a2},${4:b1},${5:b2});"
    },
    {
      "trigger": "math.linearinterpolation\tlinearinterpolation",
      "contents": "math.linearInterpolation(${1:v},${2:k});"
    },
    {
      "trigger": "math.limitvalue\tlimitvalue",
      "contents": "math.limitValue(${1:value},${2:min},${3:max});"
    },
    {
      "trigger": "math.isodd\tisodd",
      "contents": "math.isOdd(${1:n});"
    },
    {
      "trigger": "math.iseven\tiseven",
      "contents": "math.isEven(${1:n});"
    },
    {
      "trigger": "math.interpolatefloat\tinterpolatefloat",
      "contents": "math.interpolateFloat(${1:a},${2:b},${3:weight});"
    },
    {
      "trigger": "math.getrandom\tgetrandom",
      "contents": "math.getRandom(${1:objects},${2:startIndex},${3:length});"
    },
    {
      "trigger": "math.fuzzylessthan\tfuzzylessthan",
      "contents": "math.fuzzyLessThan(${1:a},${2:b},${3:epsilon});"
    },
    {
      "trigger": "math.fuzzygreaterthan\tfuzzygreaterthan",
      "contents": "math.fuzzyGreaterThan(${1:a},${2:b},${3:epsilon});"
    },
    {
      "trigger": "math.fuzzyfloor\tfuzzyfloor",
      "contents": "math.fuzzyFloor(${1:val},${2:epsilon});"
    },
    {
      "trigger": "math.fuzzyequal\tfuzzyequal",
      "contents": "math.fuzzyEqual(${1:a},${2:b},${3:epsilon});"
    },
    {
      "trigger": "math.fuzzyceil\tfuzzyceil",
      "contents": "math.fuzzyCeil(${1:val},${2:epsilon});"
    },
    {
      "trigger": "math.floorto\tfloorto",
      "contents": "math.floorTo(${1:value},${2:place},${3:base});"
    },
    {
      "trigger": "math.floor\tfloor",
      "contents": "math.floor(${1:Value});"
    },
    {
      "trigger": "math.factorial\tfactorial",
      "contents": "math.factorial(${1:value});"
    },
    {
      "trigger": "math.distancerounded\tdistancerounded",
      "contents": "math.distanceRounded(${1:x1},${2:y1},${3:x2},${4:y2});"
    },
    {
      "trigger": "math.distancepow\tdistancepow",
      "contents": "math.distancePow(${1:x1},${2:y1},${3:x2},${4:y2},${5:pow});"
    },
    {
      "trigger": "math.distance\tdistance",
      "contents": "math.distance(${1:x1},${2:y1},${3:x2},${4:y2});"
    },
    {
      "trigger": "math.difference\tdifference",
      "contents": "math.difference(${1:a},${2:b});"
    },
    {
      "trigger": "math.degtorad\tdegtorad",
      "contents": "math.degToRad();"
    },
    {
      "trigger": "math.clampbottom\tclampbottom",
      "contents": "math.clampBottom(${1:x},${2:a});"
    },
    {
      "trigger": "math.clamp\tclamp",
      "contents": "math.clamp(${1:x},${2:a},${3:b});"
    },
    {
      "trigger": "math.chanceroll\tchanceroll",
      "contents": "math.chanceRoll(${1:chance});"
    },
    {
      "trigger": "math.ceilto\tceilto",
      "contents": "math.ceilTo(${1:value},${2:place},${3:base});"
    },
    {
      "trigger": "math.ceil\tceil",
      "contents": "math.ceil(${1:value});"
    },
    {
      "trigger": "math.catmullrominterpolation\tcatmullrominterpolation",
      "contents": "math.catmullRomInterpolation(${1:v},${2:k});"
    },
    {
      "trigger": "math.catmullrom\tcatmullrom",
      "contents": "math.catmullRom(${1:p0},${2:p1},${3:p2},${4:p3},${5:t});"
    },
    {
      "trigger": "math.bezierinterpolation\tbezierinterpolation",
      "contents": "math.bezierInterpolation(${1:v},${2:k});"
    },
    {
      "trigger": "math.bernstein\tbernstein",
      "contents": "math.bernstein(${1:n},${2:i});"
    },
    {
      "trigger": "math.average\taverage",
      "contents": "math.average();"
    },
    {
      "trigger": "math.anglelimit\tanglelimit",
      "contents": "math.angleLimit(${1:angle},${2:min},${3:max});"
    },
    {
      "trigger": "math.anglebetweeny\tanglebetweeny",
      "contents": "math.angleBetweenY(${1:x1},${2:y1},${3:x2},${4:y2});"
    },
    {
      "trigger": "math.anglebetweenpointsy\tanglebetweenpointsy",
      "contents": "math.angleBetweenPointsY(${1:point1},${2:point2});"
    },
    {
      "trigger": "math.anglebetweenpoints\tanglebetweenpoints",
      "contents": "math.angleBetweenPoints(${1:point1},${2:point2});"
    },
    {
      "trigger": "math.anglebetween\tanglebetween",
      "contents": "math.angleBetween(${1:x1},${2:y1},${3:x2},${4:y2});"
    },
    {
      "trigger": "math.pi2\tpi2",
      "contents": "math.PI2();"
    }
  ]
}